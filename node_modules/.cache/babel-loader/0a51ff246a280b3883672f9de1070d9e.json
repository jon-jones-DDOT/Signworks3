{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addNewSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getFullSignPost } from './reload';\nimport { saveSupport, getPointOnRouteStreetSmart, projectGeometry } from '../../utils/JSAPI'; // WORKER //\n\nfunction addNewSupport(action) {\n  var newSupport, lrsResults, lrsInfo, antCraving;\n  return _regeneratorRuntime.wrap(function addNewSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          //build a new , blank support to save\n          newSupport = {};\n          newSupport.attributes = {\n            ANGLE: null,\n            BASETYPE: null,\n            COMMENTS: null,\n            CREATED_DATE: null,\n            CREATED_USER: null,\n            FROMDATE: null,\n            GLOBALID: null,\n            LAST_EDITED_DATE: null,\n            LAST_EDITED_USER: null,\n            LOCATION: null,\n            MEASURE: null,\n            MSENDDATE: null,\n            MSSTARTDATE: null,\n            MSUTILITYID: null,\n            NUMBEROFBASES: null,\n            OBJECTID: null,\n            ORIGIN_ID: null,\n            ROUTEID: null,\n            ROUTEID_ALT: null,\n            SEG_DIR: null,\n            SIDE: null,\n            STREETSEGID: null,\n            STREETSEGID_ALT: null,\n            SUBBASE: null,\n            SUPPORTHEIGHT: null,\n            SUPPORTSTATUS: 1,\n            SUPPORTTYPE: 14,\n            TODATE: null,\n            Z: null\n          };\n\n          newSupport.setAttributes = function (a) {\n            this.attributes = a;\n            return this;\n          };\n\n          newSupport.geometry = {\n            type: \"point\",\n            // autocasts as new Point()\n            x: action.payload.support.features[0].geometry.coordinates[0],\n            y: action.payload.support.features[0].geometry.coordinates[1],\n            z: action.payload.support.features[0].geometry.coordinates[2],\n            spatialReference: {\n              wkid: 2248\n            }\n          }; //add LRS info\n\n          _context.next = 7;\n          return call(getPointOnRouteStreetSmart, [newSupport, action.payload.layers.LRS_Service]);\n\n        case 7:\n          lrsResults = _context.sent;\n          lrsInfo = lrsResults.data.pointOnRoutes[0];\n          newSupport.attributes.ROUTEID = lrsInfo.routeID;\n          newSupport.attributes.MEASURE = lrsInfo.measureInMeters;\n          newSupport.attributes.STREETSEGID = lrsInfo.streetSegID; //now let's project its geometry to its native preference\n\n          _context.next = 14;\n          return call(projectGeometry, [[newSupport.geometry], action.payload.layers.geometryService, 2248, 26985]);\n\n        case 14:\n          antCraving = _context.sent;\n          newSupport.geometry = antCraving[0];\n          _context.next = 18;\n          return call(saveSupport, [newSupport, true, action.payload.layers.supports]);\n\n        case 18:\n          _context.next = 20;\n          return getFullSignPost(action);\n\n        case 20:\n          _context.next = 25;\n          break;\n\n        case 22:\n          _context.prev = 22;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/addNewSupport, ', _context.t0);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 22]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_newSupport.js"],"names":["addNewSupport","watchLayers","call","takeLatest","types","mapTypes","getFullSignPost","saveSupport","getPointOnRouteStreetSmart","projectGeometry","action","newSupport","attributes","ANGLE","BASETYPE","COMMENTS","CREATED_DATE","CREATED_USER","FROMDATE","GLOBALID","LAST_EDITED_DATE","LAST_EDITED_USER","LOCATION","MEASURE","MSENDDATE","MSSTARTDATE","MSUTILITYID","NUMBEROFBASES","OBJECTID","ORIGIN_ID","ROUTEID","ROUTEID_ALT","SEG_DIR","SIDE","STREETSEGID","STREETSEGID_ALT","SUBBASE","SUPPORTHEIGHT","SUPPORTSTATUS","SUPPORTTYPE","TODATE","Z","setAttributes","a","geometry","type","x","payload","support","features","coordinates","y","z","spatialReference","wkid","layers","LRS_Service","lrsResults","lrsInfo","data","pointOnRoutes","routeID","measureInMeters","streetSegID","geometryService","antCraving","supports","console","log","NEW_SUPPORT_S"],"mappings":"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","sourcesContent":["import {call, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getFullSignPost} from './reload'\r\nimport {saveSupport, getPointOnRouteStreetSmart, projectGeometry} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * addNewSupport(action) {\r\n    try {\r\n\r\n        //build a new , blank support to save\r\n        let newSupport = {};\r\n        newSupport.attributes = {\r\n            ANGLE: null,\r\n            BASETYPE: null,\r\n            COMMENTS: null,\r\n            CREATED_DATE: null,\r\n            CREATED_USER: null,\r\n            FROMDATE: null,\r\n            GLOBALID: null,\r\n            LAST_EDITED_DATE: null,\r\n            LAST_EDITED_USER: null,\r\n            LOCATION: null,\r\n            MEASURE: null,\r\n            MSENDDATE: null,\r\n            MSSTARTDATE: null,\r\n            MSUTILITYID: null,\r\n            NUMBEROFBASES: null,\r\n            OBJECTID: null,\r\n            ORIGIN_ID: null,\r\n            ROUTEID: null,\r\n            ROUTEID_ALT: null,\r\n            SEG_DIR: null,\r\n            SIDE: null,\r\n            STREETSEGID: null,\r\n            STREETSEGID_ALT: null,\r\n            SUBBASE: null,\r\n            SUPPORTHEIGHT: null,\r\n            SUPPORTSTATUS: 1,\r\n            SUPPORTTYPE: 14,\r\n            TODATE: null,\r\n            Z: null\r\n        }\r\n        newSupport.setAttributes = function (a) {\r\n            this.attributes = a;\r\n            return this\r\n        };\r\n        newSupport.geometry = {\r\n            type: \"point\", // autocasts as new Point()\r\n            x: action.payload.support.features[0].geometry.coordinates[0],\r\n            y: action.payload.support.features[0].geometry.coordinates[1],\r\n            z: action.payload.support.features[0].geometry.coordinates[2],\r\n            spatialReference: {\r\n                wkid: 2248\r\n            }\r\n        };\r\n\r\n        //add LRS info\r\n\r\n        const lrsResults = yield call(getPointOnRouteStreetSmart, [newSupport,action.payload.layers.LRS_Service]);\r\n        const lrsInfo = lrsResults.data.pointOnRoutes[0];\r\n        newSupport.attributes.ROUTEID = lrsInfo.routeID;\r\n        newSupport.attributes.MEASURE = lrsInfo.measureInMeters;\r\n        newSupport.attributes.STREETSEGID = lrsInfo.streetSegID;\r\n        \r\n        //now let's project its geometry to its native preference\r\n\r\n\r\n      const antCraving  =  yield call(projectGeometry,[[newSupport.geometry],action.payload.layers.geometryService,2248,26985   ])\r\n      \r\n      newSupport.geometry  = antCraving[0];\r\n\r\n\r\n       \r\n          yield call(saveSupport, [newSupport, true,\r\n         action.payload.layers.supports]); \r\n\r\n         yield getFullSignPost(action);\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/addNewSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n\r\n    yield takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}