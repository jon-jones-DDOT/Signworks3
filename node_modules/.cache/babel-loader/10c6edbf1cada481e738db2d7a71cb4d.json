{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCone),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI'; // WORKER //\n\nfunction getCone(action) {\n  return _regeneratorRuntime.wrap(function getCone$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            console.log('action :', action);\n            /*  const projectResult = yield call(projectGeometry, [\r\n                  [action.payload.sel[0].geometry],\r\n                  action.payload.layers.geometryService,\r\n                  action.payload.inSR,\r\n                  action.payload.outSR\r\n              ]);\r\n                \r\n              yield put({\r\n                  type: graphicTypes.SET_NEW_CONE_RG,\r\n                  payload: {\r\n                  }\r\n              });\r\n            */\n          } catch (e) {\n            console.log('SAGA ERROR: graphic/getNewCone, ', e);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_getNewCone.js"],"names":["getCone","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","action","console","log","e","GET_NEW_CONE_S"],"mappings":";;;;yBAOWA,O;;;yBAwBOC,gB;;AA/BlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAuF,mBAAvF,C,CAGA;;AAEA,SAAWV,OAAX,CAAmBW,MAAnB;AAAA;AAAA;AAAA;AAAA;AACI,cAAI;AAELC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;AACG;;;;;;;;;;;;;AAcD,WAjBD,CAiBE,OAAOG,CAAP,EAAU;AACRF,YAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDC,CAAhD;AACH;;AApBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAuBA;;;AACA,OAAO,SAAWb,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACS,cAAd,EAA8Bf,OAA9B,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * getCone(action) {\r\n    try {\r\n        \r\n   console.log('action :', action);\r\n      /*  const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        \r\n        yield put({\r\n            type: graphicTypes.SET_NEW_CONE_RG,\r\n            payload: {\r\n            }\r\n        });\r\n*/\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/getNewCone, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}