{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga } from '../../utils/JSAPI'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, geoms, localExtent, features;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('action :', action);\n          _context.next = 4;\n          return call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 4:\n          projectResult = _context.sent;\n          geoms = projectResult;\n          console.log('view spatRef in saga', action.payload.view_spatRef); // make extent to query for neighboring supports\n\n          console.log(' for localExtent action.payload.coords[0] :', action.payload.coords[0]);\n          _context.next = 10;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\n          ]);\n\n        case 10:\n          localExtent = _context.sent;\n          console.log('localExtent :', localExtent); //get neighboring points from the selected support\n\n          _context.next = 14;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 14:\n          features = _context.sent;\n          console.log('features in saga', features);\n          _context.next = 18;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\n            payload: {\n              leftVisible: true,\n              ssEdit: false,\n              ssView: true,\n              ssInputGeom: geoms\n            }\n          });\n\n        case 18:\n          _context.next = 23;\n          break;\n\n        case 20:\n          _context.prev = 20;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 20]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","action","console","log","payload","coords","layers","geometryService","inSR","outSR","projectResult","geoms","view_spatRef","viewWidth","viewExtentWidth","localExtent","supports","features","type","SHOW_STREETSMART_VIEWER","leftVisible","ssEdit","ssView","ssInputGeom","START_STREETSMART_VIEWER"],"mappings":";;;;yBAQWA,e;;;yBAiDOC,gB;;AAzDlB,SAAQC,IAAR,EAAcC,GAAd,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAwBC,kBAAxB,EAA2CC,iBAA3C,QAAmE,mBAAnE,C,CAIA;;AAEA,SAAWT,eAAX,CAA2BU,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGGC,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;AAHH;AAI+B,iBAAMR,IAAI,CAACK,eAAD,EAAkB,CAACG,MAAM,CAACG,OAAP,CAAeC,MAAhB,EACnDJ,MAAM,CAACG,OAAP,CAAeE,MAAf,CAAsBC,eAD6B,EACZN,MAAM,CAACG,OAAP,CAAeI,IADH,EACSP,MAAM,CAACG,OAAP,CAAeK,KADxB,CAAlB,CAAV;;AAJ/B;AAIaC,UAAAA,aAJb;AAOaC,UAAAA,KAPb,GAOqBD,aAPrB;AASAR,UAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb,EAAqCF,MAAM,CAACG,OAAP,CAAeQ,YAApD,EATA,CAUO;;AACPV,UAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DF,MAAM,CAACG,OAAP,CAAeC,MAAf,CAAsB,CAAtB,CAA3D;AAXA;AAYoB,iBAAMZ,IAAI,CAACO,iBAAD,EAAmB,CAAEC,MAAM,CAACG,OAAP,CAAeS,SAAjB,EACjDZ,MAAM,CAACG,OAAP,CAAeU,eADkC,EAEjDb,MAAM,CAACG,OAAP,CAAeQ,YAFkC,EAGjDX,MAAM,CAACG,OAAP,CAAeC,MAAf,CAAsB,CAAtB,CAHiD,EAIjD,GAJiD,CAI5C;AAJ4C,WAAnB,CAAV;;AAZpB;AAYMU,UAAAA,WAZN;AAoBAb,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,WAA7B,EApBA,CAsBO;;AAtBP;AAuBsB,iBAAMtB,IAAI,CAACM,kBAAD,EAAqB,CAACgB,WAAD,EAAcd,MAAM,CAACG,OAAP,CAAeE,MAAf,CAAsBU,QAApC,EAA6C,IAA7C,CAArB,CAAV;;AAvBtB;AAuBWC,UAAAA,QAvBX;AAyBMf,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCc,QAAhC;AAzBN;AA8BO,iBAAMvB,GAAG,CAAC;AACTwB,YAAAA,IAAI,EAAErB,YAAY,CAACsB,uBADV;AAETf,YAAAA,OAAO,EAAE;AACLgB,cAAAA,WAAW,EAAE,IADR;AAELC,cAAAA,MAAM,EAAE,KAFH;AAGLC,cAAAA,MAAM,EAAE,IAHH;AAILC,cAAAA,WAAW,EAACZ;AAJP;AAFA,WAAD,CAAT;;AA9BP;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4CQT,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AA5CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgDA;;;AACA,OAAO,SAAWX,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAAC2B,wBAAd,EAAwCjC,eAAxC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put,takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry,getSupportByExtent,pointToExtentSaga} from '../../utils/JSAPI'\r\n\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try{\r\n     \r\n   console.log('action :', action);\r\n       const projectResult =   yield call(projectGeometry, [action.payload.coords,\r\n        action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\r\n       \r\n       const geoms = projectResult;\r\n      \r\nconsole.log(\t'view spatRef in saga', action.payload.view_spatRef)\r\n       // make extent to query for neighboring supports\r\nconsole.log(' for localExtent action.payload.coords[0] :', action.payload.coords[0]);\r\nconst localExtent = yield call(pointToExtentSaga,[ action.payload.viewWidth,\r\naction.payload.viewExtentWidth,\r\naction.payload.view_spatRef,\r\naction.payload.coords[0],\r\n400  //tolerance in pixels\r\n\r\n\r\n])\r\nconsole.log('localExtent :', localExtent);\r\n\r\n       //get neighboring points from the selected support\r\n     const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports,2248]);\r\n\r\n      console.log('features in saga', features)\r\n\r\n\r\n\r\n\r\n       yield put({\r\n        type: graphicTypes.SHOW_STREETSMART_VIEWER,\r\n        payload: {\r\n            leftVisible: true,\r\n            ssEdit: false,\r\n            ssView: true,\r\n            ssInputGeom:geoms\r\n        }\r\n    });\r\n\r\n        \r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n   \r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}