{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(muttGenerator);\n\nimport { loadModules } from 'esri-loader';\nimport { call } from 'redux-saga/effects';\n\nvar err = function err(e) {\n  console.log('an error occurred in JSAPI  ' + e.message);\n}; //currently not being used, needs a slight rewrite\n\n\nexport function getSupportById(args) {\n  var id = args[0];\n  var layer = args[1]; //needs a Promis here\n\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        Query = _ref2[0];\n\n    var query = new Query();\n    query.where = \"OBJECTID = \" + id;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    layer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        return results.features[0];\n      } else {\n        alert('support was not retrieved');\n      }\n    }, err);\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n}\nexport function getSupportByExtent(args) {\n  return new Promise(function (resolve, reject) {\n    var extent = args[0];\n    var supportLayer = args[1];\n    var outSR = args[2];\n    loadModules([\"esri/request\"]).then(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          esriRequest = _ref4[0];\n\n      esriRequest(supportLayer + '/query', {\n        query: {\n          geometry: JSON.stringify(extent),\n          returnGeometry: true,\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\",\n          // format\n          outSR: outSR\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n      /*     let query = new Query();\r\n      query.geometry = extent;\r\n      query.outFields = [\"*\"];\r\n      query.returnGeometry = true;\r\n        supportLayer\r\n          .queryFeatures(query)\r\n          .then(resp => resolve(resp), error => reject(error)); */\n    });\n  });\n}\nexport function getRelatedSigns(args) {\n  return new Promise(function (resolve, reject) {\n    var feature = args[0];\n    var layer = args[1];\n    loadModules([\"esri/request\"]).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          esriRequest = _ref6[0];\n\n      esriRequest(layer + \"/query\", {\n        query: {\n          where: \"SUPPORTID='\" + feature.attributes.GLOBALID + \"'\",\n          orderByFields: \"SIGNORDER\",\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\" // format\n\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function getRelatedTimebands(args) {\n  var layer = args[1];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          esriRequest = _ref8[0];\n\n      esriRequest(layer + '/query', {\n        query: {\n          where: \"SIGNID='\" + args[0].attributes.GLOBALID + \"'\",\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\" // format\n\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSignOrder(args) {\n  var features = args[0];\n  var layer = args[1];\n  var pureFeatures = [];\n\n  for (var i = 0; i < features.length; i++) {\n    pureFeatures.push(features[i].feature);\n  }\n\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          esriRequest = _ref10[0];\n\n      esriRequest(layer + '/applyEdits', {\n        method: 'post',\n        query: {\n          f: \"json\",\n          // format\n          \"updates\": JSON.stringify(pureFeatures)\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSupport(args\n/*updateFeature, isNew, layer */\n) {\n  var updateFeature = args[0];\n  var isNew = args[1];\n  var layer = args[2];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 1),\n          esriRequest = _ref12[0];\n\n      var set = null;\n\n      if (isNew) {\n        set = {\n          f: \"json\",\n          \"adds\": JSON.stringify([updateFeature])\n        };\n      } else {\n        set = {\n          f: \"json\",\n          \"updates\": JSON.stringify([updateFeature])\n        };\n      }\n\n      esriRequest(layer + '/applyEdits', {\n        method: 'post',\n        query: set\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveTimebands(args) {\n  var updateTimebands = args[0].editBands; //array\n\n  var newTimebands = args[0].newBands; //array\n\n  var deleteTimebands = args[0].deleteBands;\n  var timebandLayer = args[1].timebands + \"/applyEdits\";\n  var bandSet = {\n    f: \"json\",\n    \"adds\": JSON.stringify(newTimebands),\n    \"updates\": JSON.stringify(updateTimebands),\n    \"deletes\": JSON.stringify(deleteTimebands)\n  };\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 1),\n          esriRequest = _ref14[0];\n\n      esriRequest(timebandLayer, {\n        method: 'post',\n        query: bandSet\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSign(args) {\n  var updateSignFeature = args[0].sign;\n  var isNew = args[1];\n  var signLayer = args[2].signs + \"/applyEdits\";\n  var signSet = null;\n\n  if (isNew) {\n    signSet = {\n      f: \"json\",\n      \"adds\": JSON.stringify([updateSignFeature])\n    };\n  } else {\n    signSet = {\n      f: \"json\",\n      \"updates\": JSON.stringify([updateSignFeature])\n    };\n  }\n\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref15) {\n      var _ref16 = _slicedToArray(_ref15, 1),\n          esriRequest = _ref16[0];\n\n      esriRequest(signLayer, {\n        method: 'post',\n        query: signSet\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    }); // end of then for loadModules\n  }); //end of promise\n} // end of function\n\nexport function superQuery(args) {\n  var where = args[0];\n  var geom = args[1];\n  var layer = args[2];\n  return new Promise(function (resolve, reject) {\n    var extent = args[0];\n    var supportLayer = args[1];\n    loadModules([\"esri/request\"]).then(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 1),\n          esriRequest = _ref18[0];\n\n      esriRequest(layer + '/query', {\n        query: {\n          geometry: JSON.stringify(geom),\n          where: where,\n          returnGeometry: true,\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\",\n          // format\n          outSR: 4326\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function projectGeometry(args) {\n  var coords = args[0]; //array\n\n  var layer = args[1];\n  var inSR = args[2];\n  var outSR = args[3];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/tasks/GeometryService\", \"esri/tasks/support/ProjectParameters\", \"esri/geometry/Point\", \"esri/geometry/SpatialReference\"]).then(function (_ref19) {\n      var _ref20 = _slicedToArray(_ref19, 4),\n          GeometryService = _ref20[0],\n          ProjectParameters = _ref20[1],\n          Point = _ref20[2],\n          SpatialReference = _ref20[3];\n\n      var outS = new SpatialReference(outSR);\n      var gS = new GeometryService({\n        url: layer\n      });\n      var inSpatRef = new SpatialReference(inSR);\n      var geoms = [];\n\n      for (var i = 0; i < coords.length; i++) {\n        var pt = new Point({\n          latitude: coords[i].y,\n          longitude: coords[i].x,\n          spatialReference: inSpatRef\n        });\n        geoms.push(pt);\n      }\n\n      var params = new ProjectParameters({\n        geometries: geoms,\n        outSpatialReference: outS\n      });\n      gS.project(params).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function pointToExtentSaga(args) {\n  var view_width = args[0];\n  var view_extent_width = args[1];\n  var view_spatialReference = args[2];\n  var point = args[3];\n  var toleranceInPixel = args[4];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/geometry/Extent\", \"esri/geometry/support/webMercatorUtils\"]).then(function (_ref21) {\n      var _ref22 = _slicedToArray(_ref21, 2),\n          Extent = _ref22[0],\n          webMercatorUtils = _ref22[1];\n\n      try {\n        //calculate map coords represented per pixel\n        var pixelWidth = view_extent_width / view_width; //calculate map coords for tolerance in pixel\n\n        var toleraceInMapCoords = toleranceInPixel * pixelWidth;\n        var ext = new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view_spatialReference);\n        resolve(ext);\n      } catch (error) {\n        reject(err);\n      }\n    });\n  });\n}\nexport function pointToExtent(view_width, view_extent_width, view_spatialReference, point, toleranceInPixel, callback) {\n  loadModules([\"esri/geometry/Extent\"]).then(function (_ref23) {\n    var _ref24 = _slicedToArray(_ref23, 1),\n        Extent = _ref24[0];\n\n    //calculate map coords represented per pixel\n    var pixelWidth = view_extent_width / view_width; //calculate map coords for tolerance in pixel\n\n    var toleraceInMapCoords = toleranceInPixel * pixelWidth; //calculate & return computed extent\n\n    callback(new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view_spatialReference));\n  });\n} //NON-ESRI DATA CALLS\n\nexport function muttGenerator(muttQueryString) {\n  return _regeneratorRuntime.wrap(function muttGenerator$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\nexport function getMUTCDS(_x) {\n  return _getMUTCDS.apply(this, arguments);\n}\n\nfunction _getMUTCDS() {\n  _getMUTCDS = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(args) {\n    var baseUrl, response, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd?code=\" + args[0];\n            _context2.prev = 1;\n            _context2.next = 4;\n            return fetch(baseUrl);\n\n          case 4:\n            response = _context2.sent;\n\n            if (!response.ok) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 8;\n            return response.json();\n\n          case 8:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results);\n\n          case 10:\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error('Something went wrong');\n            throw new Error('Bad stuff happened.');\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee, this, [[1, 12]]);\n  }));\n  return _getMUTCDS.apply(this, arguments);\n}\n\nexport function getAllMUTCDS() {\n  return _getAllMUTCDS.apply(this, arguments);\n}\n\nfunction _getAllMUTCDS() {\n  _getAllMUTCDS = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var baseUrl, response, results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd\";\n            _context3.prev = 1;\n            _context3.next = 4;\n            return fetch(baseUrl);\n\n          case 4:\n            response = _context3.sent;\n\n            if (!response.ok) {\n              _context3.next = 10;\n              break;\n            }\n\n            _context3.next = 8;\n            return response.json();\n\n          case 8:\n            results = _context3.sent;\n            return _context3.abrupt(\"return\", results);\n\n          case 10:\n            _context3.next = 16;\n            break;\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.error('Something went wrong');\n            throw new Error('Bad stuff happened.');\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, this, [[1, 12]]);\n  }));\n  return _getAllMUTCDS.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\JSAPI.js"],"names":["muttGenerator","loadModules","call","err","e","console","log","message","getSupportById","args","id","layer","then","Query","query","where","outFields","returnGeometry","queryFeatures","results","features","length","alert","catch","error","getSupportByExtent","Promise","resolve","reject","extent","supportLayer","outSR","esriRequest","geometry","JSON","stringify","token","f","resp","getRelatedSigns","feature","attributes","GLOBALID","orderByFields","getRelatedTimebands","saveSignOrder","pureFeatures","i","push","method","saveSupport","updateFeature","isNew","set","saveTimebands","updateTimebands","editBands","newTimebands","newBands","deleteTimebands","deleteBands","timebandLayer","timebands","bandSet","saveSign","updateSignFeature","sign","signLayer","signs","signSet","superQuery","geom","projectGeometry","coords","inSR","GeometryService","ProjectParameters","Point","SpatialReference","outS","gS","url","inSpatRef","geoms","pt","latitude","y","longitude","x","spatialReference","params","geometries","outSpatialReference","project","pointToExtentSaga","view_width","view_extent_width","view_spatialReference","point","toleranceInPixel","Extent","webMercatorUtils","pixelWidth","toleraceInMapCoords","ext","pointToExtent","callback","muttQueryString","getMUTCDS","baseUrl","fetch","response","ok","json","Error","getAllMUTCDS"],"mappings":"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","sourcesContent":["import {loadModules} from 'esri-loader';\r\nimport {call} from 'redux-saga/effects';\r\n\r\nconst err = (e) => {\r\n    console.log('an error occurred in JSAPI  ' + e.message)\r\n}\r\n\r\n//currently not being used, needs a slight rewrite\r\nexport function getSupportById(args) {\r\n    const id = args[0];\r\n    const layer = args[1];\r\n    //needs a Promis here\r\n\r\n    loadModules([\"esri/tasks/support/Query\"]).then(([Query]) => {\r\n        let query = new Query();\r\n        query.where = \"OBJECTID = \" + id;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n\r\n        layer\r\n            .queryFeatures(query)\r\n            .then(function (results) {\r\n\r\n                if (results.features.length > 0) {\r\n\r\n                    return results.features[0];\r\n                } else {\r\n                    alert('support was not retrieved')\r\n                }\r\n            }, err);\r\n\r\n    }).catch(err => {\r\n        // handle any errors\r\n        console.error(err);\r\n    });\r\n}\r\n\r\nexport function getSupportByExtent(args) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const extent = args[0];\r\n\r\n        const supportLayer = args[1];\r\n\r\n        const outSR = args[2];\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(supportLayer + '/query', {\r\n                query: {\r\n                    geometry: JSON.stringify(extent),\r\n                    returnGeometry: true,\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\", // format\r\n                    outSR: outSR\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n\r\n            /*     let query = new Query();\r\n            query.geometry = extent;\r\n            query.outFields = [\"*\"];\r\n            query.returnGeometry = true;\r\n\r\n            supportLayer\r\n                .queryFeatures(query)\r\n                .then(resp => resolve(resp), error => reject(error)); */\r\n        });\r\n\r\n    })\r\n}\r\n\r\nexport function getRelatedSigns(args) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const feature = args[0]\r\n\r\n        const layer = args[1]\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + \"/query\", {\r\n                query: {\r\n                    where: \"SUPPORTID='\" + feature.attributes.GLOBALID + \"'\",\r\n                    orderByFields: \"SIGNORDER\",\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\" // format\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n\r\n        });\r\n    })\r\n}\r\n\r\nexport function getRelatedTimebands(args) {\r\n    const layer = args[1]\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + '/query', {\r\n                query: {\r\n                    where: \"SIGNID='\" + args[0].attributes.GLOBALID + \"'\",\r\n\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\" // format\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function saveSignOrder(args) {\r\n    const features = args[0];\r\n    const layer = args[1];\r\n    let pureFeatures = [];\r\n    for (let i = 0; i < features.length; i++) {\r\n        pureFeatures.push(features[i].feature)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + '/applyEdits', {\r\n                method: 'post',\r\n                query: {\r\n                    f: \"json\", // format\r\n                    \"updates\": JSON.stringify(pureFeatures)\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function saveSupport(args/*updateFeature, isNew, layer */) {\r\n    const updateFeature = args[0];\r\n\r\n    const isNew = args[1];\r\n    const layer = args[2];\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            let set = null;\r\n            if (isNew) {\r\n                set = {\r\n                    f: \"json\",\r\n                    \"adds\": JSON.stringify([updateFeature])\r\n                };\r\n            } else {\r\n                set = {\r\n                    f: \"json\",\r\n                    \"updates\": JSON.stringify([updateFeature])\r\n                }\r\n            }\r\n\r\n            esriRequest(layer + '/applyEdits', {\r\n                method: 'post',\r\n                query: set\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function saveTimebands(args) {\r\n    const updateTimebands = args[0].editBands; //array\r\n    const newTimebands = args[0].newBands; //array\r\n    const deleteTimebands = args[0].deleteBands;\r\n    const timebandLayer = args[1].timebands + \"/applyEdits\";\r\n\r\n    const bandSet = {\r\n        f: \"json\",\r\n        \"adds\": JSON.stringify(newTimebands),\r\n        \"updates\": JSON.stringify(updateTimebands),\r\n        \"deletes\": JSON.stringify(deleteTimebands)\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(timebandLayer, {\r\n                method: 'post',\r\n                query: bandSet\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n        })\r\n    })\r\n}\r\n\r\nexport function saveSign(args) {\r\n\r\n    const updateSignFeature = args[0].sign;\r\n\r\n    const isNew = args[1];\r\n    const signLayer = args[2].signs + \"/applyEdits\";\r\n\r\n    let signSet = null;\r\n\r\n    if (isNew) {\r\n\r\n        signSet = {\r\n            f: \"json\",\r\n            \"adds\": JSON.stringify([updateSignFeature])\r\n        };\r\n    } else {\r\n        signSet = {\r\n            f: \"json\",\r\n            \"updates\": JSON.stringify([updateSignFeature])\r\n        };\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(signLayer, {\r\n                method: 'post',\r\n                query: signSet\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n\r\n        }) // end of then for loadModules\r\n    }) //end of promise\r\n\r\n} // end of function\r\n\r\nexport function superQuery(args) {\r\n    const where = args[0];\r\n    const geom = args[1];\r\n    const layer = args[2];\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const extent = args[0];\r\n\r\n        const supportLayer = args[1];\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + '/query', {\r\n                query: {\r\n                    geometry: JSON.stringify(geom),\r\n                    where: where,\r\n                    returnGeometry: true,\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\", // format\r\n                    outSR: 4326\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n\r\n        });\r\n\r\n    })\r\n}\r\n\r\nexport function projectGeometry(args) {\r\n    const coords = args[0]; //array\r\n\r\n    const layer = args[1];\r\n    const inSR = args[2];\r\n    const outSR = args[3]\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/tasks/GeometryService\", \"esri/tasks/support/ProjectParameters\", \"esri/geometry/Point\", \"esri/geometry/SpatialReference\"]).then(([GeometryService, ProjectParameters, Point, SpatialReference]) => {\r\n            const outS = new SpatialReference(outSR);\r\n\r\n            const gS = new GeometryService({url: layer});\r\n            const inSpatRef = new SpatialReference(inSR);\r\n\r\n            let geoms = [];\r\n\r\n            for (let i = 0; i < coords.length; i++) {\r\n                const pt = new Point({latitude: coords[i].y, longitude: coords[i].x, spatialReference: inSpatRef})\r\n\r\n                geoms.push(pt)\r\n            }\r\n\r\n            const params = new ProjectParameters({geometries: geoms, outSpatialReference: outS})\r\n         \r\n            gS\r\n                .project(params)\r\n                .then(resp => resolve(resp), error => reject(error))\r\n\r\n        })\r\n    })\r\n}\r\n\r\nexport function pointToExtentSaga(args) {\r\n    const view_width = args[0];\r\n    const view_extent_width = args[1];\r\n    const view_spatialReference = args[2];\r\n    const point = args[3];\r\n    const toleranceInPixel = args[4];\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/geometry/Extent\",\"esri/geometry/support/webMercatorUtils\"]).then(([Extent, webMercatorUtils]) => {\r\n\r\n            try {\r\n\r\n              \r\n                //calculate map coords represented per pixel\r\n                let pixelWidth = view_extent_width / view_width;\r\n\r\n                //calculate map coords for tolerance in pixel\r\n                let toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n                const ext = new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view_spatialReference);\r\n                resolve(ext)\r\n            } catch (error) {\r\n                reject(err)\r\n            }\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function pointToExtent(view_width, view_extent_width, view_spatialReference, point, toleranceInPixel, callback) {\r\n\r\n    loadModules([\"esri/geometry/Extent\"]).then(([Extent]) => {\r\n\r\n        //calculate map coords represented per pixel\r\n        let pixelWidth = view_extent_width / view_width;\r\n\r\n        //calculate map coords for tolerance in pixel\r\n        let toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n        //calculate & return computed extent\r\n\r\n        callback(new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view_spatialReference))\r\n\r\n    })\r\n\r\n}\r\n\r\n//NON-ESRI DATA CALLS\r\n\r\nexport function * muttGenerator(muttQueryString) {\r\n    yield call(getMUTCDS, [muttQueryString])\r\n}\r\n\r\nexport async function getMUTCDS(args) {\r\n    const baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd?code=\" + args[0];\r\n\r\n    try {\r\n        const response = await fetch(baseUrl);\r\n        if (response.ok) {\r\n            const results = await response.json();\r\n            return results;\r\n        }\r\n    } catch (err) {\r\n        console.error('Something went wrong');\r\n        throw new Error('Bad stuff happened.');\r\n    }\r\n}\r\n\r\nexport async function getAllMUTCDS() {\r\n    const baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd\"\r\n\r\n    try {\r\n        const response = await fetch(baseUrl);\r\n        if (response.ok) {\r\n            const results = await response.json();\r\n            return results;\r\n        }\r\n    } catch (err) {\r\n        console.error('Something went wrong');\r\n        throw new Error('Bad stuff happened.');\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}