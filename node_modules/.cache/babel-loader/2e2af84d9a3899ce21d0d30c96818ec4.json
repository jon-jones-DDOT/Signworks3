{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\App.js\";\n// Copyright 2019 Esri\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.​\n// React\nimport React, { Component } from 'react'; // Redux\n\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { actions as authActions } from '../redux/reducers/auth';\nimport { actions as configActions } from '../redux/reducers/config'; // Components\n\nimport AuthManager from './esri/auth/AuthManager';\nimport LoadScreen from './LoadScreen';\nimport Main from './Main';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(App).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // When the component mounts call to get the config file\n      this.props.fetchConfig();\n      console.log('app component did mount');\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log('app component did update'); // Check that the config was initially loaded and don't run this process again\n\n      if (this.props.config && this.props.config.loaded !== prevProps.config.loaded) {\n        // Attach the AuthManager to the window, it doesn't need to be rendered\n        window.authManager = new AuthManager(this.props.config.appId, this.props.config.portalUrl, this.props.config.jsapiUrl, this.props.config.jsapiV4, this.props.config.loginWithPopup);\n        window.authManager.startup().then(this.props.checkAuth);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // We'll use these to determine what state the app is in\n      var configLoaded = this.props.config.loaded;\n      var authTried = this.props.auth.loaded; // We don't need to authenticate if there is no portalUrl\n\n      var isAuthenticated = this.props.auth.user && this.props.auth.user.username || !this.props.config.portalUrl; // App is initializing\n\n      if (!authTried || !isAuthenticated || !configLoaded) {\n        return React.createElement(LoadScreen, {\n          isLoaded: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        });\n      } // App is initialized and user is authenticated if needed\n\n\n      return React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    auth: state.auth,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, configActions, authActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\App.js"],"names":["React","Component","bindActionCreators","connect","actions","authActions","configActions","AuthManager","LoadScreen","Main","App","props","fetchConfig","console","log","prevProps","config","loaded","window","authManager","appId","portalUrl","jsapiUrl","jsapiV4","loginWithPopup","startup","then","checkAuth","configLoaded","authTried","auth","isAuthenticated","user","username","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,wBAAvC;AACA,SAASD,OAAO,IAAIE,aAApB,QAAyC,0BAAzC,C,CAGA;;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;IAEMC,G;;;;;;;;;;;;;wCAEgB;AAClB;AACA,WAAKC,KAAL,CAAWC,WAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;;;uCAEkBC,S,EAAW;AAC5BF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAD4B,CAE5B;;AACA,UAAI,KAAKH,KAAL,CAAWK,MAAX,IACF,KAAKL,KAAL,CAAWK,MAAX,CAAkBC,MAAlB,KAA6BF,SAAS,CAACC,MAAV,CAAiBC,MADhD,EAEA;AACE;AACAC,QAAAA,MAAM,CAACC,WAAP,GAAqB,IAAIZ,WAAJ,CACnB,KAAKI,KAAL,CAAWK,MAAX,CAAkBI,KADC,EAEnB,KAAKT,KAAL,CAAWK,MAAX,CAAkBK,SAFC,EAGnB,KAAKV,KAAL,CAAWK,MAAX,CAAkBM,QAHC,EAInB,KAAKX,KAAL,CAAWK,MAAX,CAAkBO,OAJC,EAKnB,KAAKZ,KAAL,CAAWK,MAAX,CAAkBQ,cALC,CAArB;AAOAN,QAAAA,MAAM,CAACC,WAAP,CAAmBM,OAAnB,GAA6BC,IAA7B,CAAkC,KAAKf,KAAL,CAAWgB,SAA7C;AACD;AACF;;;6BAEQ;AACP;AACA,UAAMC,YAAY,GAAG,KAAKjB,KAAL,CAAWK,MAAX,CAAkBC,MAAvC;AACA,UAAMY,SAAS,GAAG,KAAKlB,KAAL,CAAWmB,IAAX,CAAgBb,MAAlC,CAHO,CAIP;;AACA,UAAMc,eAAe,GAAI,KAAKpB,KAAL,CAAWmB,IAAX,CAAgBE,IAAhB,IAAwB,KAAKrB,KAAL,CAAWmB,IAAX,CAAgBE,IAAhB,CAAqBC,QAA9C,IAA2D,CAAC,KAAKtB,KAAL,CAAWK,MAAX,CAAkBK,SAAtG,CALO,CAOP;;AACA,UAAI,CAACQ,SAAD,IAAc,CAACE,eAAf,IAAkC,CAACH,YAAvC,EAAqD;AACnD,eACI,oBAAC,UAAD;AAAY,UAAA,QAAQ,EAAE,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGD,OAZM,CAcP;;;AACA,aAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED;;;;EA3Ce3B,S;;AA8ClB,IAAMiC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCL,IAAAA,IAAI,EAAEK,KAAK,CAACL,IADoB;AAEhCd,IAAAA,MAAM,EAAEmB,KAAK,CAACnB;AAFkB,GAAL;AAAA,CAA7B;;AAKA,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAUC,QAAV,EAAoB;AAC7C,SAAOnC,kBAAkB,mBACpBI,aADoB,EAEpBD,WAFoB,GAGtBgC,QAHsB,CAAzB;AAID,CALD;;AAOA,eAAelC,OAAO,CAAC+B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C1B,GAA7C,CAAf","sourcesContent":["// Copyright 2019 Esri\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.​\r\n\r\n// React\r\nimport React, { Component } from 'react';\r\n\r\n// Redux\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { actions as authActions } from '../redux/reducers/auth';\r\nimport { actions as configActions } from '../redux/reducers/config';\r\n\r\n\r\n// Components\r\nimport AuthManager from './esri/auth/AuthManager';\r\nimport LoadScreen from './LoadScreen';\r\nimport Main from './Main';\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    // When the component mounts call to get the config file\r\n    this.props.fetchConfig();\r\n    console.log('app component did mount');\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    console.log('app component did update');\r\n    // Check that the config was initially loaded and don't run this process again\r\n    if (this.props.config &&\r\n      this.props.config.loaded !== prevProps.config.loaded)\r\n    {\r\n      // Attach the AuthManager to the window, it doesn't need to be rendered\r\n      window.authManager = new AuthManager(\r\n        this.props.config.appId,\r\n        this.props.config.portalUrl,\r\n        this.props.config.jsapiUrl,\r\n        this.props.config.jsapiV4,\r\n        this.props.config.loginWithPopup\r\n      );\r\n      window.authManager.startup().then(this.props.checkAuth);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // We'll use these to determine what state the app is in\r\n    const configLoaded = this.props.config.loaded;\r\n    const authTried = this.props.auth.loaded;\r\n    // We don't need to authenticate if there is no portalUrl\r\n    const isAuthenticated = (this.props.auth.user && this.props.auth.user.username) || !this.props.config.portalUrl;\r\n\r\n    // App is initializing\r\n    if (!authTried || !isAuthenticated || !configLoaded) {\r\n      return (\r\n          <LoadScreen isLoaded={false}/>\r\n      )\r\n    }\r\n\r\n    // App is initialized and user is authenticated if needed\r\n    return <Main />\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  config: state.config\r\n})\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n  return bindActionCreators({\r\n    ...configActions,\r\n    ...authActions\r\n  }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n"]},"metadata":{},"sourceType":"module"}