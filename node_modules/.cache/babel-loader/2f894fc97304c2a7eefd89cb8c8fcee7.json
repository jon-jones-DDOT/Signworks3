{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(query),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchQuery);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { superQuery, superExtent } from '../../utils/JSAPI'; // WORKER //\n\nfunction query(action) {\n  var queryResult, extent, features;\n  return _regeneratorRuntime.wrap(function query$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(superQuery, [action.payload.where, action.payload.extent, action.payload.layer]);\n\n        case 3:\n          queryResult = _context.sent;\n          console.log('extent should be null', action.payload.extent);\n          _context.next = 7;\n          return call(superExtent, [action.payload.where, action.payload.extent, action.payload.layer]);\n\n        case 7:\n          extent = _context.sent;\n          extent = extent.extent;\n          console.log('custom extent', extent);\n          features = queryResult.features;\n          _context.next = 13;\n          return put({\n            type: graphicTypes.SET_QUERY_RESULTS_RG,\n            payload: {\n              queryFeatures: features,\n              queryCount: features.length,\n              queryResultsExt: extent\n            }\n          });\n\n        case 13:\n          _context.next = 18;\n          break;\n\n        case 15:\n          _context.prev = 15;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/query, ', _context.t0);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 15]]);\n} // WATCHER //\n\n\nexport function watchQuery() {\n  return _regeneratorRuntime.wrap(function watchQuery$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.QUERY_SUPERQUERY_S, query);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_query.js"],"names":["query","watchQuery","call","put","takeLatest","types","graphicTypes","superQuery","superExtent","action","payload","where","extent","layer","queryResult","console","log","features","type","SET_QUERY_RESULTS_RG","queryFeatures","queryCount","length","queryResultsExt","QUERY_SUPERQUERY_S"],"mappings":";;;;yBASWA,K;;;yBAiCOC,U;;AA1ClB,SAAQC,IAAR,EAAcC,GAAd,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AAEA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,mBAAtC,C,CAIA;;AAEA,SAAWR,KAAX,CAAiBS,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG6B,iBAAMP,IAAI,CAACK,UAAD,EAAa,CAACE,MAAM,CAACC,OAAP,CAAeC,KAAhB,EAAuBF,MAAM,CAACC,OAAP,CAAeE,MAAtC,EAA6CH,MAAM,CAACC,OAAP,CAAeG,KAA5D,CAAb,CAAV;;AAH7B;AAGaC,UAAAA,WAHb;AAIOC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAsCP,MAAM,CAACC,OAAP,CAAeE,MAArD;AAJP;AAKoB,iBAAMV,IAAI,CAACM,WAAD,EAAc,CAACC,MAAM,CAACC,OAAP,CAAeC,KAAhB,EAAuBF,MAAM,CAACC,OAAP,CAAeE,MAAtC,EAA6CH,MAAM,CAACC,OAAP,CAAeG,KAA5D,CAAd,CAAV;;AALpB;AAKWD,UAAAA,MALX;AAMQA,UAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACDG,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,MAA7B;AACMK,UAAAA,QARb,GAQwBH,WAAW,CAACG,QARpC;AAAA;AAUO,iBAAMd,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAEZ,YAAY,CAACa,oBADV;AAETT,YAAAA,OAAO,EAAE;AACLU,cAAAA,aAAa,EAACH,QADT;AAELI,cAAAA,UAAU,EAAEJ,QAAQ,CAACK,MAFhB;AAGLC,cAAAA,eAAe,EAAEX;AAHZ;AAFA,WAAD,CAAT;;AAVP;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BQG,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AA5BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgCA;;;AACA,OAAO,SAAWf,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACkB,kBAAd,EAAkCxB,KAAlC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put,takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\n\r\nimport {superQuery, superExtent} from '../../utils/JSAPI'\r\n\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * query(action) {\r\n    try{\r\n\r\n       const queryResult =   yield call(superQuery, [action.payload.where, action.payload.extent,action.payload.layer]);\r\n       console.log('extent should be null',  action.payload.extent)\r\n       let extent = yield call(superExtent, [action.payload.where, action.payload.extent,action.payload.layer]);\r\n        extent = extent.extent;\r\n       console.log('custom extent', extent);\r\n       const features = queryResult.features;\r\n       \r\n       yield put({\r\n        type: graphicTypes.SET_QUERY_RESULTS_RG,\r\n        payload: {\r\n            queryFeatures:features,\r\n            queryCount: features.length,\r\n            queryResultsExt: extent\r\n        }\r\n    });\r\n\r\n   /* yield put({\r\n        type:graphicTypes. SET_QUERY_RESULTS_EXTENT_RG,\r\n        payload:{ queryResultsExt: extent}\r\n        \r\n        }); */\r\n    \r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: graphic/query, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchQuery() {\r\n   \r\n    yield takeLatest(graphicTypes.QUERY_SUPERQUERY_S, query);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}