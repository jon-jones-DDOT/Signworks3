{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.esriLoader = global.esriLoader || {});\n})(this, function (exports) {\n  'use strict';\n\n  function createStylesheetLink(url) {\n    var link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = url;\n    return link;\n  } // TODO: export this function?\n  // check if the css url has been injected or added manually\n\n\n  function getCss(url) {\n    return document.querySelector(\"link[href*=\\\"\" + url + \"\\\"]\");\n  } // lazy load the CSS needed for the ArcGIS API\n\n\n  function loadCss(url) {\n    var link = getCss(url);\n\n    if (!link) {\n      // create & load the css library\n      link = createStylesheetLink(url);\n      document.head.appendChild(link);\n    }\n\n    return link;\n  }\n  /*\n    Copyright 2017 Esri\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n      http://www.apache.org/licenses/LICENSE-2.0\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n  */\n\n\n  var isBrowser = typeof window !== 'undefined';\n  var DEFAULT_URL = 'https://js.arcgis.com/4.10/'; // this is the url that is currently being, or already has loaded\n\n  var _currentUrl;\n\n  function createScript(url) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n    script.setAttribute('data-esri-loader', 'loading');\n    return script;\n  } // add a one-time load handler to script\n  // and optionally add a one time error handler as well\n\n\n  function handleScriptLoad(script, callback, errback) {\n    var onScriptError;\n\n    if (errback) {\n      // set up an error handler as well\n      onScriptError = handleScriptError(script, errback);\n    }\n\n    var onScriptLoad = function onScriptLoad() {\n      // pass the script to the callback\n      callback(script); // remove this event listener\n\n      script.removeEventListener('load', onScriptLoad, false);\n\n      if (onScriptError) {\n        // remove the error listener as well\n        script.removeEventListener('error', onScriptError, false);\n      }\n    };\n\n    script.addEventListener('load', onScriptLoad, false);\n  } // add a one-time error handler to the script\n\n\n  function handleScriptError(script, callback) {\n    var onScriptError = function onScriptError(e) {\n      // reject the promise and remove this event listener\n      callback(e.error || new Error(\"There was an error attempting to load \" + script.src)); // remove this event listener\n\n      script.removeEventListener('error', onScriptError, false);\n    };\n\n    script.addEventListener('error', onScriptError, false);\n    return onScriptError;\n  } // allow consuming libraries to provide their own Promise implementations\n\n\n  var utils = {\n    Promise: isBrowser ? window['Promise'] : undefined\n  }; // get the script injected by this library\n\n  function getScript() {\n    return document.querySelector('script[data-esri-loader]');\n  } // has ArcGIS API been loaded on the page yet?\n\n\n  function isLoaded() {\n    var globalRequire = window['require']; // .on() ensures that it's Dojo's AMD loader\n\n    return globalRequire && globalRequire.on;\n  } // load the ArcGIS API on the page\n\n\n  function loadScript(options) {\n    if (options === void 0) {\n      options = {};\n    } // default options\n\n\n    if (!options.url) {\n      options.url = DEFAULT_URL;\n    }\n\n    return new utils.Promise(function (resolve, reject) {\n      var script = getScript();\n\n      if (script) {\n        // the API is already loaded or in the process of loading...\n        // NOTE: have to test against scr attribute value, not script.src\n        // b/c the latter will return the full url for relative paths\n        var src = script.getAttribute('src');\n\n        if (src !== options.url) {\n          // potentially trying to load a different version of the API\n          reject(new Error(\"The ArcGIS API for JavaScript is already loaded (\" + src + \").\"));\n        } else {\n          if (isLoaded()) {\n            // the script has already successfully loaded\n            resolve(script);\n          } else {\n            // wait for the script to load and then resolve\n            handleScriptLoad(script, resolve, reject);\n          }\n        }\n      } else {\n        if (isLoaded()) {\n          // the API has been loaded by some other means\n          // potentially trying to load a different version of the API\n          reject(new Error(\"The ArcGIS API for JavaScript is already loaded.\"));\n        } else {\n          // this is the first time attempting to load the API\n          if (options.css) {\n            // load the css before loading the script\n            loadCss(options.css);\n          }\n\n          if (options.dojoConfig) {\n            // set dojo configuration parameters before loading the script\n            window['dojoConfig'] = options.dojoConfig;\n          } // create a script object whose source points to the API\n\n\n          script = createScript(options.url);\n          _currentUrl = options.url; // once the script is loaded...\n\n          handleScriptLoad(script, function () {\n            // update the status of the script\n            script.setAttribute('data-esri-loader', 'loaded'); // return the script\n\n            resolve(script);\n          }, reject); // load the script\n\n          document.body.appendChild(script);\n        }\n      }\n    });\n  } // wrap dojo's require() in a promise\n\n\n  function requireModules(modules) {\n    return new utils.Promise(function (resolve, reject) {\n      // If something goes wrong loading the esri/dojo scripts, reject with the error.\n      var errorHandler = window['require'].on('error', reject);\n      window['require'](modules, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        } // remove error handler\n\n\n        errorHandler.remove(); // Resolve with the parameters from dojo require as an array.\n\n        resolve(args);\n      });\n    });\n  } // returns a promise that resolves with an array of the required modules\n  // also will attempt to lazy load the ArcGIS API if it has not already been loaded\n\n\n  function loadModules(modules, loadScriptOptions) {\n    if (loadScriptOptions === void 0) {\n      loadScriptOptions = {};\n    }\n\n    if (!isLoaded()) {\n      // script is not yet loaded\n      if (!loadScriptOptions.url && _currentUrl) {\n        // alredy in the process of loading, so default to the same url\n        loadScriptOptions.url = _currentUrl;\n      } // attept to load the script then load the modules\n\n\n      return loadScript(loadScriptOptions).then(function () {\n        return requireModules(modules);\n      });\n    } else {\n      // script is already loaded, just load the modules\n      return requireModules(modules);\n    }\n  } // NOTE: rollup ignores the default export\n  // and builds the UMD namespace out of named exports\n  // so this is only needed so that consumers of the ESM build\n  // can do esriLoader.loadModules(), etc\n  // TODO: remove this next breaking change?\n\n\n  var esriLoader = {\n    getScript: getScript,\n    isLoaded: isLoaded,\n    loadModules: loadModules,\n    loadScript: loadScript,\n    loadCss: loadCss,\n    // TODO: export getCss too?\n    utils: utils\n  };\n  exports.utils = utils;\n  exports.getScript = getScript;\n  exports.isLoaded = isLoaded;\n  exports.loadScript = loadScript;\n  exports.loadModules = loadModules;\n  exports['default'] = esriLoader;\n  exports.loadCss = loadCss;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}