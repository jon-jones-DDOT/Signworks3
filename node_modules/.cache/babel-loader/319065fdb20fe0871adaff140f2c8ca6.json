{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent, getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var features, support, signs, _support, signsREsp, signArray, _signs, muttQueryString, i, muttData, _i, sign, results;\n\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\n\n        case 3:\n          features = _context.sent;\n\n          if (!(features.features.length === 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          support = null;\n          signs = [];\n          _context.next = 9;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 9:\n          _context.next = 40;\n          break;\n\n        case 11:\n          //create support payload from support returned\n          _support = features.features[0]; //retrieve associated sign features from AGS\n\n          _context.next = 14;\n          return call(getRelatedSigns, [_support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 14:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          _signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 23;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 23:\n          muttData = _context.sent;\n          console.log('muttdata before', muttData);\n          console.log('signArray before', signArray); //loop through globalIDS and get timebands\n\n          _i = 0;\n\n        case 27:\n          if (!(_i < signArray.length)) {\n            _context.next = 38;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i]\n          };\n          _context.next = 31;\n          return call(getRelatedTimebands, [signArray[_i]]);\n\n        case 31:\n          results = _context.sent;\n          sign.timebands = results.data.features; //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS\n\n          sign.MUTCD = muttData[_i];\n\n          _signs.push(sign);\n\n        case 35:\n          _i++;\n          _context.next = 27;\n          break;\n\n        case 38:\n          _context.next = 40;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: _support,\n              signs: _signs\n            }\n          });\n\n        case 40:\n          _context.next = 45;\n          break;\n\n        case 42:\n          _context.prev = 42;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 45:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 42]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSupport.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","getRelatedSigns","getMUTCDS","getRelatedTimebands","action","payload","geom","layer","features","length","support","signs","type","SET_SELECTED_SUPPORT","signsREsp","signArray","data","muttQueryString","i","attributes","SIGNCODE","replace","muttData","console","log","sign","feature","results","timebands","MUTCD","push","MAP_CLICKED"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent, getRelatedSigns,  getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            const support = features.features[0];\r\n          \r\n            //retrieve associated sign features from AGS\r\n            const signsREsp = yield call(getRelatedSigns, [\r\n                support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                        'er/1/query'\r\n            ])\r\n            const signArray = signsREsp.data.features;\r\n\r\n            // start creating sign payload\r\n            const signs = [];\r\n\r\n            // create a string to get back MUTCD metadata for all signs on post\r\n\r\n            let muttQueryString = \"\";\r\n           \r\n             if(signArray.length < 1){\r\n                 muttQueryString = \"PR-OTHER\"\r\n             }\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                if(signArray[i].attributes.SIGNCODE){\r\n                muttQueryString += signArray[i].attributes.SIGNCODE + \",\";}\r\n                else{\r\n                    muttQueryString += \"PR-OTHER,\"\r\n                }\r\n            }\r\n            muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n           \r\n            // call out to Sign Catalog API to get MUTCD metadata\r\n            const muttData = yield call(getMUTCDS, [muttQueryString])\r\n            console.log('muttdata before', muttData)\r\n            console.log('signArray before', signArray)\r\n            //loop through globalIDS and get timebands\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                let sign = {\r\n                    feature: signArray[i]\r\n                }\r\n                const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                sign.timebands = results.data.features;\r\n                //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS\r\n                sign.MUTCD = muttData[i];\r\n                signs.push(sign)\r\n              \r\n            }\r\n\r\n            // Put config in store\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        }\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}