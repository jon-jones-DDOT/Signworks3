{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent } from '../../utils/JSAPI';\nimport { getFullSignPost } from './reload'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var features, support, signs;\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layers.supports, 4326]);\n\n        case 3:\n          features = _context.sent;\n          console.log('support coming from click query', features); //if nothing comes back, set sign info in store to empty or null\n\n          if (!(features.data.features.length === 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          support = null;\n          signs = [];\n          return _context.abrupt(\"return\");\n\n        case 11:\n          //create support payload from support returned\n          action.payload.support = features.data.features[0];\n          _context.next = 14;\n          return getFullSignPost(action);\n\n        case 14:\n          _context.next = 19;\n          break;\n\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 16]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SELECT_SUPPORT_S, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSupport.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","getFullSignPost","action","payload","geom","layers","supports","features","console","log","data","length","support","signs","SELECT_SUPPORT_S"],"mappings":";;;;yBAOWA,gB;;;yBA0BOC,W;;AAjClB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,kBAAR,QAAiC,mBAAjC;AACA,SAAQC,eAAR,QAA8B,UAA9B,C,CAEA;;AAEA,SAAWR,gBAAX,CAA4BS,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKyB,iBAAMP,IAAI,CAACK,kBAAD,EAAqB,CAACE,MAAM,CAACC,OAAP,CAAeC,IAAhB,EAAsBF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBC,QAA5C,EAAqD,IAArD,CAArB,CAAV;;AALzB;AAKcC,UAAAA,QALd;AAMAC,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,QAA/C,EANA,CAOQ;;AAPR,gBAQYA,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBI,MAAvB,KAAkC,CAR9C;AAAA;AAAA;AAAA;;AASkBC,UAAAA,OATlB,GAS4B,IAT5B;AAUkBC,UAAAA,KAVlB,GAU0B,EAV1B;AAAA;;AAAA;AAeY;AACAX,UAAAA,MAAM,CAACC,OAAP,CAAeS,OAAf,GAAyBL,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuB,CAAvB,CAAzB;AAhBZ;AAiBY,iBAAMN,eAAe,CAACC,MAAD,CAArB;;AAjBZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBQM,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AArBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAyBA;;;AACA,OAAO,SAAWf,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,UAAU,CAACE,QAAQ,CAACe,gBAAV,EAA4BrB,gBAA5B,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent} from '../../utils/JSAPI';\r\nimport {getFullSignPost} from './reload'\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layers.supports,4326]);\r\nconsole.log('support coming from click query', features)\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.data.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n            return;\r\n        \r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            action.payload.support = features.data.features[0];\r\n            yield getFullSignPost(action)\r\n\r\n        }\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.SELECT_SUPPORT_S, setSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}