{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { loadModules } from 'esri-loader';\n\nvar err = function err(e) {\n  console.log('an error occurred in JSAPI  ' + e.message);\n};\n\nexport function getSupportById(args) {\n  var id = args[0];\n  var layer = args[1];\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        Query = _ref2[0];\n\n    var query = new Query();\n    query.where = \"OBJECTID = \" + id;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    layer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        return results.features[0];\n      } else {\n        alert('support was not retrieved');\n      }\n    }, err);\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n}\nexport function getSupportByExtent(args) {\n  var extent = args[0];\n  console.log('extent is JSAPI', extent);\n  var supportLayer = args[1]; // console.log(supportLayer);\n\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        Query = _ref4[0];\n\n    var query = new Query();\n    query.geometry = extent;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    supportLayer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        alert('alleged results');\n      }\n    }, err);\n  });\n}\nexport function pointToExtent(view, point, toleranceInPixel, callback) {\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/geometry/Extent\"]).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          Extent = _ref6[0];\n\n      //calculate map coords represented per pixel\n      var pixelWidth = view.extent.width / view.width; //calculate map coords for tolerance in pixel\n\n      var toleraceInMapCoords = toleranceInPixel * pixelWidth; //calculate & return computed extent\n\n      new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view.spatialReference);\n    });\n  });\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\JSAPI.js"],"names":["loadModules","err","e","console","log","message","getSupportById","args","id","layer","then","Query","query","where","outFields","returnGeometry","queryFeatures","results","features","length","alert","catch","error","getSupportByExtent","extent","supportLayer","geometry","pointToExtent","view","point","toleranceInPixel","callback","Promise","resolve","reject","Extent","pixelWidth","width","toleraceInMapCoords","x","y","spatialReference"],"mappings":";AAAA,SAAQA,WAAR,QAA0B,aAA1B;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,CAAD,EAAO;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCF,CAAC,CAACG,OAA/C;AACH,CAFD;;AAIA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,MAAMC,EAAE,GAAGD,IAAI,CAAC,CAAD,CAAf;AACA,MAAME,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;AAEAP,EAAAA,WAAW,CAAC,CAAC,0BAAD,CAAD,CAAX,CAA0CU,IAA1C,CAA+C,gBAAa;AAAA;AAAA,QAAXC,KAAW;;AACxD,QAAIC,KAAK,GAAG,IAAID,KAAJ,EAAZ;AACAC,IAAAA,KAAK,CAACC,KAAN,GAAc,gBAAgBL,EAA9B;AACAI,IAAAA,KAAK,CAACE,SAAN,GAAkB,CAAC,GAAD,CAAlB;AACAF,IAAAA,KAAK,CAACG,cAAN,GAAuB,IAAvB;AAEAN,IAAAA,KAAK,CACAO,aADL,CACmBJ,KADnB,EAEKF,IAFL,CAEU,UAAUO,OAAV,EAAmB;AAErB,UAAIA,OAAO,CAACC,QAAR,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAE7B,eAAOF,OAAO,CAACC,QAAR,CAAiB,CAAjB,CAAP;AACH,OAHD,MAGO;AACHE,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACH;AACJ,KAVL,EAUOnB,GAVP;AAYH,GAlBD,EAkBGoB,KAlBH,CAkBS,UAAApB,GAAG,EAAI;AACZ;AACAE,IAAAA,OAAO,CAACmB,KAAR,CAAcrB,GAAd;AACH,GArBD;AAsBH;AAED,OAAO,SAASsB,kBAAT,CAA4BhB,IAA5B,EAAkC;AACrC,MAAMiB,MAAM,GAAGjB,IAAI,CAAC,CAAD,CAAnB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BoB,MAA/B;AACA,MAAMC,YAAY,GAAGlB,IAAI,CAAC,CAAD,CAAzB,CAHqC,CAIrC;;AAEAP,EAAAA,WAAW,CAAC,CAAC,0BAAD,CAAD,CAAX,CAA0CU,IAA1C,CAA+C,iBAAa;AAAA;AAAA,QAAXC,KAAW;;AAExD,QAAIC,KAAK,GAAG,IAAID,KAAJ,EAAZ;AACAC,IAAAA,KAAK,CAACc,QAAN,GAAiBF,MAAjB;AACAZ,IAAAA,KAAK,CAACE,SAAN,GAAkB,CAAC,GAAD,CAAlB;AACAF,IAAAA,KAAK,CAACG,cAAN,GAAuB,IAAvB;AAEAU,IAAAA,YAAY,CACPT,aADL,CACmBJ,KADnB,EAEKF,IAFL,CAEU,UAAUO,OAAV,EAAmB;AACrB,UAAIA,OAAO,CAACC,QAAR,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC7BC,QAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;AACJ,KANL,EAMOnB,GANP;AAOH,GAdD;AAgBH;AAED,OAAO,SAAS0B,aAAT,CAAuBC,IAAvB,EAA6BC,KAA7B,EAAoCC,gBAApC,EAAsDC,QAAtD,EAAgE;AACnE,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpClC,IAAAA,WAAW,CAAC,CAAC,sBAAD,CAAD,CAAX,CAAsCU,IAAtC,CAA2C,iBAAc;AAAA;AAAA,UAAZyB,MAAY;;AAErD;AACA,UAAIC,UAAU,GAAGR,IAAI,CAACJ,MAAL,CAAYa,KAAZ,GAAoBT,IAAI,CAACS,KAA1C,CAHqD,CAKrD;;AACA,UAAIC,mBAAmB,GAAGR,gBAAgB,GAAGM,UAA7C,CANqD,CAOrD;;AAEF,UAAID,MAAJ,CAAWN,KAAK,CAACU,CAAN,GAAUD,mBAArB,EACET,KAAK,CAACW,CAAN,GAAUF,mBADZ,EAEET,KAAK,CAACU,CAAN,GAAUD,mBAFZ,EAGGT,KAAK,CAACW,CAAN,GAAUF,mBAHb,EAGkCV,IAAI,CAACa,gBAHvC;AAKD,KAdD;AAeH,GAhBM,CAAP;AAiBH","sourcesContent":["import {loadModules} from 'esri-loader';\r\n\r\nconst err = (e) => {\r\n    console.log('an error occurred in JSAPI  ' + e.message)\r\n}\r\n\r\nexport function getSupportById(args) {\r\n    const id = args[0];\r\n    const layer = args[1];\r\n\r\n    loadModules([\"esri/tasks/support/Query\"]).then(([Query]) => {\r\n        let query = new Query();\r\n        query.where = \"OBJECTID = \" + id;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n\r\n        layer\r\n            .queryFeatures(query)\r\n            .then(function (results) {\r\n\r\n                if (results.features.length > 0) {\r\n\r\n                    return results.features[0];\r\n                } else {\r\n                    alert('support was not retrieved')\r\n                }\r\n            }, err);\r\n\r\n    }).catch(err => {\r\n        // handle any errors\r\n        console.error(err);\r\n    });\r\n}\r\n\r\nexport function getSupportByExtent(args) {\r\n    const extent = args[0];\r\n    console.log('extent is JSAPI', extent)\r\n    const supportLayer = args[1];\r\n    // console.log(supportLayer);\r\n\r\n    loadModules([\"esri/tasks/support/Query\"]).then(([Query]) => {\r\n\r\n        let query = new Query();\r\n        query.geometry = extent;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n\r\n        supportLayer\r\n            .queryFeatures(query)\r\n            .then(function (results) {\r\n                if (results.features.length > 0) {\r\n                    alert('alleged results')\r\n                }\r\n            }, err);\r\n    });\r\n\r\n}\r\n\r\nexport function pointToExtent(view, point, toleranceInPixel, callback) {\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/geometry/Extent\"]).then(([Extent]) => {\r\n\r\n            //calculate map coords represented per pixel\r\n            let pixelWidth = view.extent.width / view.width;\r\n\r\n            //calculate map coords for tolerance in pixel\r\n            let toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n            //calculate & return computed extent\r\n\r\n          new Extent(point.x - toleraceInMapCoords, \r\n            point.y - toleraceInMapCoords, \r\n            point.x + toleraceInMapCoords,\r\n             point.y + toleraceInMapCoords, view.spatialReference)\r\n\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}