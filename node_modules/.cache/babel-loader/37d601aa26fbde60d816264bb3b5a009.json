{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { saveSupport, getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction saveSelectSupport(action) {\n  var bob;\n  return _regeneratorRuntime.wrap(function saveSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(saveSupport, [action.payload.support, false, action.payload.layers.supports]);\n\n        case 3:\n          bob = _context.sent;\n          console.log('bob', bob);\n          /*\r\n          const errorMUTCD = {\r\n              name: \"MUTCD not found\",\r\n              serverImagePath: \"none\"\r\n          }\r\n          // call API to fetch support\r\n          const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n            //if nothing comes back, set sign info in store to empty or null\r\n          if (features.features.length === 0) {\r\n              const support = null;\r\n              const signs = [];\r\n                yield put({\r\n                  type: mapTypes.SET_SELECTED_SUPPORT,\r\n                  payload: {\r\n                      support,\r\n                      signs\r\n                  }\r\n              });\r\n              //if a support is returned...\r\n          } else {\r\n              //create support payload from support returned\r\n              const support = features.features[0];\r\n                //retrieve associated sign features from AGS\r\n              const signsREsp = yield call(getRelatedSigns, [\r\n                  support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                          'er/1/query'\r\n              ])\r\n              const signArray = signsREsp.data.features;\r\n                // start creating sign payload\r\n              const signs = [];\r\n                // create a string to get back MUTCD metadata for all signs on post\r\n                let muttQueryString = \"\";\r\n                if (signArray.length < 1) {\r\n                  muttQueryString = \"PR-OTHER\"\r\n              }\r\n              for (let i = 0; i < signArray.length; i++) {\r\n                  if (signArray[i].attributes.SIGNCODE) {\r\n                      muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n                  } else {\r\n                      muttQueryString += \"PR-OTHER,\"\r\n                  }\r\n              }\r\n              muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n                // call out to Sign Catalog API to get MUTCD metadata\r\n              const muttData = yield call(getMUTCDS, [muttQueryString])\r\n                for (let i = 0; i < signArray.length; i++) {}\r\n                //loop through globalIDS and get timebands\r\n              for (let i = 0; i < signArray.length; i++) {\r\n                  let sign = {\r\n                      feature: signArray[i]\r\n                    }\r\n                  const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                  sign.timebands = results.data.features;\r\n                  for (let j = 0; j < muttData.length; j++) {\r\n                        if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                          sign.MUTCD = muttData[j];\r\n                        }\r\n                  }\r\n                  if (sign.MUTCD === undefined) {\r\n                      sign.MUTCD = errorMUTCD;\r\n                    }\r\n                  //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n                  signs.push(sign)\r\n                }\r\n                // Put config in store\r\n              yield put({\r\n                  type: mapTypes.SET_SELECTED_SUPPORT,\r\n                  payload: {\r\n                      support,\r\n                      signs\r\n                  }\r\n              });\r\n          }*/\n\n          _context.next = 10;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/saveSelectedSupport, ', _context.t0);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 7]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SAVE_SUPPORT, saveSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_saveSupport.js"],"names":["saveSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","saveSupport","getRelatedSigns","getMUTCDS","getRelatedTimebands","action","payload","support","layers","supports","bob","console","log","SAVE_SUPPORT"],"mappings":";;;;yBAMWA,iB;;;yBAqGOC,W;;AA3GlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,WAAR,EAAqBC,eAArB,EAAsCC,SAAtC,EAAiDC,mBAAjD,QAA2E,mBAA3E,C,CAEA;;AAEA,SAAWV,iBAAX,CAA6BW,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIoB,iBAAMT,IAAI,CAACK,WAAD,EAAc,CAACI,MAAM,CAACC,OAAP,CAAeC,OAAhB,EAAyB,KAAzB,EAAgCF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBC,QAAtD,CAAd,CAAV;;AAJpB;AAIcC,UAAAA,GAJd;AAKQC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AANR;AAAA;;AAAA;AAAA;AAAA;AAgGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AAhGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAoGA;;;AACA,OAAO,SAAWjB,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,QAAQ,CAACa,YAAV,EAAwBnB,iBAAxB,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {saveSupport, getRelatedSigns, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * saveSelectSupport(action) {\r\n\r\n    try {\r\n       \r\n        const bob = yield call(saveSupport, [action.payload.support, false, action.payload.layers.supports]);\r\n        console.log('bob', bob)\r\n        /*\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            const support = features.features[0];\r\n\r\n            //retrieve associated sign features from AGS\r\n            const signsREsp = yield call(getRelatedSigns, [\r\n                support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                        'er/1/query'\r\n            ])\r\n            const signArray = signsREsp.data.features;\r\n\r\n            // start creating sign payload\r\n            const signs = [];\r\n\r\n            // create a string to get back MUTCD metadata for all signs on post\r\n\r\n            let muttQueryString = \"\";\r\n\r\n            if (signArray.length < 1) {\r\n                muttQueryString = \"PR-OTHER\"\r\n            }\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                if (signArray[i].attributes.SIGNCODE) {\r\n                    muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n                } else {\r\n                    muttQueryString += \"PR-OTHER,\"\r\n                }\r\n            }\r\n            muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n            // call out to Sign Catalog API to get MUTCD metadata\r\n            const muttData = yield call(getMUTCDS, [muttQueryString])\r\n\r\n            for (let i = 0; i < signArray.length; i++) {}\r\n\r\n            //loop through globalIDS and get timebands\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                let sign = {\r\n                    feature: signArray[i]\r\n\r\n                }\r\n                const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                sign.timebands = results.data.features;\r\n                for (let j = 0; j < muttData.length; j++) {\r\n\r\n                    if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                        sign.MUTCD = muttData[j];\r\n\r\n                    }\r\n                }\r\n                if (sign.MUTCD === undefined) {\r\n                    sign.MUTCD = errorMUTCD;\r\n\r\n                }\r\n                //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n                signs.push(sign)\r\n\r\n            }\r\n\r\n            // Put config in store\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        }*/\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/saveSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n   \r\n    yield takeLatest(mapTypes.SAVE_SUPPORT, saveSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}