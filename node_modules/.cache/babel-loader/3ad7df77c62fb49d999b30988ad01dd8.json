{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _ButtonStyled = require(\"./Button-styled\");\n\nvar _ButtonGroup = require(\"./ButtonGroup\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar Button = function Button(_ref) {\n  var children = _ref.children,\n      href = _ref.href,\n      iconButton = _ref.iconButton,\n      icon = _ref.icon,\n      iconPosition = _ref.iconPosition,\n      other = _objectWithoutProperties(_ref, [\"children\", \"href\", \"iconButton\", \"icon\", \"iconPosition\"]);\n\n  function getIconMargin() {\n    if (iconButton) {\n      return;\n    } else {\n      return {\n        marginLeft: iconPosition === 'after' ? '0.75em' : '-0.25em',\n        marginRight: iconPosition === 'before' ? '0.75em' : '-0.25em'\n      };\n    }\n  }\n\n  var getIcon = function getIcon(icon) {\n    if (icon) {\n      return _react.default.cloneElement(icon, _objectSpread({}, icon.props, {\n        style: _objectSpread({\n          fill: 'currentColor',\n          verticalAlign: 'bottom'\n        }, getIconMargin(), icon.props.style)\n      }));\n    }\n  };\n\n  return _react.default.createElement(_ButtonGroup.ButtonGroupContext.Consumer, null, function (_ref2) {\n    var buttonGroupContext = _ref2.buttonGroupContext;\n    return _react.default.createElement(_ButtonStyled.StyledButton, _extends({\n      iconButton: iconButton,\n      grouped: buttonGroupContext.grouped,\n      isToggle: buttonGroupContext.isToggle,\n      as: href ? 'a' : 'button',\n      href: href\n    }, other), iconPosition === 'before' ? getIcon(icon) : null, children, iconPosition === 'after' ? getIcon(icon) : null);\n  });\n};\n\nButton.propTypes = {\n  /** The content of the component; text or icon. */\n  children: _propTypes.default.node,\n\n  /** The HTML type property of the Button. */\n  type: _propTypes.default.oneOf(['button', 'reset', 'submit']),\n\n  /** Style prop used to render a transparent Button. */\n  transparent: _propTypes.default.bool,\n\n  /** Style prop used to render a clear Button. */\n  clear: _propTypes.default.bool,\n\n  /** Style prop used to render a clear-gray Button. */\n  clearGray: _propTypes.default.bool,\n\n  /** Style prop used to render a clear-white Button. */\n  clearWhite: _propTypes.default.bool,\n\n  /** Style prop used to render a white Button. */\n  white: _propTypes.default.bool,\n\n  /** Style prop used to render an extra small Button. */\n  extraSmall: _propTypes.default.bool,\n\n  /** Style prop used to render a small Button. */\n  small: _propTypes.default.bool,\n\n  /** Style prop used to render a large Button. */\n  large: _propTypes.default.bool,\n\n  /** Style prop used to render an extra large Button. */\n  extraLarge: _propTypes.default.bool,\n\n  /** Style prop used to render a 100% width Button. */\n  fullWidth: _propTypes.default.bool,\n\n  /** Style prop used to render a 50% width Button. */\n  half: _propTypes.default.bool,\n\n  /** Style prop used to render a red Button. */\n  red: _propTypes.default.bool,\n\n  /** Style prop used to render a green Button. */\n  green: _propTypes.default.bool,\n\n  /** The HTML disabled property of the Button. */\n  disabled: _propTypes.default.bool,\n\n  /** The HTML href property of the Button. */\n  href: _propTypes.default.string,\n\n  /** The icon that will be displayed as the content of a Button. */\n  icon: _propTypes.default.node,\n\n  /** A style prop used to adjust size and padding of Buttons with only an icon as its content. */\n  iconButton: _propTypes.default.bool,\n\n  /** The position of the icon in relation to other children in a Button. */\n  iconPosition: _propTypes.default.oneOf(['after', 'before'])\n};\nButton.defaultProps = {\n  type: 'button',\n  iconPosition: 'after'\n};\nButton.displayName = 'Button';\nvar _default = Button;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}