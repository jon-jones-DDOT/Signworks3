{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n// Copyright 2019 Esri\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.â€‹\n// Esri Loader\nimport { loadModules } from 'esri-loader'; // Esri Helper Functions\n\nimport { bootstrapJSAPI } from '../../../utils/esriHelper';\n/**\r\n * Class to help with Authentication\r\n * This is a non-rendered class that is usually attached to the window\r\n * @type {Class}\r\n */\n\nvar AuthManager = function AuthManager(appId, _portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\n  var _this = this;\n\n  _classCallCheck(this, AuthManager);\n\n  this.startup = function () {\n    return new Promise(function (resolve, reject) {\n      bootstrapJSAPI(_this.portalUrl, _this.jsapiUrl, _this.jsapiV4).then(function (success) {\n        // Check if we need to authenticate\n        //    if (!this.portalUrl) {\n        //      return resolve();\n        //   }\n        // If we need authentication then set up IDManager\n        _this.createIDManager().then(resolve());\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.createIDManager = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/identity/IdentityManager', 'esri/identity/OAuthInfo']).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            esriId = _ref2[0],\n            OAuthInfo = _ref2[1];\n\n        _this.idManager = esriId;\n        console.log('this.idManager :', _this.idManager);\n        var esriAuthID = localStorage.getItem('esri_auth_id');\n\n        if (esriAuthID) {\n          // if auth was persisted, just use that\n          console.log('esriAuthID', esriAuthID);\n\n          _this.idManager.initialize(esriAuthID);\n        } else {\n          _this.idManager.useSignInPage = !_this.loginWithPopup;\n          _this.oAuthInfo = new OAuthInfo({\n            appId: _this.appId,\n            portalUrl: _this.portalUrl,\n            popup: _this.loginWithPopup\n          });\n\n          _this.idManager.registerOAuthInfos([_this.oAuthInfo]);\n        }\n\n        resolve();\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.login = function () {\n    var portalUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.portalUrl;\n    return;\n    return new Promise(function (resolve, reject) {\n      _this.checkLogin().then(function (success) {\n        _this.getUser().then(resolve, reject);\n      }, function (failed) {\n        var persistObj = _this.checkPersist();\n\n        if (!_this.idManager && persistObj && persistObj.portalUrl) {\n          // if there is persistent login info grab that portal url\n          _this.portalUrl = persistObj.portalUrl;\n        } else if (portalUrl) {\n          // if a portal url was passed in as a param grab that\n          _this.portalUrl = portalUrl;\n        } else {\n          // no portal, we don't need to login and can return\n          return resolve();\n        } // use the aquired portal url to setup a new ID Manager and login\n\n\n        _this.createIDManager().then(function () {\n          _this.doLogin().then(function (user) {\n            return resolve(user);\n          }, function (error) {\n            return reject(error);\n          });\n        });\n      });\n    });\n  };\n\n  this.checkLogin = function () {\n    return new Promise(function (resolve, reject) {\n      // Reject this if there is no portal URL in the config file\n      if (!_this.portalUrl) {\n        return reject();\n      }\n\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.checkSignInStatus(sharingUrl).then(function (credential) {\n        _this.persistAuth();\n\n        _this.getUser().then(resolve, reject);\n      }).otherwise(function (e) {\n        reject('User is not logged in');\n      });\n    });\n  };\n\n  this.doLogin = function () {\n    // we can store the portal url here so the browser rememebers us on refresh\n    _this.persistAuth();\n\n    return new Promise(function (resolve, reject) {\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.getCredential(sharingUrl, {\n        oAuthPopupConfirmation: false\n      }).then(function (credential) {\n        _this.getUser().then(resolve, reject);\n      }).otherwise(reject);\n    });\n  };\n\n  this.getUser = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/portal/Portal']).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            Portal = _ref4[0];\n\n        var portal = new Portal({\n          url: _this.portalUrl,\n          authMode: 'immediate'\n        });\n        portal.load().then(function () {\n          _this.user = portal.user;\n\n          _this.user.fetchGroups().then(resolve(_this.user)).otherwise(reject);\n        }).otherwise(reject);\n      });\n    });\n  };\n\n  this.persistAuth = function () {\n    // persist auth to a cookie for cross-page goodness\n    var json = _this.idManager.toJSON(); //  localStorage.setItem('esri_auth_id', JSON.stringify(json));\n\n  };\n\n  this.checkPersist = function () {\n    var persistObj = null; //let persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\n\n    if (persistObj && persistObj.oAuthInfos) {\n      return persistObj.oAuthInfos[0];\n    }\n\n    return null;\n  };\n\n  this.logout = function () {\n    loadModules(['dojo/cookie']).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          cookie = _ref6[0];\n\n      cookie('esri_auth', '{esri: \"logout\"}', {\n        expire: -1,\n        expires: -1,\n        path: '/'\n      });\n      localStorage.removeItem('esri_auth_id');\n\n      _this.idManager.destroyCredentials();\n    });\n  };\n\n  this.appId = appId;\n  this.portalUrl = _portalUrl;\n  this.jsapiUrl = jsapiUrl;\n  this.jsapiV4 = jsapiV4;\n  this.loginWithPopup = loginWithPopup;\n}\n/**\r\n * Use this to start up the JS API via the AuthManager class\r\n * @return {Promise} Resolves if there is no portal url, which means no login required\r\n *                   or there is a portal url and the IdentityManager is setup correctly\r\n */\n;\n\nexport { AuthManager as default };","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\esri\\auth\\AuthManager.js"],"names":["loadModules","bootstrapJSAPI","AuthManager","appId","portalUrl","jsapiUrl","jsapiV4","loginWithPopup","startup","Promise","resolve","reject","then","success","createIDManager","catch","err","esriId","OAuthInfo","idManager","console","log","esriAuthID","localStorage","getItem","initialize","useSignInPage","oAuthInfo","popup","registerOAuthInfos","login","checkLogin","getUser","failed","persistObj","checkPersist","doLogin","user","error","sharingUrl","checkSignInStatus","credential","persistAuth","otherwise","e","getCredential","oAuthPopupConfirmation","Portal","portal","url","authMode","load","fetchGroups","json","toJSON","oAuthInfos","logout","cookie","expire","expires","path","removeItem","destroyCredentials"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.â€‹\r\n\r\n// Esri Loader\r\nimport { loadModules } from 'esri-loader';\r\n// Esri Helper Functions\r\nimport { bootstrapJSAPI } from '../../../utils/esriHelper';\r\n\r\n/**\r\n * Class to help with Authentication\r\n * This is a non-rendered class that is usually attached to the window\r\n * @type {Class}\r\n */\r\nexport default class AuthManager {\r\n  constructor(appId, portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\r\n    this.appId = appId;\r\n    this.portalUrl = portalUrl;\r\n    this.jsapiUrl = jsapiUrl;\r\n    this.jsapiV4 = jsapiV4;\r\n    this.loginWithPopup = loginWithPopup;\r\n  }\r\n\r\n  /**\r\n   * Use this to start up the JS API via the AuthManager class\r\n   * @return {Promise} Resolves if there is no portal url, which means no login required\r\n   *                   or there is a portal url and the IdentityManager is setup correctly\r\n   */\r\n  startup = () => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n     \r\n      bootstrapJSAPI(this.portalUrl, this.jsapiUrl, this.jsapiV4)\r\n        .then(success => {\r\n          // Check if we need to authenticate\r\n      //    if (!this.portalUrl) {\r\n      //      return resolve();\r\n       //   }\r\n          // If we need authentication then set up IDManager\r\n         this.createIDManager().then(resolve());\r\n        })\r\n        .catch(err => {\r\n          reject();\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Method to create Esri JS API IdentityManager\r\n   * This is called in startup but can be called independently if needed\r\n   * @return {Promise} Resolves after IdentityManager is setup\r\n   */\r\n  createIDManager = () => {\r\n    return new Promise((resolve, reject) => {\r\n      loadModules([\r\n        'esri/identity/IdentityManager',\r\n        'esri/identity/OAuthInfo'\r\n      ]).then(([esriId, OAuthInfo]) => {\r\n        this.idManager = esriId;\r\nconsole.log('this.idManager :', this.idManager);\r\n        const esriAuthID = localStorage.getItem('esri_auth_id');\r\n        if (esriAuthID) {\r\n          // if auth was persisted, just use that\r\n          console.log('esriAuthID', esriAuthID)\r\n          this.idManager.initialize(esriAuthID);\r\n        } else {\r\n          this.idManager.useSignInPage = !this.loginWithPopup;\r\n          this.oAuthInfo = new OAuthInfo({\r\n            appId: this.appId,\r\n            portalUrl: this.portalUrl,\r\n            popup: this.loginWithPopup\r\n          });\r\n          this.idManager.registerOAuthInfos([this.oAuthInfo]);\r\n        }\r\n\r\n        resolve();\r\n      })\r\n      .catch(err => {\r\n        reject();\r\n      });\r\n    })\r\n  };\r\n\r\n  /**\r\n   * Main login function\r\n   * This will see if the user has persistent login info\r\n   * and if not it will run the login method\r\n   * @param  {string}   [portalUrl=this.portalUrl]   will default to config portalUrl\r\n   * @return {Promise}                               will resolve if user is logged in or\r\n   *                                                 conditions are met on portal url\r\n   */\r\n  login = (portalUrl = this.portalUrl) => {\r\n    return;\r\n    return new Promise((resolve, reject) => {\r\n      this.checkLogin().then(\r\n        success => {\r\n          this.getUser().then(resolve, reject);\r\n        },\r\n        failed => {\r\n          let persistObj = this.checkPersist();\r\n\r\n          if (!this.idManager && persistObj && persistObj.portalUrl) {\r\n            // if there is persistent login info grab that portal url\r\n            this.portalUrl = persistObj.portalUrl;\r\n          } else if (portalUrl) {\r\n            // if a portal url was passed in as a param grab that\r\n            this.portalUrl = portalUrl;\r\n          } else {\r\n            // no portal, we don't need to login and can return\r\n            return resolve();\r\n          }\r\n\r\n          // use the aquired portal url to setup a new ID Manager and login\r\n          this.createIDManager().then(() => {\r\n            this.doLogin().then(user => resolve(user), error => reject(error));\r\n          });\r\n        }\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Check if user is logged in already via persistent login info\r\n   * @return {Promise} will reject if no portal url or there is a login/user info error\r\n   */\r\n  checkLogin = () => {\r\n    return new Promise((resolve, reject) => {\r\n      // Reject this if there is no portal URL in the config file\r\n      if (!this.portalUrl) {\r\n        return reject();\r\n      }\r\n\r\n      const sharingUrl = this.portalUrl + '/sharing';\r\n\r\n      this.idManager\r\n        .checkSignInStatus(sharingUrl)\r\n        .then(credential => {\r\n          this.persistAuth();\r\n          this.getUser().then(resolve, reject);\r\n        })\r\n        .otherwise(e => {\r\n          reject('User is not logged in');\r\n        });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Method for login process\r\n   * @return {Promise} Resolves if we user info from login\r\n   */\r\n  doLogin = () => {\r\n    // we can store the portal url here so the browser rememebers us on refresh\r\n    this.persistAuth();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const sharingUrl = this.portalUrl + '/sharing';\r\n\r\n      this.idManager\r\n        .getCredential(sharingUrl, { oAuthPopupConfirmation: false })\r\n        .then(credential => {\r\n          this.getUser().then(resolve, reject);\r\n        })\r\n        .otherwise(reject);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Get user info, part of login process\r\n   * @return {Promise} Resolves once we get user info\r\n   */\r\n  getUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n      loadModules(['esri/portal/Portal']).then(([Portal]) => {\r\n        let portal = new Portal({\r\n          url: this.portalUrl,\r\n          authMode: 'immediate'\r\n        });\r\n        portal\r\n          .load()\r\n          .then(() => {\r\n            this.user = portal.user;\r\n            this.user\r\n              .fetchGroups()\r\n              .then(\r\n                resolve(this.user)\r\n              )\r\n              .otherwise(reject);\r\n          })\r\n          .otherwise(reject);\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Method to store the login info\r\n   */\r\n  persistAuth = () => {\r\n    // persist auth to a cookie for cross-page goodness\r\n    const json = this.idManager.toJSON();\r\n  //  localStorage.setItem('esri_auth_id', JSON.stringify(json));\r\n  };\r\n\r\n  /**\r\n   * Get method for the stored login info\r\n   * @return {Object} The login info object, can be null\r\n   */\r\n  checkPersist = () => {\r\n    const persistObj = null;\r\n    //let persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\r\n\r\n    if (persistObj && persistObj.oAuthInfos) {\r\n      return persistObj.oAuthInfos[0];\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Method for logging out\r\n   */\r\n  logout = () => {\r\n    loadModules(['dojo/cookie']).then(([cookie]) => {\r\n      cookie('esri_auth', '{esri: \"logout\"}', {\r\n        expire: -1,\r\n        expires: -1,\r\n        path: '/'\r\n      });\r\n      localStorage.removeItem('esri_auth_id');\r\n      this.idManager.destroyCredentials();\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}