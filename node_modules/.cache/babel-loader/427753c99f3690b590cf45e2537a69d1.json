{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\StreetSmart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { actions as graphicActions } from '../../redux/reducers/graphic';\nvar containerID = \"StreetSmart-container\";\n\nvar StreetSmart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreetSmart, _Component);\n\n  function StreetSmart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreetSmart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreetSmart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.startup = function (divId) {\n      console.log('ss prps :', _this.props);\n      window.StreetSmartApi.init({\n        username: \"signworks\",\n        password: \"SIGNWORKS\",\n        apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\n        targetElement: document.getElementById(containerID),\n        srs: \"EPSG:2248\",\n        locale: 'en-us',\n        configurationUrl: 'https://atlas.cyclomedia.com/configuration',\n        addressSettings: {\n          locale: \"en\",\n          database: \"Nokia\"\n        }\n      }).then(function () {\n        var viewerType = window.StreetSmartApi.ViewerType.PANORAMA;\n        window.StreetSmartApi.open(this.props.graphic.ssInputGeom[0].x + \",\" + this.props.graphic.ssInputGeom[0].y, {\n          viewerType: viewerType,\n          srs: 'EPSG:2248'\n        }).then(function (result) {\n          if (result) {\n            for (var i = 0; i < result.length; i++) {\n              if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\n                window.panoramaViewer = result[i];\n              } //\n              // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHAN\n              // GE, changeView);\n              // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD\n              // _END, loadViewEnd);\n\n              /*     for (o in options) {\r\n                  window.StreetSmartApi.addOverlay(options[o])\r\n              }\r\n              */\n\n            }\n          }\n        }.bind(this)).catch(function (reason) {\n          alert('Failed to create component(s) through API: ' + reason);\n        });\n      }, function (err) {\n        alert('Api Init Failed!' + err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StreetSmart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(containerID);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // Tell React to never update this component, that's up to us\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        ref: \"ssDiv\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreetSmart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\StreetSmart.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","graphicActions","containerID","StreetSmart","startup","divId","console","log","props","window","StreetSmartApi","init","username","password","apiKey","targetElement","document","getElementById","srs","locale","configurationUrl","addressSettings","database","then","viewerType","ViewerType","PANORAMA","open","graphic","ssInputGeom","x","y","result","i","length","getType","panoramaViewer","bind","catch","reason","alert","err","nextProps","nextState","mapStateToProps","state","map","config","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {actions as graphicActions} from '../../redux/reducers/graphic'\r\n\r\nconst containerID = \"StreetSmart-container\";\r\n\r\nclass StreetSmart extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.startup(containerID);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // Tell React to never update this component, that's up to us\r\n        return false;\r\n    }\r\n    startup = (divId) => {\r\n        console.log('ss prps :', this.props);\r\n        window\r\n            .StreetSmartApi\r\n            .init({\r\n                username: \"signworks\",\r\n                password: \"SIGNWORKS\",\r\n                apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\r\n                targetElement: document.getElementById(containerID),\r\n                srs: \"EPSG:2248\",\r\n                locale: 'en-us',\r\n                configurationUrl: 'https://atlas.cyclomedia.com/configuration',\r\n                addressSettings: {\r\n                    locale: \"en\",\r\n                    database: \"Nokia\"\r\n                }\r\n            })\r\n            .then(function () {\r\n                var viewerType = window.StreetSmartApi.ViewerType.PANORAMA\r\n\r\n                window\r\n                    .StreetSmartApi\r\n                    .open(this.props.graphic.ssInputGeom[0].x + \",\" + this.props.graphic.ssInputGeom[0].y, {\r\n                        viewerType: viewerType,\r\n                        srs: 'EPSG:2248'\r\n                    })\r\n                    .then(function (result) {\r\n                        if (result) {\r\n                            for (let i = 0; i < result.length; i++) {\r\n                                if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\r\n\r\n                                    window.panoramaViewer = result[i];\r\n                                }\r\n\r\n                                //\r\n                                // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHAN\r\n                                // GE, changeView);\r\n                                // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD\r\n                                // _END, loadViewEnd);\r\n\r\n                                /*     for (o in options) {\r\n                                    window.StreetSmartApi.addOverlay(options[o])\r\n                                }\r\n*/\r\n\r\n                            }\r\n\r\n                        }\r\n                    }.bind(this))\r\n                    .catch(function (reason) {\r\n                        alert('Failed to create component(s) through API: ' + reason)\r\n                    });\r\n            }, function (err) {\r\n                alert('Api Init Failed!' + err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div ref=\"ssDiv\" id={containerID}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);\r\n"]},"metadata":{},"sourceType":"module"}