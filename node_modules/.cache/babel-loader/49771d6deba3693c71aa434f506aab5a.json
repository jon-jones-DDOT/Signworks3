{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCone),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI'; // WORKER //\n\nfunction getCone(action) {\n  var x, y, z, newPoint, results;\n  return _regeneratorRuntime.wrap(function getCone$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          x = action.payload.point[0];\n          y = action.payload.point[1];\n          z = action.payload.point[2];\n          newPoint = {\n            type: 'point',\n            x: x,\n            y: y,\n            z: z,\n            SpatialReference: {\n              wkid: 2248\n            }\n          };\n          _context.next = 7;\n          return call(projectGeometry, [[newPoint], action.payload.layers.geometryService, 2248, 4326]);\n\n        case 7:\n          results = _context.sent;\n          console.log('results :', results);\n          /*\r\n          .then(resp => createTriangle([\r\n              [resp[0]],\r\n              imagePitch,\r\n              imageYaw\r\n          ])\r\n            .then(resp => {\r\n              console.log('resp :', resp);\r\n          }), error => (error) => {\r\n              alert(error)\r\n          });\r\n          */\n\n          /*  const projectResult = yield call(projectGeometry, [\r\n              [action.payload.sel[0].geometry],\r\n              action.payload.layers.geometryService,\r\n              action.payload.inSR,\r\n              action.payload.outSR\r\n          ]);\r\n              yield put({\r\n              type: graphicTypes.SET_NEW_CONE_RG,\r\n              payload: {\r\n              }\r\n          });\r\n          */\n\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/getNewCone, ', _context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_getNewCone.js"],"names":["getCone","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","action","x","payload","point","y","z","newPoint","type","SpatialReference","wkid","layers","geometryService","results","console","log","GET_NEW_CONE_S"],"mappings":";;;;yBAMWA,O;;;yBAyDOC,gB;;AA/DlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAuF,mBAAvF,C,CAEA;;AAEA,SAAWV,OAAX,CAAmBW,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIcC,UAAAA,CAJd,GAIkBD,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CAJlB;AAKcC,UAAAA,CALd,GAKkBJ,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CALlB;AAMcE,UAAAA,CANd,GAMkBL,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CANlB;AAOcG,UAAAA,QAPd,GAOyB;AACbC,YAAAA,IAAI,EAAE,OADO;AAEbN,YAAAA,CAAC,EAAEA,CAFU;AAGbG,YAAAA,CAAC,EAAEA,CAHU;AAIbC,YAAAA,CAAC,EAAEA,CAJU;AAKbG,YAAAA,gBAAgB,EAAE;AACdC,cAAAA,IAAI,EAAE;AADQ;AALL,WAPzB;AAAA;AAmBwB,iBAAMlB,IAAI,CAAEK,eAAF,EAAkB,CAAC,CAACU,QAAD,CAAD,EAAaN,MAAM,CAACE,OAAP,CAAeQ,MAAf,CAAsBC,eAAnC,EAAoD,IAApD,EAA0D,IAA1D,CAAlB,CAAV;;AAnBxB;AAmBcC,UAAAA,OAnBd;AAoBOC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;AAGC;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;AArCR;AAAA;;AAAA;AAAA;AAAA;AAoDQC,UAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;;AApDR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAwDA;;;AACA,OAAO,SAAWxB,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACoB,cAAd,EAA8B1B,OAA9B,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\n\r\n// WORKER //\r\n\r\nfunction * getCone(action) {\r\n    try {\r\n\r\n       \r\n        const x = action.payload.point[0];\r\n        const y = action.payload.point[1];\r\n        const z = action.payload.point[2];\r\n        const newPoint = {\r\n            type: 'point',\r\n            x: x,\r\n            y: y,\r\n            z: z,\r\n            SpatialReference: {\r\n                wkid: 2248\r\n            }\r\n        }\r\n\r\n\r\n        \r\n        const results = yield call( projectGeometry,[[newPoint], action.payload.layers.geometryService, 2248, 4326]);\r\n       console.log('results :', results);\r\n     \r\n    \r\n        /*\r\n        .then(resp => createTriangle([\r\n            [resp[0]],\r\n            imagePitch,\r\n            imageYaw\r\n        ])\r\n\r\n        .then(resp => {\r\n            console.log('resp :', resp);\r\n        }), error => (error) => {\r\n            alert(error)\r\n        });\r\n*/\r\n\r\n        /*  const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n\r\n        yield put({\r\n            type: graphicTypes.SET_NEW_CONE_RG,\r\n            payload: {\r\n            }\r\n        });\r\n*/\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/getNewCone, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}