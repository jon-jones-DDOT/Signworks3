{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addNewSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getFullSignPost } from './reload';\nimport { saveSupport } from '../../utils/JSAPI'; // WORKER //\n\nfunction addNewSupport(action) {\n  var newSupport;\n  return _regeneratorRuntime.wrap(function addNewSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            console.log('action.payload.support :', action.payload.support); //build a new , blank support to save\n\n            newSupport = {}; //  yield call(saveSupport, [action.payload.support, true, action.payload.layers.supports]);\n            //  yield getFullSignPost(action);\n          } catch (e) {\n            console.log('SAGA ERROR: map/saveSelectedSupport, ', e);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_newSupport.js"],"names":["addNewSupport","watchLayers","call","takeLatest","types","mapTypes","getFullSignPost","saveSupport","action","console","log","payload","support","newSupport","e","NEW_SUPPORT_S"],"mappings":";;;;yBAOWA,a;;;yBAoBOC,W;;AA3BlB,SAAQC,IAAR,EAAcC,UAAd,QAA+B,oBAA/B;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,eAAR,QAA8B,UAA9B;AACA,SAAQC,WAAR,QAA0B,mBAA1B,C,CAEA;;AAEA,SAAWP,aAAX,CAAyBQ,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,cAAG;AAECC,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCF,MAAM,CAACG,OAAP,CAAeC,OAAvD,EAFD,CAIC;;AACIC,YAAAA,UALL,GAKkB,EALlB,EAQA;AAEA;AACF,WAXD,CAaA,OAAOC,CAAP,EAAU;AACNL,YAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDI,CAArD;AACH;;AAhBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAmBA;;;AACA,OAAO,SAAWb,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAME,UAAU,CAACE,QAAQ,CAACU,aAAV,EAAyBf,aAAzB,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getFullSignPost} from './reload'\r\nimport {saveSupport} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * addNewSupport(action) {\r\n    try{\r\n\r\n        console.log('action.payload.support :', action.payload.support);\r\n   \r\n        //build a new , blank support to save\r\n        let newSupport = {};\r\n\r\n      \r\n       //  yield call(saveSupport, [action.payload.support, true, action.payload.layers.supports]);\r\n        \r\n       //  yield getFullSignPost(action);\r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: map/saveSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n   \r\n    yield takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}