{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n// or agreed to in writing, software distributed under the License is\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied. See the License for the specific language\n// governing permissions and limitations under the License.​ ACTION TYPES //\nexport var types = {\n  SET_CONFIG: \"SET_CONFIG\",\n  CONFIG_FETCH: \"CONFIG_FETCH\",\n  SET_LAYERS: \"SET_LAYERS\"\n}; // REDUCERS //\n\nexport var initialState = {\n  loaded: false\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('state :', state);\n\n  switch (action.type) {\n    case types.SET_CONFIG:\n      return _objectSpread({}, state, action.payload, {\n        loaded: true\n      });\n\n    case types.SET_LAYERS:\n      if (action.payload.mode == 'dev') {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      return state;\n  }\n}); // ACTIONS //\n\nexport var actions = {\n  fetchConfig: function fetchConfig() {\n    return {\n      type: types.CONFIG_FETCH\n    };\n  },\n  setLayers: function setLayers(mode) {\n    return {\n      type: types.SET_LAYERS,\n      payload: {\n        mode: mode\n      }\n    };\n  }\n};","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\reducers\\config.js"],"names":["types","SET_CONFIG","CONFIG_FETCH","SET_LAYERS","initialState","loaded","state","action","console","log","type","payload","mode","actions","fetchConfig","setLayers"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,KAAK,GAAG;AACjBC,EAAAA,UAAU,EAAE,YADK;AAEjBC,EAAAA,YAAY,EAAE,cAFG;AAGjBC,EAAAA,UAAU,EAAE;AAHK,CAAd,C,CAMP;;AACA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,MAAM,EAAE;AADgB,CAArB;AAIP,gBAAc,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,KAAvB;;AACE,UAAQC,MAAM,CAACG,IAAf;AACI,SAAKV,KAAK,CAACC,UAAX;AACI,+BACOK,KADP,EAEOC,MAAM,CAACI,OAFd;AAGIN,QAAAA,MAAM,EAAE;AAHZ;;AAKJ,SAAKL,KAAK,CAACG,UAAX;AACI,UAAII,MAAM,CAACI,OAAP,CAAeC,IAAf,IAAuB,KAA3B,EAAkC;AAC9B,iCAAWN,KAAX;AACH;;AACL;AACI,aAAOA,KAAP;AAZR;AAcH,CAhBD,E,CAkBA;;AACA,OAAO,IAAMO,OAAO,GAAG;AACnBC,EAAAA,WAAW,EAAE;AAAA,WAAO;AAACJ,MAAAA,IAAI,EAAEV,KAAK,CAACE;AAAb,KAAP;AAAA,GADM;AAEnBa,EAAAA,SAAS,EAAE,mBAACH,IAAD;AAAA,WAAW;AAACF,MAAAA,IAAI,EAAEV,KAAK,CAACG,UAAb;AAAyBQ,MAAAA,OAAO,EAAE;AAChDC,QAAAA,IAAI,EAAJA;AADgD;AAAlC,KAAX;AAAA;AAFQ,CAAhB","sourcesContent":["// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\r\n// or agreed to in writing, software distributed under the License is\r\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied. See the License for the specific language\r\n// governing permissions and limitations under the License.​ ACTION TYPES //\r\nexport const types = {\r\n    SET_CONFIG: \"SET_CONFIG\",\r\n    CONFIG_FETCH: \"CONFIG_FETCH\",\r\n    SET_LAYERS: \"SET_LAYERS\"\r\n};\r\n\r\n// REDUCERS //\r\nexport const initialState = {\r\n    loaded: false\r\n};\r\n\r\nexport default(state = initialState, action) => {\r\n  console.log('state :', state);\r\n    switch (action.type) {\r\n        case types.SET_CONFIG:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                loaded: true\r\n            };\r\n        case types.SET_LAYERS:\r\n            if (action.payload.mode == 'dev') {\r\n                return{ ...state}\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ACTIONS //\r\nexport const actions = {\r\n    fetchConfig: () => ({type: types.CONFIG_FETCH}),\r\n    setLayers: (mode) => ({type: types.SET_LAYERS, payload: {\r\n            mode\r\n        }})\r\n};\r\n"]},"metadata":{},"sourceType":"module"}