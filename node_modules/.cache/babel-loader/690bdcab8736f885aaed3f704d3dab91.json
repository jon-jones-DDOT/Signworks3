{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\StreetSmart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { actions as graphicActions } from '../../redux/reducers/graphic';\nimport './StreetSmart.css';\nimport { arcgisToGeoJSON } from '@esri/arcgis-to-geojson-utils';\nvar containerID = \"StreetSmart-container\";\n\nvar StreetSmart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreetSmart, _Component);\n\n  function StreetSmart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreetSmart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreetSmart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' + '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' + 'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' + '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' + '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' + 'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' + 'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' + 'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' + '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' + 'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' + '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\n    _this.selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' + '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' + 'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' + 'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' + '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' + 'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' + 'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' + 'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' + 'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' + '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' + 'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' + '</UserStyle></NamedLayer></StyledLayerDescriptor>';\n    _this.options = null;\n\n    _this.ssCancel = function () {\n      window.StreetSmartApi.destroy({\n        targetElement: document.getElementById(containerID)\n      });\n\n      _this.props.closeStreetSmartViewer();\n    };\n\n    _this.startup = function (divId) {\n      var x = _this.props.graphic.ssInputGeom[0].x;\n      var y = _this.props.graphic.ssInputGeom[0].y;\n      var geoJSONselectPoint = arcgisToGeoJSON(_this.props.map.support);\n      var gjPoints = [];\n      var overlay = _this.props.graphic.ssOverlayFeatures;\n\n      for (var i = 0; i < overlay.length; i++) {\n        var gjPt = arcgisToGeoJSON(overlay[i]);\n        gjPoints.push(gjPt);\n      }\n\n      console.log('gjPoints :', gjPoints);\n      _this.options = [{\n        name: \"Nearby Supports\",\n        geojson: gjPoints,\n        sldXMLtext: _this.PointsSLD\n      }, {\n        name: \"Selected Support\",\n        geojson: geoJSONselectPoint,\n        sldXMLtext: _this.selectSLD\n      }];\n      console.log('geoJSONselectPoint :', geoJSONselectPoint);\n      window.StreetSmartApi.init({\n        username: \"signworks\",\n        password: \"SIGNWORKS\",\n        apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\n        targetElement: document.getElementById(containerID),\n        srs: \"EPSG:2248\",\n        locale: 'en-us',\n        configurationUrl: 'https://atlas.cyclomedia.com/configuration',\n        addressSettings: {\n          locale: \"en\",\n          database: \"Nokia\"\n        }\n      }).then(function () {\n        var viewerType = window.StreetSmartApi.ViewerType.PANORAMA;\n        window.StreetSmartApi.open(x + \",\" + y, {\n          viewerType: viewerType,\n          srs: 'EPSG:2248'\n        }).then(function (result) {\n          if (result) {\n            for (var _i = 0; _i < result.length; _i++) {\n              if (result[_i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\n                window.panoramaViewer = result[_i];\n              } //\n              // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHA\n              // N GE, changeView);\n              // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOA\n              // D _END, loadViewEnd);\n\n\n              for (var o in this.options) {\n                window.StreetSmartApi.addOverlay(this.options[o]);\n              }\n            }\n          }\n        }.bind(this)).catch(function (reason) {\n          alert('Failed to create component(s) through API: ' + reason);\n        });\n      }, function (err) {\n        alert('Api Init Failed!' + err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StreetSmart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(containerID);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // Tell React to never update this component, that's up to us\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"StreetSmart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ssCancel\",\n        onClick: this.ssCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"div\", {\n        ref: \"ssDiv\",\n        className: \"ssPane\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreetSmart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\StreetSmart.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","graphicActions","arcgisToGeoJSON","containerID","StreetSmart","PointsSLD","selectSLD","options","ssCancel","window","StreetSmartApi","destroy","targetElement","document","getElementById","props","closeStreetSmartViewer","startup","divId","x","graphic","ssInputGeom","y","geoJSONselectPoint","map","support","gjPoints","overlay","ssOverlayFeatures","i","length","gjPt","push","console","log","name","geojson","sldXMLtext","init","username","password","apiKey","srs","locale","configurationUrl","addressSettings","database","then","viewerType","ViewerType","PANORAMA","open","result","getType","panoramaViewer","o","addOverlay","bind","catch","reason","alert","err","nextProps","nextState","mapStateToProps","state","config","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {actions as graphicActions} from '../../redux/reducers/graphic'\r\nimport './StreetSmart.css'\r\nimport {arcgisToGeoJSON} from '@esri/arcgis-to-geojson-utils';\r\n\r\nconst containerID = \"StreetSmart-container\";\r\n\r\nclass StreetSmart extends Component {\r\n    PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' +\r\n            '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' +\r\n            'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' +\r\n            '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' +\r\n            '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' +\r\n            'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' +\r\n            'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' +\r\n            'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' +\r\n            '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' +\r\n            'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' +\r\n            '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n    selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' +\r\n            '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' +\r\n            'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' +\r\n            'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' +\r\n            '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' +\r\n            'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' +\r\n            'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' +\r\n            'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' +\r\n            'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' +\r\n            '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' +\r\n            'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' +\r\n            '</UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n    options = null;\r\n\r\n    componentDidMount() {\r\n\r\n        this.startup(containerID);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // Tell React to never update this component, that's up to us\r\n        return false;\r\n    }\r\n    ssCancel = () => {\r\n        window\r\n            .StreetSmartApi\r\n            .destroy({\r\n                targetElement: document.getElementById(containerID)\r\n            });\r\n\r\n        this\r\n            .props\r\n            .closeStreetSmartViewer();\r\n\r\n    }\r\n\r\n    startup = (divId) => {\r\n        const x = this.props.graphic.ssInputGeom[0].x;\r\n        const y = this.props.graphic.ssInputGeom[0].y;\r\n\r\n        const geoJSONselectPoint = arcgisToGeoJSON(this.props.map.support);\r\n        \r\n        const gjPoints = [];\r\n        let overlay = this.props.graphic.ssOverlayFeatures;\r\n\r\n        for(let i = 0; i < overlay.length;i++){\r\n            const gjPt =arcgisToGeoJSON(overlay[i]);\r\n            gjPoints.push(gjPt);\r\n        }\r\n        \r\n\r\n\r\n        console.log('gjPoints :', gjPoints);\r\n        this.options = [{ name: \"Nearby Supports\", geojson: gjPoints, sldXMLtext: this.PointsSLD },\r\n         { name: \"Selected Support\", geojson: geoJSONselectPoint, sldXMLtext: this.selectSLD }]\r\n        console.log('geoJSONselectPoint :', geoJSONselectPoint);\r\n\r\n        window\r\n            .StreetSmartApi\r\n            .init({\r\n                username: \"signworks\",\r\n                password: \"SIGNWORKS\",\r\n                apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\r\n                targetElement: document.getElementById(containerID),\r\n                srs: \"EPSG:2248\",\r\n                locale: 'en-us',\r\n                configurationUrl: 'https://atlas.cyclomedia.com/configuration',\r\n                addressSettings: {\r\n                    locale: \"en\",\r\n                    database: \"Nokia\"\r\n                }\r\n            })\r\n            .then(function () {\r\n                var viewerType = window.StreetSmartApi.ViewerType.PANORAMA\r\n\r\n                window\r\n                    .StreetSmartApi\r\n                    .open(x + \",\" + y, {\r\n                        viewerType: viewerType,\r\n                        srs: 'EPSG:2248'\r\n                    })\r\n                    .then(function (result) {\r\n                        if (result) {\r\n\r\n                            for (let i = 0; i < result.length; i++) {\r\n                                if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\r\n\r\n                                    window.panoramaViewer = result[i];\r\n                                }\r\n\r\n                                //\r\n                                // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHA\r\n                                // N GE, changeView);\r\n                                // window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOA\r\n                                // D _END, loadViewEnd);\r\n\r\n                                     for (let o in this.options) {\r\n                                    window.StreetSmartApi.addOverlay(this.options[o])\r\n                                }\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n                    }.bind(this))\r\n                    .catch(function (reason) {\r\n                        alert('Failed to create component(s) through API: ' + reason)\r\n                    });\r\n            }, function (err) {\r\n                alert('Api Init Failed!' + err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"StreetSmart\">\r\n                <div className=\"ssCancel\" onClick={this.ssCancel}>X</div>\r\n                <div ref=\"ssDiv\" className=\"ssPane\" id={containerID}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);\r\n"]},"metadata":{},"sourceType":"module"}