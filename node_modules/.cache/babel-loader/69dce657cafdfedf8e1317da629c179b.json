{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addNewSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { getFullSignPost } from './reload';\nimport { saveSupport, getPointOnRouteLRS, getSupportById } from '../../utils/JSAPI'; // WORKER //\n\nfunction addNewSupport(action) {\n  var newSupport, lrsResults, lrsInfo, elLation, features;\n  return _regeneratorRuntime.wrap(function addNewSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          //build a new , blank support to save\n          newSupport = {};\n          newSupport.attributes = {\n            ANGLE: null,\n            BASETYPE: null,\n            BLOCKID: null,\n            COMMENTS: null,\n            CREATED_DATE: null,\n            CREATED_USER: null,\n            FROMDATE: null,\n            GLOBALID: null,\n            LAST_EDITED_DATE: null,\n            LAST_EDITED_USER: null,\n            LOCATION: null,\n            MEASURE: null,\n            MSENDDATE: null,\n            MSSTARTDATE: null,\n            MSUTILITYID: null,\n            NUMBEROFBASES: null,\n            OBJECTID: null,\n            ORIGIN_ID: null,\n            ROUTEID: null,\n            ROUTEID_ALT: null,\n            SEG_DIR: null,\n            SIDE: null,\n            STREETSEGID: null,\n            STREETSEGID_ALT: null,\n            SUBBASE: null,\n            SUBBLOCKID: null,\n            SUBBLOCKKEY: null,\n            SUPPORTHEIGHT: null,\n            SUPPORTSTATUS: 1,\n            SUPPORTTYPE: 14,\n            TODATE: null,\n            Z: null,\n            SIGNWORKS_CREATED_BY: action.payload.auth.user.username,\n            SIGNWORKS_LAST_EDITED_BY: action.payload.auth.user.username\n          };\n\n          newSupport.setAttributes = function (a) {\n            this.attributes = a;\n            return this;\n          };\n\n          newSupport.geometry = {\n            type: \"point\",\n            // autocasts as new Point()\n            x: action.payload.support.features[0].geometry.coordinates[0],\n            y: action.payload.support.features[0].geometry.coordinates[1],\n            z: action.payload.support.features[0].geometry.coordinates[2],\n            spatialReference: {\n              wkid: 2248\n            }\n          }; //add LRS info\n\n          _context.next = 7;\n          return call(getPointOnRouteLRS, [newSupport, action.payload.layers.LRS_Service, 2248, 26985]);\n\n        case 7:\n          lrsResults = _context.sent;\n          lrsInfo = lrsResults.data.pointOnRoutes[0];\n          console.log('lrsInfo', lrsInfo);\n          console.log('lrsInfo.roadData.segmentations.subBlock.subBlockKey', lrsInfo.roadData.segmentations.subBlock.subBlockKey);\n          newSupport.attributes.ROUTEID = lrsInfo.routeID;\n          newSupport.attributes.MEASURE = lrsInfo.measureInMeters;\n          newSupport.attributes.STREETSEGID = lrsInfo.streetSegID;\n          newSupport.attributes.BLOCKID = lrsInfo.blockId;\n          newSupport.attributes.SUBBLOCKID = lrsInfo.subBlockId;\n          newSupport.attributes.SUBBLOCKKEY = lrsInfo.roadData.segmentations.subBlock.subBlockKey; //now let's project its geometry to its native preference\n\n          /*      const antCraving = yield call(projectGeometry, [\r\n              [newSupport.geometry],\r\n              action.payload.layers.geometryService,\r\n              2248,\r\n              26985\r\n          ])\r\n            newSupport.geometry = antCraving[0];\r\n          */\n\n          _context.next = 19;\n          return call(saveSupport, [newSupport, true, action.payload.layers.supports]);\n\n        case 19:\n          elLation = _context.sent;\n          _context.next = 22;\n          return call(getSupportById, [elLation.data.addResults[0].objectId, action.payload.layers.supports, 4326]);\n\n        case 22:\n          features = _context.sent;\n          action.payload.support = features.data.features[0];\n          _context.next = 26;\n          return getFullSignPost(action);\n\n        case 26:\n          _context.next = 28;\n          return put({\n            type: graphicTypes.NEED_SUPPORT_REFRESH_RG,\n            payload: {\n              needSupRefresh: true\n            }\n          });\n\n        case 28:\n          _context.next = 33;\n          break;\n\n        case 30:\n          _context.prev = 30;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/addNewSupport, ', _context.t0);\n\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 30]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_newSupport.js"],"names":["addNewSupport","watchLayers","call","put","takeLatest","types","mapTypes","graphicTypes","getFullSignPost","saveSupport","getPointOnRouteLRS","getSupportById","action","newSupport","attributes","ANGLE","BASETYPE","BLOCKID","COMMENTS","CREATED_DATE","CREATED_USER","FROMDATE","GLOBALID","LAST_EDITED_DATE","LAST_EDITED_USER","LOCATION","MEASURE","MSENDDATE","MSSTARTDATE","MSUTILITYID","NUMBEROFBASES","OBJECTID","ORIGIN_ID","ROUTEID","ROUTEID_ALT","SEG_DIR","SIDE","STREETSEGID","STREETSEGID_ALT","SUBBASE","SUBBLOCKID","SUBBLOCKKEY","SUPPORTHEIGHT","SUPPORTSTATUS","SUPPORTTYPE","TODATE","Z","SIGNWORKS_CREATED_BY","payload","auth","user","username","SIGNWORKS_LAST_EDITED_BY","setAttributes","a","geometry","type","x","support","features","coordinates","y","z","spatialReference","wkid","layers","LRS_Service","lrsResults","lrsInfo","data","pointOnRoutes","console","log","roadData","segmentations","subBlock","subBlockKey","routeID","measureInMeters","streetSegID","blockId","subBlockId","supports","elLation","addResults","objectId","NEED_SUPPORT_REFRESH_RG","needSupRefresh","NEW_SUPPORT_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\n\r\nimport {getFullSignPost} from './reload'\r\nimport {saveSupport, getPointOnRouteLRS, getSupportById} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * addNewSupport(action) {\r\n    try {\r\n\r\n        //build a new , blank support to save\r\n        let newSupport = {};\r\n        newSupport.attributes = {\r\n            ANGLE: null,\r\n            BASETYPE: null,\r\n            BLOCKID:null,\r\n            COMMENTS: null,\r\n            CREATED_DATE: null,\r\n            CREATED_USER: null,\r\n            FROMDATE: null,\r\n            GLOBALID: null,\r\n            LAST_EDITED_DATE: null,\r\n            LAST_EDITED_USER: null,\r\n            LOCATION: null,\r\n            MEASURE: null,\r\n            MSENDDATE: null,\r\n            MSSTARTDATE: null,\r\n            MSUTILITYID: null,\r\n            NUMBEROFBASES: null,\r\n            OBJECTID: null,\r\n            ORIGIN_ID: null,\r\n            ROUTEID: null,\r\n            ROUTEID_ALT: null,\r\n            SEG_DIR: null,\r\n            SIDE: null,\r\n            STREETSEGID: null,\r\n            STREETSEGID_ALT: null,\r\n            SUBBASE: null,\r\n            SUBBLOCKID:null,\r\n            SUBBLOCKKEY:null,\r\n            SUPPORTHEIGHT: null,\r\n            SUPPORTSTATUS: 1,\r\n            SUPPORTTYPE: 14,\r\n            TODATE: null,\r\n            Z: null,\r\n            SIGNWORKS_CREATED_BY:action.payload.auth.user.username,\r\n            SIGNWORKS_LAST_EDITED_BY: action.payload.auth.user.username\r\n        }\r\n        newSupport.setAttributes = function (a) {\r\n            this.attributes = a;\r\n            return this\r\n        };\r\n        newSupport.geometry = {\r\n            type: \"point\", // autocasts as new Point()\r\n            x: action.payload.support.features[0].geometry.coordinates[0],\r\n            y: action.payload.support.features[0].geometry.coordinates[1],\r\n            z: action.payload.support.features[0].geometry.coordinates[2],\r\n            spatialReference: {\r\n                wkid: 2248\r\n            }\r\n        };\r\n\r\n        //add LRS info\r\n\r\n        const lrsResults = yield call(getPointOnRouteLRS, [newSupport, action.payload.layers.LRS_Service, 2248,26985]);\r\n        const lrsInfo = lrsResults.data.pointOnRoutes[0];\r\n        console.log('lrsInfo', lrsInfo)\r\n        console.log('lrsInfo.roadData.segmentations.subBlock.subBlockKey', lrsInfo.roadData.segmentations.subBlock.subBlockKey)\r\n        newSupport.attributes.ROUTEID = lrsInfo.routeID;\r\n        newSupport.attributes.MEASURE = lrsInfo.measureInMeters;\r\n        newSupport.attributes.STREETSEGID = lrsInfo.streetSegID;\r\n        newSupport.attributes.BLOCKID = lrsInfo.blockId;\r\n        newSupport.attributes.SUBBLOCKID = lrsInfo.subBlockId;\r\n        newSupport.attributes.SUBBLOCKKEY = lrsInfo.roadData.segmentations.subBlock.subBlockKey;\r\n\r\n\r\n        //now let's project its geometry to its native preference\r\n\r\n        /*      const antCraving = yield call(projectGeometry, [\r\n            [newSupport.geometry],\r\n            action.payload.layers.geometryService,\r\n            2248,\r\n            26985\r\n        ])\r\n\r\n        newSupport.geometry = antCraving[0];\r\n*/\r\n\r\n        const elLation = yield call(saveSupport, [newSupport, true, action.payload.layers.supports]);\r\n        const features = yield call(getSupportById, [elLation.data.addResults[0].objectId, action.payload.layers.supports, 4326])\r\n \r\n        action.payload.support = features.data.features[0];\r\n\r\n        yield getFullSignPost(action);\r\n        yield put({\r\n            type: graphicTypes.NEED_SUPPORT_REFRESH_RG,\r\n            payload: {\r\n                needSupRefresh: true\r\n            }\r\n        })\r\n\r\n    } catch (e) {\r\n\r\n        console.log('SAGA ERROR: map/addNewSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n\r\n    yield takeLatest(mapTypes.NEW_SUPPORT_S, addNewSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}