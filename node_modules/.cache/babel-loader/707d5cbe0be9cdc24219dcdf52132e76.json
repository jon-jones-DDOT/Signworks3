{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { loadModules } from 'esri-loader';\n\nvar err = function err(e) {\n  console.log('an error occurred in JSAPI  ' + e.message);\n};\n\nexport function getSupportById(args) {\n  var id = args[0];\n  var layer = args[1];\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        Query = _ref2[0];\n\n    var query = new Query();\n    query.where = \"OBJECTID = \" + id;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    layer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        return results.features[0];\n      } else {\n        alert('support was not retrieved');\n      }\n    }, err);\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n}\nexport function getSupportByExtent(args) {\n  var extent = args[0];\n  console.log('extent is JSAPI', extent);\n  var supportLayer = args[1]; // console.log(supportLayer);\n\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        Query = _ref4[0];\n\n    var query = new Query();\n    query.geometry = extent;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    supportLayer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        alert('alleged results');\n      }\n    }, err);\n  });\n}\nexport function pointToExtent(view, point, toleranceInPixel, extent) {\n  loadModules([\"esri/geometry/Extent\"]).then(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        Extent = _ref6[0];\n\n    //calculate map coords represented per pixel\n    var pixelWidth = view.extent.width / view.width; //calculate map coords for tolerance in pixel\n\n    var toleraceInMapCoords = toleranceInPixel * pixelWidth; //calculate & return computed extent\n\n    extent = new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view.spatialReference);\n    console.log('pointToExten', returnExtent);\n  });\n  console.log('extent should be an extent', extent);\n  return 667;\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\JSAPI.js"],"names":["loadModules","err","e","console","log","message","getSupportById","args","id","layer","then","Query","query","where","outFields","returnGeometry","queryFeatures","results","features","length","alert","catch","error","getSupportByExtent","extent","supportLayer","geometry","pointToExtent","view","point","toleranceInPixel","Extent","pixelWidth","width","toleraceInMapCoords","x","y","spatialReference","returnExtent"],"mappings":"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","sourcesContent":["import { loadModules } from 'esri-loader';\r\n\r\n\r\n\r\nconst err = (e) =>{ console.log('an error occurred in JSAPI  ' + e.message)}\r\n\r\n\r\n\r\n\r\nexport function  getSupportById (args) {\r\n  const id = args[0];\r\n  const layer = args[1];\r\n   \r\n    loadModules([        \"esri/tasks/support/Query\"])\r\n    .then(([Query]) => {\r\n        let query = new Query();\r\n        query.where = \"OBJECTID = \" + id;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n      \r\n        layer.queryFeatures(query).then(\r\n            function (results) {\r\n              \r\n                if (results.features.length > 0) {\r\n                   \r\n                   return results.features[0];\r\n                } else {\r\n                    alert('support was not retrieved')\r\n                }\r\n            },\r\n            err);\r\n\r\n     \r\n     \r\n    })\r\n    .catch(err => {\r\n      // handle any errors\r\n      console.error(err);\r\n    });\r\n}\r\n \r\nexport function getSupportByExtent(args) {\r\n    const extent = args[0];\r\n    console.log('extent is JSAPI',extent)\r\n    const supportLayer = args[1];\r\n   // console.log(supportLayer);\r\n\r\n    loadModules([\r\n\"esri/tasks/support/Query\"\r\n    ])\r\n    .then( ([\r\nQuery\r\n    ]) => {\r\n\r\n        let query = new Query();\r\n        query.geometry = extent;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n    \r\n        supportLayer.queryFeatures(query).then(\r\n            function (results) {\r\n                if (results.features.length > 0) {\r\n                    alert('alleged results')\r\n                }\r\n            },\r\n            err);\r\n    });\r\n   \r\n\r\n}\r\n\r\n\r\nexport function pointToExtent  ( view, point, toleranceInPixel ,extent) {\r\n    \r\n    loadModules([\r\n        \"esri/geometry/Extent\"\r\n    ])\r\n    .then( ([\r\nExtent\r\n    ]) => {\r\n \r\n        //calculate map coords represented per pixel\r\n        let pixelWidth = view.extent.width / view.width;\r\n        \r\n        //calculate map coords for tolerance in pixel\r\n        let toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n        //calculate & return computed extent\r\n         extent = new Extent(point.x - toleraceInMapCoords,\r\n            point.y - toleraceInMapCoords,\r\n            point.x + toleraceInMapCoords,\r\n            point.y + toleraceInMapCoords,\r\n            view.spatialReference);\r\n            console.log ('pointToExten',returnExtent)\r\n      \r\n    });\r\n    console.log('extent should be an extent', extent)\r\nreturn 667;\r\n}"]},"metadata":{},"sourceType":"module"}