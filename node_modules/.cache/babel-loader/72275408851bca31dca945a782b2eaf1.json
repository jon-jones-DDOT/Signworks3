{"ast":null,"code":"import { parkingtypesigns, mphSigns } from \"../../../SignworksJSON\"; // newCode is the mutcd.code that is being checked signs -  an array of signs on\n// the signpost each sign should have a property called MUTCD that has the info\n// from the sign catalog\n\nexport function MutcdDuplicate(newCode, signs) {\n  var isDupe = \"\";\n\n  for (var i = 0; i < signs.length; i++) {\n    if (signs[i].MUTCD.code === newCode) {\n      isDupe = true;\n    }\n  }\n\n  return isDupe;\n}\nexport function isSpeedLimit(mutt) {\n  mutt = mutt.toUpperCase();\n  var speedy = mphSigns.find(function (code) {\n    if (code === mutt) {\n      return mutt;\n    }\n  });\n\n  if (speedy) {\n    return \"\";\n  } else return \"disabled\";\n}\nexport function zoneVerify(props) {\n  //regex \n  var anc = /[A-G]/;\n  var ward = /[1-8]/;\n  var amp = /[&]/; //assemble zone\n\n  var zoneValue = props.ward1 + props.anc1;\n  console.log('zoneValue', zoneValue);\n\n  if (props.ward2) {\n    zoneValue += \"&\" + props.ward2 + props.anc2;\n  } else if (props.anc2) {\n    // you've got a anc with no ward\n    return \"ou've got a anc with no ward\";\n  } // alert(zoneValue);\n  // verify zone with same script as python server side\n  // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\n\n\n  if (zoneValue == \"\" || !zoneValue) {\n    // this was an error before , but having an empty value is ok\n    // above is an old comment, might not be \"true\" in 3.0\n    return \"above is an old comment, might not be  in 3.0\";\n  }\n\n  if (zoneValue.length < 1) {\n    return \"above is an old comment, might not be true in 3.0\";\n  }\n\n  if (ward.test(zoneValue[0])) {\n    // we have a ward in first position\n    if (zoneValue.length < 2) {\n      // it was just a single ward\n      return \"we have a ward in first position and done\";\n    }\n\n    if (amp.test(zoneValue[1])) {\n      //single digit ward and ...\n      if (ward.test(zoneValue[2])) {\n        //single digit ward and ward and ...\n        if (zoneValue.length < 4) {\n          //single digit ward and single digit ward and done\n          return \"//single digit ward and single digit ward and done\";\n        }\n\n        if (anc.test(zoneValue[3])) {\n          // single digit ward and ward+anc and done\n          return \" single digit ward and ward+anc and done\";\n        } else {\n          //single digit ward and some garbage\n          return \"single digit ward and some garbage\";\n        }\n      }\n    } else if (anc.test(zoneValue[1])) {\n      // ward + anc\n      if (zoneValue.length < 3) {\n        // ward + anc and done\n        return \"ward + anc and done\";\n      } else if (amp.test(zoneValue[2])) {\n        // ward + anc and ...\n        if (zoneValue.length < 4) {\n          // oops, nothing after the ampersand\n          // we could just fix it here clip the ampersand\n          return \"oops, nothing after the ampersand\";\n        } else if (ward.test(zoneValue[3])) {\n          // ward + anc and ward and ...\n          if (zoneValue.length < 5) {\n            // ward + anc and single digit ward and done\n            return \"ward + anc and single digit ward and done\";\n          } else if (zoneValue.length > 5) {\n            // too many characters  - - shouldn't happen here but check anyway\n            return \"too many characters  - - shouldn't happen here but check anyway\";\n          } else if (anc.test(zoneValue[4])) {\n            // ward + anc and ward = anc and done\n            return \"ward + anc and ward = anc and done\";\n          } else {\n            // ward + anc + ward + garbage\n            return \"ward + anc + ward + garbage\";\n          }\n        } else {\n          // ward + anc + ampersand + garbage\n          return \"ward + anc + ampersand + garbage\";\n        }\n      } else {\n        // ward + anc + garbage\n        return \"ward + anc + garbage\";\n      }\n    } else {\n      //ward + garbage\n      return \"ward + garbage\";\n    }\n  } else {\n    //garbage from the get go\n    return \"garbage from the get go\";\n  } //should never get here\n\n\n  return \"should never get here\";\n}\n;\n/*\r\nfunction zoneCheck (evt) {\r\n\r\n\r\n    if (props.ward1 != \"\") {\r\n        $anc1.attr('disabled', \"\");\r\n    }\r\n    else {\r\n        $anc1.attr('disabled', \"\");\r\n        $anc1.val(\"\");\r\n    }\r\n    if (props.ward2 != \"\") {\r\n        $anc2.attr('disabled', \"\");\r\n    }\r\n    else {\r\n        $anc2.attr('disabled', \"\");\r\n        $anc2.val(\"\");\r\n    }\r\n    var err = zoneVerify(\"\");\r\n    if (err) {\r\n        $zoneDiv.removeClass(\"edit_div\");\r\n        $zoneDiv.addClass(\"edit_div_err\");\r\n        verify(flagOR, \"\");\r\n    }\r\n    else {\r\n        $zoneDiv.removeClass(\"edit_div_err\");\r\n        $zoneDiv.addClass(\"edit_div\");\r\n        verify(flagORX, \"\");\r\n        feature.attributes.ZONE_ID = zoneValue;\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\SignValidations.js"],"names":["parkingtypesigns","mphSigns","MutcdDuplicate","newCode","signs","isDupe","i","length","MUTCD","code","isSpeedLimit","mutt","toUpperCase","speedy","find","zoneVerify","props","anc","ward","amp","zoneValue","ward1","anc1","console","log","ward2","anc2","test"],"mappings":"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","sourcesContent":["import {parkingtypesigns, mphSigns} from \"../../../SignworksJSON\";\r\n\r\n// newCode is the mutcd.code that is being checked signs -  an array of signs on\r\n// the signpost each sign should have a property called MUTCD that has the info\r\n// from the sign catalog\r\nexport function MutcdDuplicate(newCode, signs) {\r\n\r\n    let isDupe = \"\";\r\n    for (let i = 0; i < signs.length; i++) {\r\n        if (signs[i].MUTCD.code === newCode) {\r\n            isDupe =true;\r\n        }\r\n    }\r\n   \r\n    return isDupe\r\n}\r\n\r\nexport function isSpeedLimit(mutt) {\r\n    mutt = mutt.toUpperCase();\r\n    const speedy = mphSigns.find((code) => {\r\n       \r\n        if (code === mutt) {\r\n            return mutt;\r\n        }\r\n    })\r\n   \r\nif (speedy){\r\n    return \"\"\r\n}\r\nelse\r\n    return \"disabled\";\r\n\r\n}\r\n\r\nexport function zoneVerify (props) {\r\n\r\n//regex \r\nconst anc = /[A-G]/\r\nconst ward = /[1-8]/\r\nconst amp = /[&]/\r\n    \r\n        //assemble zone\r\n      let  zoneValue = props.ward1 + props.anc1;\r\n      console.log('zoneValue', zoneValue)\r\n        if (props.ward2) {\r\n            zoneValue += \"&\" + props.ward2 + props.anc2;\r\n        }\r\n        else if (props.anc2) {\r\n            // you've got a anc with no ward\r\n            return \"ou've got a anc with no ward\";\r\n\r\n        }\r\n    \r\n\r\n\r\n\r\n\r\n    // alert(zoneValue);\r\n    // verify zone with same script as python server side\r\n    // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\r\n   \r\n    if (zoneValue == \"\" || !zoneValue) {\r\n        // this was an error before , but having an empty value is ok\r\n        // above is an old comment, might not be \"true\" in 3.0\r\n        return \"above is an old comment, might not be  in 3.0\";\r\n    }\r\n    if (zoneValue.length < 1) {\r\n        return \"above is an old comment, might not be true in 3.0\";\r\n    }\r\n    \r\n    if (ward.test(zoneValue[0])) {\r\n        // we have a ward in first position\r\n        if (zoneValue.length < 2) {\r\n            // it was just a single ward\r\n            return \"we have a ward in first position and done\";\r\n        }\r\n        if (amp.test(zoneValue[1])) {\r\n            //single digit ward and ...\r\n            if (ward.test(zoneValue[2])) {\r\n                //single digit ward and ward and ...\r\n                if (zoneValue.length < 4) {\r\n                    //single digit ward and single digit ward and done\r\n                    return \"//single digit ward and single digit ward and done\";\r\n                }\r\n                if (anc.test(zoneValue[3])) {\r\n                    // single digit ward and ward+anc and done\r\n                    return \" single digit ward and ward+anc and done\";\r\n                }\r\n                else {\r\n                    //single digit ward and some garbage\r\n                    return \"single digit ward and some garbage\";\r\n                }\r\n            }\r\n        }\r\n        else if (anc.test(zoneValue[1])) {\r\n            // ward + anc\r\n            if (zoneValue.length < 3) {\r\n                // ward + anc and done\r\n                return \"ward + anc and done\";\r\n            }\r\n            else if (amp.test(zoneValue[2])) {\r\n                // ward + anc and ...\r\n                if (zoneValue.length < 4) {\r\n                    // oops, nothing after the ampersand\r\n                    // we could just fix it here clip the ampersand\r\n                    return \"oops, nothing after the ampersand\";\r\n                }\r\n                else if (ward.test(zoneValue[3])) {\r\n                    // ward + anc and ward and ...\r\n                    if (zoneValue.length < 5) {\r\n                        // ward + anc and single digit ward and done\r\n                        return \"ward + anc and single digit ward and done\";\r\n                    }\r\n                    else if (zoneValue.length > 5) {\r\n                        // too many characters  - - shouldn't happen here but check anyway\r\n                        return \"too many characters  - - shouldn't happen here but check anyway\";\r\n                    }\r\n                    else if (anc.test(zoneValue[4])) {\r\n                        // ward + anc and ward = anc and done\r\n                        return \"ward + anc and ward = anc and done\";\r\n                    }\r\n                    else {\r\n                        // ward + anc + ward + garbage\r\n                        return \"ward + anc + ward + garbage\";\r\n                    }\r\n                }\r\n                else {\r\n                    // ward + anc + ampersand + garbage\r\n                    return \"ward + anc + ampersand + garbage\";\r\n                }\r\n            }\r\n            else {\r\n                // ward + anc + garbage\r\n                return \"ward + anc + garbage\";\r\n            }\r\n        }\r\n        else {\r\n            //ward + garbage\r\n            return \"ward + garbage\";\r\n        }\r\n\r\n\r\n\r\n    }\r\n    else {\r\n        //garbage from the get go\r\n        return \"garbage from the get go\";\r\n    }\r\n    //should never get here\r\n    return \"should never get here\";\r\n};\r\n\r\n\r\n/*\r\nfunction zoneCheck (evt) {\r\n\r\n\r\n    if (props.ward1 != \"\") {\r\n        $anc1.attr('disabled', \"\");\r\n    }\r\n    else {\r\n        $anc1.attr('disabled', \"\");\r\n        $anc1.val(\"\");\r\n    }\r\n    if (props.ward2 != \"\") {\r\n        $anc2.attr('disabled', \"\");\r\n    }\r\n    else {\r\n        $anc2.attr('disabled', \"\");\r\n        $anc2.val(\"\");\r\n    }\r\n    var err = zoneVerify(\"\");\r\n    if (err) {\r\n        $zoneDiv.removeClass(\"edit_div\");\r\n        $zoneDiv.addClass(\"edit_div_err\");\r\n        verify(flagOR, \"\");\r\n    }\r\n    else {\r\n        $zoneDiv.removeClass(\"edit_div_err\");\r\n        $zoneDiv.addClass(\"edit_div\");\r\n        verify(flagORX, \"\");\r\n        feature.attributes.ZONE_ID = zoneValue;\r\n    }\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}