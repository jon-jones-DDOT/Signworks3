{"ast":null,"code":"var _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\Signs\\\\Zone.js\";\nimport React from 'react';\nimport './Zone.css';\nvar amp = /[&]/;\n\nvar zoneParse = function zoneParse(zoneValue) {\n  // why don't we just set the controls directly?  Because they don't exist yet. we\n  // don't have to check for all possible garbage because the zoneValue has\n  // already passed ZoneVerify Don't run this without running and passing\n  // zoneVerify first!\n  var zoneArray = [,,];\n\n  if (zoneValue) {\n    // set first cell\n    zoneArray[0] = zoneValue[0];\n  } else {\n    //empty zone id\n    return \"\";\n  } // set second cell\n\n\n  if (!zoneValue[1]) {\n    //just one ward no anc\n    return zoneArray;\n  } else if (amp.test(zoneValue[1])) {\n    //second digit is amp so third must be ward\n    zoneArray[2] = zoneValue[2];\n\n    if (!zoneValue[3]) {\n      // ward + amp + ward and done\n      return zoneArray;\n    } else {\n      //ward + amp + ward + anc and done\n      zoneArray[3] = zoneValue[3];\n      return zoneArray;\n    }\n  } else {\n    //ward + anc + ...\n    zoneArray[1] = zoneValue[1];\n\n    if (amp.test(zoneValue[2])) {\n      zoneArray[2] = zoneValue[3];\n\n      if (!zoneValue[4]) {\n        // ward + anc + amp + ward and done\n        return zoneArray;\n      } else {\n        // ward + anc + amp + ward + anc\n        zoneArray[3] = zoneValue[4];\n        return zoneArray;\n      }\n    } else {\n      // ward + anc and done\n      return zoneArray;\n    }\n  }\n};\n\nexport default function Zone(props) {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, zoneParse(props.zone));\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\Zone.js"],"names":["React","amp","zoneParse","zoneValue","zoneArray","test","Zone","props","zone"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AACA,IAAMC,GAAG,GAAG,KAAZ;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,SAAD,EAAe;AAC7B;AACA;AACA;AACA;AACA,MAAIC,SAAS,GAAG,IAAhB;;AACA,MAAID,SAAJ,EAAe;AACX;AACAC,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACH,GAHD,MAGO;AACH;AACA,WAAO,EAAP;AACH,GAZ4B,CAa7B;;;AACA,MAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,WAAOC,SAAP;AACH,GAHD,MAGO,IAAIH,GAAG,CAACI,IAAJ,CAASF,SAAS,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC/B;AACAC,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,QAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,aAAOC,SAAP;AACH,KAHD,MAGO;AACH;AACAA,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACA,aAAOC,SAAP;AACH;AACJ,GAXM,MAWA;AACH;AACAA,IAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,QAAIF,GAAG,CAACI,IAAJ,CAASF,SAAS,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AACxBC,MAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,UAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,eAAOC,SAAP;AACH,OAHD,MAGO;AACH;AACAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACA,eAAOC,SAAP;AACH;AACJ,KAVD,MAUO;AACH;AACA,aAAOA,SAAP;AACH;AACJ;AAEJ,CA/CD;;AAiDA,eAAe,SAASE,IAAT,CAAcC,KAAd,EAAqB;AAChC,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOL,SAAS,CAACK,KAAK,CAACC,IAAP,CAAhB,CADJ;AAGH","sourcesContent":["import React from 'react'\r\nimport './Zone.css'\r\nconst amp = /[&]/;\r\n\r\nconst zoneParse = (zoneValue) => {\r\n    // why don't we just set the controls directly?  Because they don't exist yet. we\r\n    // don't have to check for all possible garbage because the zoneValue has\r\n    // already passed ZoneVerify Don't run this without running and passing\r\n    // zoneVerify first!\r\n    let zoneArray = [,,];\r\n    if (zoneValue) {\r\n        // set first cell\r\n        zoneArray[0] = zoneValue[0]\r\n    } else {\r\n        //empty zone id\r\n        return \"\";\r\n    }\r\n    // set second cell\r\n    if (!zoneValue[1]) {\r\n        //just one ward no anc\r\n        return zoneArray;\r\n    } else if (amp.test(zoneValue[1])) {\r\n        //second digit is amp so third must be ward\r\n        zoneArray[2] = zoneValue[2];\r\n        if (!zoneValue[3]) {\r\n            // ward + amp + ward and done\r\n            return zoneArray;\r\n        } else {\r\n            //ward + amp + ward + anc and done\r\n            zoneArray[3] = zoneValue[3];\r\n            return zoneArray;\r\n        }\r\n    } else {\r\n        //ward + anc + ...\r\n        zoneArray[1] = zoneValue[1];\r\n        if (amp.test(zoneValue[2])) {\r\n            zoneArray[2] = zoneValue[3];\r\n            if (!zoneValue[4]) {\r\n                // ward + anc + amp + ward and done\r\n                return zoneArray;\r\n            } else {\r\n                // ward + anc + amp + ward + anc\r\n                zoneArray[3] = zoneValue[4];\r\n                return zoneArray;\r\n            }\r\n        } else {\r\n            // ward + anc and done\r\n            return zoneArray;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default function Zone(props) {\r\n    return (\r\n        <div>{ zoneParse(props.zone)}</div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}