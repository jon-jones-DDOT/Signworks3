{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(query),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchQuery);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { superQuery } from '../../utils/JSAPI'; // WORKER //\n\nfunction query(action) {\n  var queryResult, features;\n  return _regeneratorRuntime.wrap(function query$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('action.payload.extent', action.payload.extent);\n          _context.next = 4;\n          return call(superQuery, [action.payload.where, action.payload.extent, action.payload.layer]);\n\n        case 4:\n          queryResult = _context.sent;\n          features = queryResult.data.features;\n          _context.next = 8;\n          return put({\n            type: graphicTypes.SET_QUERY_RESULTS_RG,\n            payload: {\n              queryFeatures: features,\n              queryCount: features.length\n            }\n          });\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/query, ', _context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n} // WATCHER //\n\n\nexport function watchQuery() {\n  return _regeneratorRuntime.wrap(function watchQuery$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.QUERY_SUPERQUERY_S, query);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_query.js"],"names":["query","watchQuery","call","put","takeLatest","types","graphicTypes","superQuery","action","console","log","payload","extent","where","layer","queryResult","features","data","type","SET_QUERY_RESULTS_RG","queryFeatures","queryCount","length","QUERY_SUPERQUERY_S"],"mappings":";;;;yBAQWA,K;;;yBAuBOC,U;;AA/BlB,SAAQC,IAAR,EAAcC,GAAd,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,UAAR,QAAyB,mBAAzB,C,CAIA;;AAEA,SAAWP,KAAX,CAAiBQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEKC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,MAAM,CAACG,OAAP,CAAeC,MAApD;AAFL;AAG6B,iBAAMV,IAAI,CAACK,UAAD,EAAa,CAACC,MAAM,CAACG,OAAP,CAAeE,KAAhB,EAAuBL,MAAM,CAACG,OAAP,CAAeC,MAAtC,EAA6CJ,MAAM,CAACG,OAAP,CAAeG,KAA5D,CAAb,CAAV;;AAH7B;AAGaC,UAAAA,WAHb;AAKaC,UAAAA,QALb,GAKwBD,WAAW,CAACE,IAAZ,CAAiBD,QALzC;AAAA;AAOO,iBAAMb,GAAG,CAAC;AACTe,YAAAA,IAAI,EAAEZ,YAAY,CAACa,oBADV;AAETR,YAAAA,OAAO,EAAE;AACLS,cAAAA,aAAa,EAACJ,QADT;AAELK,cAAAA,UAAU,EAAEL,QAAQ,CAACM;AAFhB;AAFA,WAAD,CAAT;;AAPP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBQb,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;;AAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAsBA;;;AACA,OAAO,SAAWT,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACiB,kBAAd,EAAkCvB,KAAlC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put,takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {superQuery} from '../../utils/JSAPI'\r\n\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * query(action) {\r\n    try{\r\n     console.log('action.payload.extent', action.payload.extent)\r\n       const queryResult =   yield call(superQuery, [action.payload.where, action.payload.extent,action.payload.layer]);\r\n       \r\n       const features = queryResult.data.features;\r\n       \r\n       yield put({\r\n        type: graphicTypes.SET_QUERY_RESULTS_RG,\r\n        payload: {\r\n            queryFeatures:features,\r\n            queryCount: features.length\r\n        }\r\n    });\r\n        \r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: graphic/query, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchQuery() {\r\n   \r\n    yield takeLatest(graphicTypes.QUERY_SUPERQUERY_S, query);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}