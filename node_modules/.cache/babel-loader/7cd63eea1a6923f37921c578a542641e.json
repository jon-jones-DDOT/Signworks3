{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { loadModules } from 'esri-loader';\n\nvar err = function err(e) {\n  console.log('an error occurred in JSAPI  ' + e.message);\n}; //currently not being used, needs a slight rewrite\n\n\nexport function getSupportById(args) {\n  var id = args[0];\n  var layer = args[1]; //needs a Promis here\n\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        Query = _ref2[0];\n\n    var query = new Query();\n    query.where = \"OBJECTID = \" + id;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    layer.queryFeatures(query).then(function (results) {\n      if (results.features.length > 0) {\n        return results.features[0];\n      } else {\n        alert('support was not retrieved');\n      }\n    }, err);\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n}\nexport function getSupportByExtent(args) {\n  return new Promise(function (resolve, reject) {\n    var extent = args[0];\n    var supportLayer = args[1];\n    loadModules([\"esri/request\"]).then(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          esriRequest = _ref4[0];\n\n      esriRequest(supportLayer + '/query', {\n        query: {\n          geometry: JSON.stringify(extent),\n          returnGeometry: true,\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\",\n          // format\n          outSR: 4326\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n      /*     let query = new Query();\r\n      query.geometry = extent;\r\n      query.outFields = [\"*\"];\r\n      query.returnGeometry = true;\r\n        supportLayer\r\n          .queryFeatures(query)\r\n          .then(resp => resolve(resp), error => reject(error)); */\n    });\n  });\n}\nexport function getRelatedSigns(args) {\n  return new Promise(function (resolve, reject) {\n    var feature = args[0];\n    var layer = args[1];\n    loadModules([\"esri/request\"]).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          esriRequest = _ref6[0];\n\n      esriRequest(layer + \"/query\", {\n        query: {\n          where: \"SUPPORTID='\" + feature.attributes.GLOBALID + \"'\",\n          orderByFields: \"SIGNORDER\",\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\" // format\n\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function getRelatedTimebands(args) {\n  var layer = args[1];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          esriRequest = _ref8[0];\n\n      esriRequest(layer + '/query', {\n        query: {\n          where: \"SIGNID='\" + args[0].attributes.GLOBALID + \"'\",\n          outFields: '*',\n          // attribute fields to return\n          token: null,\n          // token\n          f: \"json\" // format\n\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSignOrder(args) {\n  var features = args[0];\n  var layer = args[1];\n  var pureFeatures = [];\n\n  for (var i = 0; i < features.length; i++) {\n    pureFeatures.push(features[i].feature);\n  }\n\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 1),\n          esriRequest = _ref10[0];\n\n      esriRequest(layer + '/applyEdits', {\n        method: 'post',\n        query: {\n          f: \"json\",\n          // format\n          \"updates\": JSON.stringify(pureFeatures)\n        }\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSupport(args\n/*updateFeature, isNew, layer */\n) {\n  var updateFeature = args[0];\n  var isNew = args[1];\n  var layer = args[2];\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 1),\n          esriRequest = _ref12[0];\n\n      var set = null;\n\n      if (isNew) {\n        set = {\n          f: \"json\",\n          \"adds\": JSON.stringify([updateFeature])\n        };\n      } else {\n        set = {\n          f: \"json\",\n          \"updates\": JSON.stringify([updateFeature])\n        };\n      }\n\n      esriRequest(layer + '/applyEdits', {\n        method: 'post',\n        query: set\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      });\n    });\n  });\n}\nexport function saveSign(args) {\n  var updateSignFeature = args[0].sign;\n  var updateTimebands = args[0].editBands; //array\n\n  var newTimebands = args[0].newBands; //array    \n\n  var isNew = args[1];\n  var signLayer = args[2][0] + \"/applyEdits\";\n  var timebandLayer = args[2][1] + \"/applyEdits\";\n  var signSet = null;\n  var bandSet = null;\n\n  if (isNew) {\n    signSet = {\n      f: \"json\",\n      \"adds\": JSON.stringify([updateSignFeature])\n    };\n  } else {\n    signSet = {\n      f: \"json\",\n      \"updates\": JSON.stringify([updateSignFeature])\n    };\n  }\n\n  bandSet = {\n    f: \"json\",\n    \"adds\": JSON.stringify(newTimebands),\n    \"updates\": JSON.stringify([updateTimebands])\n  };\n  return new Promise(function (resolve, reject) {\n    loadModules([\"esri/request\"]).then(function (_ref13) {\n      var _ref14 = _slicedToArray(_ref13, 1),\n          esriRequest = _ref14[0];\n\n      console.log(\"got here\");\n      esriRequest((signLayer, {\n        method: 'post',\n        query: signSet\n      })).then(esriRequest(timebandLayer, {\n        method: 'post',\n        query: bandSet\n      }).then(function (resp) {\n        return resolve(resp);\n      }, function (error) {\n        return reject(error);\n      }), // then for second request\n      function (error) {\n        return reject(error);\n      } //error for intial request\n      ); // end of then for initial request\n    }); // end of then for loadModules\n  }); //end of promise\n} // end of function\n\nexport function project(args\n/*geom,spatRef */\n) {\n  var geom = args[0];\n  var spatRef = args[1];\n  loadModules([\"esri/geometry/projection\"]).then(function (_ref15) {\n    var _ref16 = _slicedToArray(_ref15, 1),\n        projection = _ref16[0];\n\n    var bob = projection.project(geom, spatRef);\n    return bob;\n  });\n}\nexport function pointToExtent(view, point, toleranceInPixel, callback) {\n  loadModules([\"esri/geometry/Extent\"]).then(function (_ref17) {\n    var _ref18 = _slicedToArray(_ref17, 1),\n        Extent = _ref18[0];\n\n    //calculate map coords represented per pixel\n    var pixelWidth = view.extent.width / view.width; //calculate map coords for tolerance in pixel\n\n    var toleraceInMapCoords = toleranceInPixel * pixelWidth; //calculate & return computed extent\n\n    callback(new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view.spatialReference));\n  });\n} //NON-ESRI DATA CALLS\n\nexport function getMUTCDS(_x) {\n  return _getMUTCDS.apply(this, arguments);\n}\n\nfunction _getMUTCDS() {\n  _getMUTCDS = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(args) {\n    var baseUrl, response, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd?code=\" + args[0];\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(baseUrl);\n\n          case 4:\n            response = _context.sent;\n\n            if (!response.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            results = _context.sent;\n            return _context.abrupt(\"return\", results);\n\n          case 10:\n            _context.next = 16;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            console.error('Something went wrong');\n            throw new Error('Bad stuff happened.');\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[1, 12]]);\n  }));\n  return _getMUTCDS.apply(this, arguments);\n}\n\nexport function getAllMUTCDS() {\n  return _getAllMUTCDS.apply(this, arguments);\n}\n\nfunction _getAllMUTCDS() {\n  _getAllMUTCDS = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var baseUrl, response, results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd\";\n            _context2.prev = 1;\n            _context2.next = 4;\n            return fetch(baseUrl);\n\n          case 4:\n            response = _context2.sent;\n\n            if (!response.ok) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 8;\n            return response.json();\n\n          case 8:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results);\n\n          case 10:\n            _context2.next = 16;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](1);\n            console.error('Something went wrong');\n            throw new Error('Bad stuff happened.');\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[1, 12]]);\n  }));\n  return _getAllMUTCDS.apply(this, arguments);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\JSAPI.js"],"names":["loadModules","err","e","console","log","message","getSupportById","args","id","layer","then","Query","query","where","outFields","returnGeometry","queryFeatures","results","features","length","alert","catch","error","getSupportByExtent","Promise","resolve","reject","extent","supportLayer","esriRequest","geometry","JSON","stringify","token","f","outSR","resp","getRelatedSigns","feature","attributes","GLOBALID","orderByFields","getRelatedTimebands","saveSignOrder","pureFeatures","i","push","method","saveSupport","updateFeature","isNew","set","saveSign","updateSignFeature","sign","updateTimebands","editBands","newTimebands","newBands","signLayer","timebandLayer","signSet","bandSet","project","geom","spatRef","projection","bob","pointToExtent","view","point","toleranceInPixel","callback","Extent","pixelWidth","width","toleraceInMapCoords","x","y","spatialReference","getMUTCDS","baseUrl","fetch","response","ok","json","Error","getAllMUTCDS"],"mappings":"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","sourcesContent":["import {loadModules} from 'esri-loader';\r\n\r\nconst err = (e) => {\r\n    console.log('an error occurred in JSAPI  ' + e.message)\r\n}\r\n\r\n//currently not being used, needs a slight rewrite\r\nexport function getSupportById(args) {\r\n    const id = args[0];\r\n    const layer = args[1];\r\n    //needs a Promis here\r\n\r\n    loadModules([\"esri/tasks/support/Query\"]).then(([Query]) => {\r\n        let query = new Query();\r\n        query.where = \"OBJECTID = \" + id;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n\r\n        layer\r\n            .queryFeatures(query)\r\n            .then(function (results) {\r\n\r\n                if (results.features.length > 0) {\r\n\r\n                    return results.features[0];\r\n                } else {\r\n                    alert('support was not retrieved')\r\n                }\r\n            }, err);\r\n\r\n    }).catch(err => {\r\n        // handle any errors\r\n        console.error(err);\r\n    });\r\n}\r\n\r\nexport function getSupportByExtent(args) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const extent = args[0];\r\n\r\n        const supportLayer = args[1];\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(supportLayer + '/query', {\r\n                query: {\r\n                    geometry: JSON.stringify(extent),\r\n                    returnGeometry: true,\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\", // format\r\n                    outSR: 4326\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n\r\n            /*     let query = new Query();\r\n            query.geometry = extent;\r\n            query.outFields = [\"*\"];\r\n            query.returnGeometry = true;\r\n\r\n            supportLayer\r\n                .queryFeatures(query)\r\n                .then(resp => resolve(resp), error => reject(error)); */\r\n        });\r\n\r\n    })\r\n}\r\n\r\nexport function getRelatedSigns(args) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const feature = args[0]\r\n\r\n        const layer = args[1]\r\n\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + \"/query\", {\r\n                query: {\r\n                    where: \"SUPPORTID='\" + feature.attributes.GLOBALID + \"'\",\r\n                    orderByFields: \"SIGNORDER\",\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\" // format\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n\r\n        });\r\n    })\r\n}\r\n\r\nexport function getRelatedTimebands(args) {\r\n    const layer = args[1]\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + '/query', {\r\n                query: {\r\n                    where: \"SIGNID='\" + args[0].attributes.GLOBALID + \"'\",\r\n\r\n                    outFields: '*', // attribute fields to return\r\n                    token: null, // token\r\n                    f: \"json\" // format\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error));\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function saveSignOrder(args) {\r\n    const features = args[0];\r\n    const layer = args[1];\r\n    let pureFeatures = [];\r\n    for (let i = 0; i < features.length; i++) {\r\n        pureFeatures.push(features[i].feature)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            esriRequest(layer + '/applyEdits', {\r\n                method: 'post',\r\n                query: {\r\n                    f: \"json\", // format\r\n                    \"updates\": JSON.stringify(pureFeatures)\r\n                }\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n        })\r\n    })\r\n\r\n}\r\n\r\nexport function saveSupport(args/*updateFeature, isNew, layer */) {\r\n    const updateFeature = args[0];\r\n\r\n    const isNew = args[1];\r\n    const layer = args[2];\r\n\r\n    return new Promise((resolve, reject) => {\r\n        loadModules([\"esri/request\"]).then(([esriRequest]) => {\r\n            let set = null;\r\n            if (isNew) {\r\n                set = {\r\n                    f: \"json\",\r\n                    \"adds\": JSON.stringify([updateFeature])\r\n                };\r\n            } else {\r\n                set = {\r\n                    f: \"json\",\r\n                    \"updates\": JSON.stringify([updateFeature])\r\n                }\r\n            }\r\n\r\n            esriRequest(layer + '/applyEdits', {\r\n                method: 'post',\r\n                query: set\r\n            }).then(resp => resolve(resp), error => reject(error))\r\n        })\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n    export function saveSign(args){\r\n\r\n        const updateSignFeature = args[0].sign;\r\n        const updateTimebands = args[0].editBands; //array\r\n        const newTimebands = args[0].newBands; //array    \r\n        const isNew = args[1];\r\n        const signLayer = args[2][0] + \"/applyEdits\";\r\n        const timebandLayer = args[2][1] + \"/applyEdits\";    \r\n        let signSet = null;\r\n        let bandSet = null;\r\n\r\n        if (isNew) {\r\n            signSet = {\r\n                f: \"json\",\r\n                \"adds\": JSON.stringify([updateSignFeature])\r\n            };\r\n        } else {\r\n            signSet = {\r\n                f: \"json\",\r\n                \"updates\": JSON.stringify([updateSignFeature])\r\n            };\r\n        }\r\n    \r\n        bandSet = {\r\n            f: \"json\",\r\n            \"adds\": JSON.stringify(newTimebands),\r\n            \"updates\": JSON.stringify([updateTimebands])\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            loadModules([ \r\n                \"esri/request\"\r\n            ]).then(([\r\n                esriRequest\r\n             ]) => {\r\n                 console.log(\"got here\")\r\n                 esriRequest((signLayer , {\r\n                    method: 'post',\r\n                    query: signSet\r\n                })).then(\r\n                    esriRequest(timebandLayer, {\r\n                        method: 'post',\r\n                        query: bandSet\r\n                    }).then(resp => resolve(resp), error => reject(error)), // then for second request\r\n                    error => reject(error) //error for intial request\r\n                 )// end of then for initial request\r\n             }) // end of then for loadModules\r\n        })  //end of promise\r\n\r\n    }// end of function\r\n    \r\n    \r\n\r\n\r\n    export function project(args/*geom,spatRef */) {\r\n        const geom = args[0]\r\n        const spatRef = args[1]\r\n        loadModules([\"esri/geometry/projection\"]).then(([projection]) => {\r\n\r\n            let bob = projection.project(geom, spatRef)\r\n\r\n            return bob\r\n        })\r\n\r\n    }\r\n\r\n    export function pointToExtent(view, point, toleranceInPixel, callback) {\r\n\r\n        loadModules([\"esri/geometry/Extent\"]).then(([Extent]) => {\r\n\r\n            //calculate map coords represented per pixel\r\n            let pixelWidth = view.extent.width / view.width;\r\n\r\n            //calculate map coords for tolerance in pixel\r\n            let toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n            //calculate & return computed extent\r\n\r\n            callback(new Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, view.spatialReference))\r\n\r\n        })\r\n\r\n    }\r\n\r\n    //NON-ESRI DATA CALLS\r\n\r\n    export async function getMUTCDS(args) {\r\n        const baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd?code=\" + args[0];\r\n\r\n        try {\r\n            const response = await fetch(baseUrl);\r\n            if (response.ok) {\r\n                const results = await response.json();\r\n                return results;\r\n            }\r\n        } catch (err) {\r\n            console.error('Something went wrong');\r\n            throw new Error('Bad stuff happened.');\r\n        }\r\n    }\r\n\r\n    export async function getAllMUTCDS() {\r\n        const baseUrl = \"http://ddotgisapp01/SignCatalog/api/mutcd\"\r\n\r\n        try {\r\n            const response = await fetch(baseUrl);\r\n            if (response.ok) {\r\n                const results = await response.json();\r\n                return results;\r\n            }\r\n        } catch (err) {\r\n            console.error('Something went wrong');\r\n            throw new Error('Bad stuff happened.');\r\n        }\r\n    }"]},"metadata":{},"sourceType":"module"}