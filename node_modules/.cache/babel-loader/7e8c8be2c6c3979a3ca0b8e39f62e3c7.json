{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\esri\\\\map\\\\MapView.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 100%;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n// or agreed to in writing, software distributed under the License is\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied. See the License for the specific language\n// governing permissions and limitations under the License.â€‹ NOTE This is a\n// \"special\" react component that does not strictly play by React's rules.\n//\n// Conceptually, this component creates a \"portal\" in React by closing its\n// render method off from updates (by simply rendering a div and never accepting\n// re-renders) then reconnecting itself to the React lifecycle by listening for\n// any new props (using componentWillReceiveProps) React\nimport React, { Component } from 'react'; // Redux\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../../redux/reducers/map';\nimport { actions as graphicActions } from '../../../redux/reducers/graphic';\nimport { mapModes } from '../../../redux/reducers/graphic'; // ESRI\n\nimport { loadModules } from 'esri-loader';\nimport { createView } from '../../../utils/esriHelper'; // Styled Components\n\nimport styled from 'styled-components';\nimport { pointToExtent } from '../../../utils/JSAPI';\nvar Container = styled.div(_templateObject()); // Variables\n\nvar containerID = \"map-view-container\";\n\nvar MapView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapView, _Component);\n\n  function MapView(props) {\n    var _this;\n\n    _classCallCheck(this, MapView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapView).call(this, props));\n    _this.selPoint = {\n      geometry: null\n    };\n    _this.markerLayer = null;\n    _this.queryMarkerLayer = null;\n    _this.featureLayer = null;\n    _this.conicLayer = null;\n    _this.symb = null;\n    _this.addSymb = null;\n    _this.geom = null;\n\n    _this.startup = function (mapConfig, node) {\n      var isScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      createView(mapConfig, node, isScene).then(function (response) {\n        _this.init(response);\n\n        _this.setupWidgetsAndLayers();\n\n        _this.finishedLoading();\n      }, function (error) {\n        console.error(\"maperr\", error);\n        window.setTimeout(function () {\n          _this.startup(mapConfig, node);\n        }, 1000);\n      });\n    };\n\n    _this.finishedLoading = function () {\n      // Update app state only after map and widgets are loaded\n      _this.props.onMapLoaded(_this.view.extent);\n    };\n\n    _this.getSelectedSupport = function (expandedMapPoint) {\n      // this line takes the buffered point and sends it  to the map reducer which\n      // punts it to the _setSupport saga which queries and gets the support, signs,\n      // timebands, etc and writes them to the store, where they dictate the Rightbar\n      // display.  Once the store changes the action picks up in willReceiveProps\n      _this.props.onMapClicked(expandedMapPoint, _this.props.config.featureURLs);\n    };\n\n    _this.mapClickHandler = function (evt) {\n      // this redux call moves info about the view into the store so that an extent\n      // around the point can be calculated I don't think it changes, (todo) see about\n      // moving it to map load or something\n      _this.props.setPointBuffer(_this.view.width, _this.view.extent.width, _this.view.spatialReference); // in any map app that's more than a viewer, the map click event is gonna be\n      // complicated so much so that I wrote this a month ago and it is already\n      // getting away from me so we shall comment.  The click event is first captured\n      // here then evaluated against the store to decide what it is supposed to do\n\n\n      switch (_this.props.graphic.mapClickMode) {\n        //the click is supposed to select an existing support on the map\n        case mapModes.SELECT_SUPPORT_MODE:\n          // this creates a small extent buffer around the mapPoint to aid in the select\n          // query its callback is getSelectedSupport, above\n          pointToExtent(_this.view.width, _this.view.extent.width, _this.view.spatialReference, evt.mapPoint, 12, _this.getSelectedSupport);\n          break;\n        //ok now we are in add support mode\n\n        case mapModes.ADD_SUPPORT_MODE:\n          // we should create a 'fake' feature out of the map click event\n          var newSupportFeature = {\n            atrributes: {},\n            geometry: {\n              x: evt.mapPoint.longitude,\n              y: evt.mapPoint.latitude,\n              type: 'point'\n            } //grabbing a local copy of the mapPoint.geom for the marker\n\n          };\n\n          _this.setState({\n            newSupportClickGeom: evt.mapPoint\n          });\n\n          _this.props.startStreetSmartViewer([newSupportFeature], _this.props.config.featureURLs, 4326, 2248, _this.props.graphic.viewWidth, _this.props.graphic.viewExtentWidth, _this.props.graphic.view_spatRef, true);\n\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    _this.mapMoveHandler = function (evt) {\n      _this.props.onMapChanged(_this.view.extent);\n    };\n\n    _this.init = function (response) {\n      _this.view = response.view;\n      _this.map = response.view.map;\n    };\n\n    _this.setupWidgetsAndLayers = function () {\n      loadModules(['esri/layers/FeatureLayer', \"esri/layers/GraphicsLayer\", 'esri/Graphic', \"esri/layers/TileLayer\", \"esri/Basemap\"]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 5),\n            FeatureLayer = _ref2[0],\n            GraphicsLayer = _ref2[1],\n            Graphic = _ref2[2],\n            TileLayer = _ref2[3],\n            Basemap = _ref2[4];\n\n        _this.featureLayer = new FeatureLayer({\n          url: _this.props.config.featureURLs.supports,\n          definitionExpression: \"SUPPORTSTATUS = 1\",\n          outFields: [\"*\"],\n          id: \"support\"\n        });\n        _this.queryMarkerLayer = new GraphicsLayer();\n        _this.markerLayer = new GraphicsLayer();\n        _this.conicLayer = new GraphicsLayer(); //     this.map.basemap = baseMap;\n\n        _this.map.addMany([_this.featureLayer, _this.queryMarkerLayer, _this.markerLayer, _this.conicLayer]);\n\n        _this.view.on(\"click\", _this.mapClickHandler);\n\n        _this.view.on(\"pointer-up\", _this.mapMoveHandler);\n\n        _this.view.on('mouse-wheel', _this.mapMoveHandler);\n\n        _this.symb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'magenta',\n            width: 3 // points\n\n          }\n        };\n        _this.addSymb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'green',\n            width: 3 // points\n\n          }\n        };\n        _this.selPoint = new Graphic({\n          geometry: null,\n          symbol: _this.symb\n        }); //   this.markerLayer.add(this.selPoint)\n      });\n    };\n\n    _this.state = {\n      newSupportClickGeom: null\n    };\n    return _this;\n  }\n\n  _createClass(MapView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(this.props.mapConfig, containerID, this.props.is3DScene);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      //view cone needs adjustment\n      if (this.props.graphic.coneGraphic !== nextProps.graphic.coneGraphic) {\n        console.log('update due to view cone');\n        return true;\n      }\n\n      if (this.props.graphic.queryFeatures.length > 0 && this.props.graphic.queryFeatures !== nextProps.graphic.queryFeatures) {\n        console.log('update because of query features');\n        return true;\n      }\n\n      if (this.props.graphic.needSupRefresh === true) {\n        console.log('update to refresh for new support feature added');\n        return true;\n      }\n\n      if (this.props.graphic.mapClickMode !== nextProps.graphic.mapClickMode) {\n        console.log('update because mapClickMode changed');\n        return true;\n      }\n\n      if (this.props.map.support !== nextProps.map.support) {\n        console.log('update because map.support changed');\n        return true;\n      } //removes superQuery results from view based on store\n\n\n      if (nextProps.graphic.showQuery !== this.props.graphic.showQuery) {\n        console.log('update because showQuery has changed');\n        return true;\n      }\n\n      if (nextProps.graphic.ssOverlayFeatures === null & this.conicLayer.graphics.length > 0) {\n        console.log('update because view cone needs to be removed');\n        return true;\n      }\n\n      console.log('did not update');\n      return false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this2 = this;\n\n      if (this.props.graphic.coneGraphic !== prevProps.graphic.coneGraphic) {\n        console.log('changing cone');\n        this.conicLayer.removeAll();\n        this.markerLayer.removeAll();\n        this.queryMarkerLayer.removeAll();\n        this.conicLayer.add(this.props.graphic.coneGraphic);\n        this.conicLayer.add(this.props.graphic.conePointGraphic);\n        return;\n      }\n\n      if (this.props.graphic.showQuery === false && this.queryMarkerLayer.graphics.length > 0) {\n        console.log('removing query markers');\n        this.queryMarkerLayer.removeAll();\n      }\n\n      if (this.props.graphic.ssOverlayFeatures === null && this.conicLayer.graphics.length > 0) {\n        console.log('removing conic graphics');\n        this.conicLayer.removeAll();\n      } //if there are query features in the store, this block displays them in the view\n\n\n      if (this.props.graphic.queryFeatures.length > 0) {\n        console.log('adding query features');\n\n        var graphics = _toConsumableArray(this.props.graphic.queryFeatures); // add symbols\n\n\n        var querySymb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()  NEVER TRUST AUTOCAST\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'blue',\n            width: 3 // points\n\n          }\n        }; //this just sets query results in the store to empty array\n\n        this.props.removeQueryResults(); // create graphics and add them to layer\n\n        loadModules([\"esri/Graphic\"]).then(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              Graphic = _ref4[0];\n\n          var gr = null;\n\n          for (var i = 0; i < graphics.length; i++) {\n            graphics[i].geometry.type = \"point\";\n            gr = new Graphic({\n              geometry: graphics[i].geometry,\n              symbol: querySymb\n            });\n\n            _this2.queryMarkerLayer.add(gr);\n          }\n        });\n      } //let's see if the support layer has been added to\n\n\n      if (this.props.graphic.needSupRefresh === true) {\n        console.log('refershing support layer on map after add');\n        this.featureLayer.refresh();\n      } // updates marker use nextProps or this.props for the map clicks?  if bugs come\n      // up , check this part\n\n\n      if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && !this.props.graphic.selSupportGeom) {\n        console.log('not even sure why');\n        return;\n      }\n\n      if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && this.props.map.support !== prevProps.map.support) {\n        console.log('changing selected support graphics in response to click');\n        this.selPoint.geometry = this.props.graphic.selSupportGeom;\n        this.selPoint.symbol = this.symb;\n        this.markerLayer.removeAll();\n        this.markerLayer.add(this.selPoint);\n        this.view.zoom = 20;\n        this.view.center = this.selPoint.geometry;\n      } else if (this.props.graphic.mapClickMode === mapModes.ADD_SUPPORT_MODE) {\n        //gonna try to keep the selected point in local state\n        console.log('changing add support target graphic because of click');\n        var addMark = {};\n        addMark.geometry = this.state.newSupportClickGeom;\n        addMark.symbol = this.addSymb;\n        this.markerLayer.removeAll();\n        this.markerLayer.add(addMark); //center, but no zoom      this.view.center = addMark.geometry\n      } else {\n        this.markerLayer.removeAll();\n      }\n\n      this.view.surface.style.cursor = this.props.graphic.cursor;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        ref: \"mapDiv\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      });\n    } // ESRI JSAPI\n\n  }]);\n\n  return MapView;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    config: state.config,\n    map: state.map,\n    graphic: state.graphic\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapView);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\esri\\map\\MapView.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","graphicActions","mapModes","loadModules","createView","styled","pointToExtent","Container","div","containerID","MapView","props","selPoint","geometry","markerLayer","queryMarkerLayer","featureLayer","conicLayer","symb","addSymb","geom","startup","mapConfig","node","isScene","then","response","init","setupWidgetsAndLayers","finishedLoading","error","console","window","setTimeout","onMapLoaded","view","extent","getSelectedSupport","expandedMapPoint","onMapClicked","config","featureURLs","mapClickHandler","evt","setPointBuffer","width","spatialReference","graphic","mapClickMode","SELECT_SUPPORT_MODE","mapPoint","ADD_SUPPORT_MODE","newSupportFeature","atrributes","x","longitude","y","latitude","type","setState","newSupportClickGeom","startStreetSmartViewer","viewWidth","viewExtentWidth","view_spatRef","mapMoveHandler","onMapChanged","map","FeatureLayer","GraphicsLayer","Graphic","TileLayer","Basemap","url","supports","definitionExpression","outFields","id","addMany","on","style","color","size","outline","symbol","state","is3DScene","nextProps","nextState","coneGraphic","log","queryFeatures","length","needSupRefresh","support","showQuery","ssOverlayFeatures","graphics","prevProps","prevState","snapshot","removeAll","add","conePointGraphic","querySymb","removeQueryResults","gr","i","refresh","selSupportGeom","zoom","center","addMark","surface","cursor","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\r\n// or agreed to in writing, software distributed under the License is\r\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied. See the License for the specific language\r\n// governing permissions and limitations under the License.â€‹ NOTE This is a\r\n// \"special\" react component that does not strictly play by React's rules.\r\n//\r\n// Conceptually, this component creates a \"portal\" in React by closing its\r\n// render method off from updates (by simply rendering a div and never accepting\r\n// re-renders) then reconnecting itself to the React lifecycle by listening for\r\n// any new props (using componentWillReceiveProps) React\r\nimport React, {Component} from 'react';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../../redux/reducers/map';\r\nimport {actions as graphicActions} from '../../../redux/reducers/graphic'\r\nimport {mapModes} from '../../../redux/reducers/graphic'\r\n// ESRI\r\nimport {loadModules} from 'esri-loader';\r\nimport {createView} from '../../../utils/esriHelper';\r\n\r\n// Styled Components\r\nimport styled from 'styled-components';\r\n\r\nimport {pointToExtent} from '../../../utils/JSAPI';\r\n\r\nconst Container = styled.div `\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\n// Variables\r\nconst containerID = \"map-view-container\";\r\n\r\nclass MapView extends Component {\r\n    selPoint = {\r\n        geometry: null\r\n    };\r\n    markerLayer = null;\r\n    queryMarkerLayer = null;\r\n    featureLayer = null;\r\n    conicLayer = null;\r\n    symb = null;\r\n    addSymb = null;\r\n    geom = null;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            newSupportClickGeom: null\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.startup(this.props.mapConfig, containerID, this.props.is3DScene);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n\r\n     \r\n        //view cone needs adjustment\r\n        if (this.props.graphic.coneGraphic !== nextProps.graphic.coneGraphic) {\r\n            console.log('update due to view cone');\r\n            return true;\r\n        }\r\n\r\n        if (this.props.graphic.queryFeatures.length > 0 && this.props.graphic.queryFeatures !== nextProps.graphic.queryFeatures) {\r\n            console.log('update because of query features');\r\n            return true;\r\n        }\r\n        if (this.props.graphic.needSupRefresh === true) {\r\n            console.log('update to refresh for new support feature added');\r\n            return true;\r\n        }\r\n\r\n        if (this.props.graphic.mapClickMode !== nextProps.graphic.mapClickMode) {\r\n            console.log('update because mapClickMode changed')\r\n            return true;\r\n        }\r\n\r\n        if (this.props.map.support !== nextProps.map.support) {\r\n            console.log('update because map.support changed');\r\n            return true\r\n        }\r\n        //removes superQuery results from view based on store\r\n        if (nextProps.graphic.showQuery !== this.props.graphic.showQuery) {\r\n            console.log('update because showQuery has changed');\r\n            return true;\r\n        }\r\n\r\n        if(nextProps.graphic.ssOverlayFeatures === null & this.conicLayer.graphics.length > 0){\r\n            console.log('update because view cone needs to be removed');\r\n            return true;\r\n        }\r\n        console.log('did not update');\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.graphic.coneGraphic !== prevProps.graphic.coneGraphic) {\r\n            console.log('changing cone');\r\n            this\r\n                .conicLayer\r\n                .removeAll();\r\n            this\r\n                .markerLayer\r\n                .removeAll();\r\n            this\r\n                .queryMarkerLayer\r\n                .removeAll();\r\n            this\r\n                .conicLayer\r\n                .add(this.props.graphic.coneGraphic)\r\n            this\r\n                .conicLayer\r\n                .add(this.props.graphic.conePointGraphic)\r\n            return;\r\n        }\r\n      \r\n        if (this.props.graphic.showQuery === false && this.queryMarkerLayer.graphics.length > 0) {\r\n            console.log('removing query markers')\r\n            this\r\n                .queryMarkerLayer\r\n                .removeAll();\r\n        }\r\n        if (this.props.graphic.ssOverlayFeatures === null && this.conicLayer.graphics.length > 0 ) {\r\n            console.log('removing conic graphics')\r\n            this\r\n                .conicLayer\r\n                .removeAll();\r\n        }\r\n\r\n        //if there are query features in the store, this block displays them in the view\r\n        if (this.props.graphic.queryFeatures.length > 0) {\r\n            console.log('adding query features');\r\n            const graphics = [...this.props.graphic.queryFeatures]\r\n            // add symbols\r\n            let querySymb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()  NEVER TRUST AUTOCAST\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'blue',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n\r\n            //this just sets query results in the store to empty array\r\n            this\r\n                .props\r\n                .removeQueryResults();\r\n            // create graphics and add them to layer\r\n            loadModules([\"esri/Graphic\"]).then(([Graphic]) => {\r\n                let gr = null;\r\n                for (let i = 0; i < graphics.length; i++) {\r\n                    graphics[i].geometry.type = \"point\"\r\n                    gr = new Graphic({geometry: graphics[i].geometry, symbol: querySymb})\r\n                    this\r\n                        .queryMarkerLayer\r\n                        .add(gr)\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n\r\n        //let's see if the support layer has been added to\r\n\r\n        if (this.props.graphic.needSupRefresh === true) {\r\n            console.log('refershing support layer on map after add')\r\n            this\r\n                .featureLayer\r\n                .refresh();\r\n        }\r\n\r\n        // updates marker use nextProps or this.props for the map clicks?  if bugs come\r\n        // up , check this part\r\n        if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && !this.props.graphic.selSupportGeom) {\r\n            console.log('not even sure why')\r\n            return;\r\n        }\r\n        if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && this.props.map.support !== prevProps.map.support) {\r\n\r\n            console.log('changing selected support graphics in response to click')\r\n            this.selPoint.geometry = this.props.graphic.selSupportGeom;\r\n            this.selPoint.symbol = this.symb;\r\n            this\r\n                .markerLayer\r\n                .removeAll();\r\n            this\r\n                .markerLayer\r\n                .add(this.selPoint)\r\n\r\n            this.view.zoom = 20\r\n            this.view.center = this.selPoint.geometry\r\n        } else if (this.props.graphic.mapClickMode === mapModes.ADD_SUPPORT_MODE) {\r\n            //gonna try to keep the selected point in local state\r\n            console.log('changing add support target graphic because of click')\r\n            let addMark = {};\r\n            addMark.geometry = this.state.newSupportClickGeom;\r\n            addMark.symbol = this.addSymb;\r\n            this\r\n                .markerLayer\r\n                .removeAll();\r\n            this\r\n                .markerLayer\r\n                .add(addMark)\r\n            //center, but no zoom      this.view.center = addMark.geometry\r\n        } else {\r\n            this\r\n                .markerLayer\r\n                .removeAll();\r\n        }\r\n        this.view.surface.style.cursor = this.props.graphic.cursor;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container ref=\"mapDiv\" id={containerID}></Container>\r\n        );\r\n    }\r\n\r\n    // ESRI JSAPI\r\n    startup = (mapConfig, node, isScene = false) => {\r\n        createView(mapConfig, node, isScene).then(response => {\r\n            this.init(response);\r\n\r\n            this.setupWidgetsAndLayers();\r\n            this.finishedLoading();\r\n\r\n        }, error => {\r\n            console.error(\"maperr\", error);\r\n            window.setTimeout(() => {\r\n                this.startup(mapConfig, node);\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    finishedLoading = () => {\r\n        // Update app state only after map and widgets are loaded\r\n        this\r\n            .props\r\n            .onMapLoaded(this.view.extent);\r\n    }\r\n\r\n    getSelectedSupport = (expandedMapPoint) => {\r\n        // this line takes the buffered point and sends it  to the map reducer which\r\n        // punts it to the _setSupport saga which queries and gets the support, signs,\r\n        // timebands, etc and writes them to the store, where they dictate the Rightbar\r\n        // display.  Once the store changes the action picks up in willReceiveProps\r\n\r\n        this\r\n            .props\r\n            .onMapClicked(expandedMapPoint, this.props.config.featureURLs);\r\n\r\n    }\r\n\r\n    mapClickHandler = (evt) => {\r\n        // this redux call moves info about the view into the store so that an extent\r\n        // around the point can be calculated I don't think it changes, (todo) see about\r\n        // moving it to map load or something\r\n        this\r\n            .props\r\n            .setPointBuffer(this.view.width, this.view.extent.width, this.view.spatialReference);\r\n\r\n        // in any map app that's more than a viewer, the map click event is gonna be\r\n        // complicated so much so that I wrote this a month ago and it is already\r\n        // getting away from me so we shall comment.  The click event is first captured\r\n        // here then evaluated against the store to decide what it is supposed to do\r\n        switch (this.props.graphic.mapClickMode) {\r\n                //the click is supposed to select an existing support on the map\r\n            case mapModes.SELECT_SUPPORT_MODE:\r\n\r\n                // this creates a small extent buffer around the mapPoint to aid in the select\r\n                // query its callback is getSelectedSupport, above\r\n                pointToExtent(this.view.width, this.view.extent.width, this.view.spatialReference, evt.mapPoint, 12, this.getSelectedSupport);\r\n                break;\r\n                //ok now we are in add support mode\r\n            case mapModes.ADD_SUPPORT_MODE:\r\n                // we should create a 'fake' feature out of the map click event\r\n\r\n                const newSupportFeature = {\r\n                    atrributes: {},\r\n                    geometry: {\r\n                        x: evt.mapPoint.longitude,\r\n                        y: evt.mapPoint.latitude,\r\n                        type: 'point'\r\n                    }\r\n                }\r\n                //grabbing a local copy of the mapPoint.geom for the marker\r\n\r\n                this.setState({newSupportClickGeom: evt.mapPoint});\r\n                this\r\n                    .props\r\n                    .startStreetSmartViewer([newSupportFeature], this.props.config.featureURLs, 4326, 2248, this.props.graphic.viewWidth, this.props.graphic.viewExtentWidth, this.props.graphic.view_spatRef, true);\r\n\r\n                break;\r\n            default:\r\n                return\r\n\r\n        }\r\n\r\n    }\r\n\r\n    mapMoveHandler = (evt) => {\r\n        this\r\n            .props\r\n            .onMapChanged(this.view.extent);\r\n    }\r\n\r\n    init = (response) => {\r\n        this.view = response.view\r\n        this.map = response.view.map;\r\n\r\n    }\r\n\r\n    setupWidgetsAndLayers = () => {\r\n        loadModules(['esri/layers/FeatureLayer', \"esri/layers/GraphicsLayer\", 'esri/Graphic', \"esri/layers/TileLayer\", \"esri/Basemap\"]).then(([FeatureLayer, GraphicsLayer, Graphic, TileLayer, Basemap]) => {\r\n\r\n            this.featureLayer = new FeatureLayer({url: this.props.config.featureURLs.supports, definitionExpression: \"SUPPORTSTATUS = 1\", outFields: [\"*\"], id: \"support\"});\r\n            this.queryMarkerLayer = new GraphicsLayer();\r\n            this.markerLayer = new GraphicsLayer();\r\n            this.conicLayer = new GraphicsLayer();\r\n\r\n            //     this.map.basemap = baseMap;\r\n            this\r\n                .map\r\n                .addMany([this.featureLayer, this.queryMarkerLayer, this.markerLayer, this.conicLayer]);\r\n            this\r\n                .view\r\n                .on(\"click\", this.mapClickHandler);\r\n\r\n            this\r\n                .view\r\n                .on(\"pointer-up\", this.mapMoveHandler);\r\n            this\r\n                .view\r\n                .on('mouse-wheel', this.mapMoveHandler)\r\n\r\n            this.symb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'magenta',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n            this.addSymb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'green',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n\r\n            this.selPoint = new Graphic({geometry: null, symbol: this.symb})\r\n\r\n            //   this.markerLayer.add(this.selPoint)\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({config: state.config, map: state.map, graphic: state.graphic});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MapView);\r\n"]},"metadata":{},"sourceType":"module"}