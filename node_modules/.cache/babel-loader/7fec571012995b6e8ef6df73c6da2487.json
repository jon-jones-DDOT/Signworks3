{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, sel2, selPtFeatureSet, gjPt, localExtent, features, neighborFeatures, i, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          sel2 = _objectSpread({}, action.payload.sel[0]);\n          sel2.geometry = projectResult[0];\n          _context.next = 8;\n          return call(createFeatureSet, [sel2]);\n\n        case 8:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          _context.next = 12;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\n          ]);\n\n        case 12:\n          localExtent = _context.sent;\n          console.log('localExtent :', localExtent); //get neighboring points from the selected support\n\n          _context.next = 16;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 16:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          for (i = 0; i < neighborFeatures.length; i++) {\n            neighborFeatures[i].geometry.type = \"point\";\n            neighborFeatures[i].geometry.spatialReference = {\n              wkid: 2248\n            };\n          }\n\n          _context.next = 21;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 21:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 25;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\n            payload: {\n              leftVisible: true,\n              editMode: action.payload.editMode,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors\n            }\n          });\n\n        case 25:\n          _context.next = 30;\n          break;\n\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 27]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","payload","sel","geometry","layers","geometryService","inSR","outSR","projectResult","sel2","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","console","log","supports","features","neighborFeatures","data","i","length","type","spatialReference","wkid","neighborFeatureSet","gjNeighbors","SHOW_STREETSMART_VIEWER_RG","leftVisible","editMode","ssInputGeom","ssgeoJSONselPoint","ssOverlay","START_STREETSMART_VIEWER_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\nimport {faWindows} from '@fortawesome/free-brands-svg-icons';\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\n\r\n        const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        let sel2 = {\r\n            ...action.payload.sel[0]\r\n        }\r\n        sel2.geometry = projectResult[0];\r\n\r\n        const selPtFeatureSet = yield call(createFeatureSet, [sel2])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\r\n\r\n        ])\r\n\r\n        console.log('localExtent :', localExtent);\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\n        //make them a featureset because the converter is picky like that\r\n\r\n        for (let i = 0; i < neighborFeatures.length; i++) {\r\n            neighborFeatures[i].geometry.type = \"point\";\r\n            neighborFeatures[i].geometry.spatialReference = {\r\n                wkid: 2248\r\n            }\r\n        }\r\n        const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n\r\n        //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\r\n            payload: {\r\n                leftVisible: true,\r\n                editMode: action.payload.editMode,\r\n                ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint: gjPt,\r\n                ssOverlay: gjNeighbors\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}