{"ast":null,"code":"var React = require('react');\n\nvar TypeaheadOption = require('./option');\n\nvar classNames = require('classnames');\n\nvar createReactClass = require('create-react-class');\n\nvar PropTypes = require('prop-types');\n/**\n * Container for the options rendered as part of the autocompletion process\n * of the typeahead\n */\n\n\nvar TypeaheadSelector = createReactClass({\n  displayName: 'TypeaheadSelector',\n  propTypes: {\n    options: PropTypes.array,\n    allowCustomValues: PropTypes.number,\n    customClasses: PropTypes.object,\n    customValue: PropTypes.string,\n    selectionIndex: PropTypes.number,\n    onOptionSelected: PropTypes.func,\n    displayOption: PropTypes.func.isRequired,\n    defaultClassNames: PropTypes.bool,\n    areResultsTruncated: PropTypes.bool,\n    resultsTruncatedMessage: PropTypes.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      selectionIndex: null,\n      customClasses: {},\n      allowCustomValues: 0,\n      customValue: null,\n      onOptionSelected: function onOptionSelected(option) {},\n      defaultClassNames: true\n    };\n  },\n  render: function render() {\n    // Don't render if there are no options to display\n    if (!this.props.options.length && this.props.allowCustomValues <= 0) {\n      return false;\n    }\n\n    var classes = {\n      \"typeahead-selector\": this.props.defaultClassNames\n    };\n    classes[this.props.customClasses.results] = this.props.customClasses.results;\n    var classList = classNames(classes); // CustomValue should be added to top of results list with different class name\n\n    var customValue = null;\n    var customValueOffset = 0;\n\n    if (this.props.customValue !== null) {\n      customValueOffset++;\n      customValue = React.createElement(TypeaheadOption, {\n        ref: this.props.customValue,\n        key: this.props.customValue,\n        hover: this.props.selectionIndex === 0,\n        customClasses: this.props.customClasses,\n        customValue: this.props.customValue,\n        onClick: this._onClick.bind(this, this.props.customValue)\n      }, this.props.customValue);\n    }\n\n    var results = this.props.options.map(function (result, i) {\n      var displayString = this.props.displayOption(result, i);\n      var uniqueKey = displayString + '_' + i;\n      return React.createElement(TypeaheadOption, {\n        ref: uniqueKey,\n        key: uniqueKey,\n        hover: this.props.selectionIndex === i + customValueOffset,\n        customClasses: this.props.customClasses,\n        onClick: this._onClick.bind(this, result)\n      }, displayString);\n    }, this);\n\n    if (this.props.areResultsTruncated && this.props.resultsTruncatedMessage !== null) {\n      var resultsTruncatedClasses = {\n        \"results-truncated\": this.props.defaultClassNames\n      };\n      resultsTruncatedClasses[this.props.customClasses.resultsTruncated] = this.props.customClasses.resultsTruncated;\n      var resultsTruncatedClassList = classNames(resultsTruncatedClasses);\n      results.push(React.createElement('li', {\n        key: 'results-truncated',\n        className: resultsTruncatedClassList\n      }, this.props.resultsTruncatedMessage));\n    }\n\n    return React.createElement('ul', {\n      className: classList\n    }, customValue, results);\n  },\n  _onClick: function _onClick(result, event) {\n    return this.props.onOptionSelected(result, event);\n  }\n});\nmodule.exports = TypeaheadSelector;","map":null,"metadata":{},"sourceType":"script"}