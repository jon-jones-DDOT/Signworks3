{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent, getRelatedSigns } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var features, support, signsREsp, signs;\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\n\n        case 3:\n          features = _context.sent;\n          support = {\n            selSupport: features.features[0]\n          };\n          _context.next = 7;\n          return call(getRelatedSigns, [support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 7:\n          signsREsp = _context.sent;\n          signs = {\n            signs: signsREsp.data.features\n          }; // Put config in store\n\n          _context.next = 11;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 11:\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 13]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_map.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","getRelatedSigns","action","payload","geom","layer","features","support","selSupport","signsREsp","signs","data","type","SET_SELECTED_SUPPORT","console","log","MAP_CLICKED"],"mappings":";;;;yBAMWA,gB;;;yBA8BOC,W;;AApClB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,kBAAR,EAA4BC,eAA5B,QAAkD,mBAAlD,C,CAEA;;AAEA,SAAWR,gBAAX,CAA4BS,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKyB,iBAAMP,IAAI,CAACK,kBAAD,EAAqB,CAACE,MAAM,CAACC,OAAP,CAAeC,IAAhB,EAAsBF,MAAM,CAACC,OAAP,CAAeE,KAArC,CAArB,CAAV;;AALzB;AAKcC,UAAAA,QALd;AAMcC,UAAAA,OANd,GAMwB;AACZC,YAAAA,UAAU,EAAEF,QAAQ,CAACA,QAAT,CAAkB,CAAlB;AADA,WANxB;AAAA;AAS0B,iBAAMX,IAAI,CAACM,eAAD,EAAkB,CAC1CM,OAD0C,EACjC,qFACD,YAFkC,CAAlB,CAAV;;AAT1B;AAScE,UAAAA,SATd;AAacC,UAAAA,KAbd,GAasB;AAACA,YAAAA,KAAK,EAACD,SAAS,CAACE,IAAV,CAAeL;AAAtB,WAbtB,EAeQ;;AAfR;AAgBQ,iBAAMV,GAAG,CAAC;AACNgB,YAAAA,IAAI,EAAEb,QAAQ,CAACc,oBADT;AAENV,YAAAA,OAAO,EAAE;AACLI,cAAAA,OAAO,EAAPA,OADK;AAELG,cAAAA,KAAK,EAALA;AAFK;AAFH,WAAD,CAAT;;AAhBR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBQI,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AAzBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA6BA;;;AACA,OAAO,SAAWrB,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,UAAU,CAACE,QAAQ,CAACiB,WAAV,EAAuBvB,gBAAvB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent, getRelatedSigns} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n\r\n        // call API to fetch config\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n        const support = {\r\n            selSupport: features.features[0]\r\n        };\r\n        const signsREsp = yield call(getRelatedSigns, [\r\n            support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                    'er/1/query'\r\n        ])\r\n        const signs = {signs:signsREsp.data.features};\r\n\r\n        // Put config in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}