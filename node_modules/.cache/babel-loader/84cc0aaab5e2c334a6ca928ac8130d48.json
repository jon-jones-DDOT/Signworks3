{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, sel2, selPtFeatureSet, gjPt, localExtent, where, features, neighborFeatures, i, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          sel2 = _objectSpread({}, action.payload.sel[0]);\n          sel2.geometry = projectResult[0];\n          _context.next = 8;\n          return call(createFeatureSet, [sel2]);\n\n        case 8:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          _context.next = 12;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\n          ]);\n\n        case 12:\n          localExtent = _context.sent;\n          //get neighboring points from the selected support\n          console.log('action.payload.retired :', action.payload.retired);\n          where = null;\n          _context.t0 = action.payload.retired;\n          _context.next = _context.t0 === 0 ? 18 : _context.t0 === 1 ? 20 : _context.t0 === 2 ? 22 : _context.t0 === 3 ? 24 : 26;\n          break;\n\n        case 18:\n          where = \"SUPPORTSTATUS = 1\";\n          return _context.abrupt(\"return\");\n\n        case 20:\n          where = \"SUPPORTSTATUS = 1 OR SUPPORTSTATUS = 5\";\n          return _context.abrupt(\"return\");\n\n        case 22:\n          where = \"SUPPORTSTATUS = 5\";\n          return _context.abrupt(\"return\");\n\n        case 24:\n          where = \"SUPPORTSTATUS = 627\";\n          return _context.abrupt(\"return\");\n\n        case 26:\n          return _context.abrupt(\"return\");\n\n        case 27:\n          console.log('where', where);\n          _context.next = 30;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 30:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          for (i = 0; i < neighborFeatures.length; i++) {\n            neighborFeatures[i].geometry.type = \"point\";\n            neighborFeatures[i].geometry.spatialReference = {\n              wkid: 2248\n            };\n          }\n\n          _context.next = 35;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 35:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 39;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\n            payload: {\n              leftVisible: true,\n              leftMode: 'StreetSmart',\n              editMode: action.payload.editMode,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors,\n              leftKey: action.payload.leftKey\n            }\n          });\n\n        case 39:\n          _context.next = 44;\n          break;\n\n        case 41:\n          _context.prev = 41;\n          _context.t1 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t1);\n\n        case 44:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 41]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","action","payload","sel","geometry","layers","geometryService","inSR","outSR","projectResult","sel2","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","console","log","retired","where","supports","features","neighborFeatures","data","i","length","type","spatialReference","wkid","neighborFeatureSet","gjNeighbors","SHOW_STREETSMART_VIEWER_RG","leftVisible","leftMode","editMode","ssInputGeom","ssgeoJSONselPoint","ssOverlay","leftKey","START_STREETSMART_VIEWER_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\n\r\n        const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        let sel2 = {\r\n            ...action.payload.sel[0]\r\n        }\r\n        sel2.geometry = projectResult[0];\r\n        const selPtFeatureSet = yield call(createFeatureSet, [sel2])\r\n\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\r\n\r\n        ])\r\n\r\n        //get neighboring points from the selected support\r\n        console.log('action.payload.retired :', action.payload.retired);\r\n        let where = null;\r\n        switch (action.payload.retired) {\r\n            case 0:\r\n                where = \"SUPPORTSTATUS = 1\"\r\n                return;\r\n            case 1:\r\n                where = \"SUPPORTSTATUS = 1 OR SUPPORTSTATUS = 5\";\r\n                return;\r\n            case 2:\r\n                where = \"SUPPORTSTATUS = 5\";\r\n                return;\r\n            case 3:\r\n                where = \"SUPPORTSTATUS = 627\";\r\n                return;\r\n\r\n            default:\r\n                return;\r\n\r\n        }\r\nconsole.log('where', where)\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n\r\n        const neighborFeatures = features.data.features;\r\n        //make them a featureset because the converter is picky like that\r\n\r\n        for (let i = 0; i < neighborFeatures.length; i++) {\r\n            neighborFeatures[i].geometry.type = \"point\";\r\n            neighborFeatures[i].geometry.spatialReference = {\r\n                wkid: 2248\r\n            }\r\n        }\r\n        const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n\r\n        //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\r\n            payload: {\r\n                leftVisible: true,\r\n                leftMode: 'StreetSmart',\r\n                editMode: action.payload.editMode,\r\n                ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint: gjPt,\r\n                ssOverlay: gjNeighbors,\r\n                leftKey: action.payload.leftKey\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}