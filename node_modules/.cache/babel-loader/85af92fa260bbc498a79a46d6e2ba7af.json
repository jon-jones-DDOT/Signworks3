{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n// Copyright 2019 Esri\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.â€‹\n// Esri Loader\nimport { loadModules } from 'esri-loader'; // Esri Helper Functions\n\nimport { bootstrapJSAPI } from '../../../utils/esriHelper';\n/**\n * Class to help with Authentication\n * This is a non-rendered class that is usually attached to the window\n * @type {Class}\n */\n\nvar AuthManager = function AuthManager(appId, _portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\n  var _this = this;\n\n  _classCallCheck(this, AuthManager);\n\n  this.startup = function () {\n    return new Promise(function (resolve, reject) {\n      bootstrapJSAPI(_this.portalUrl, _this.jsapiUrl, _this.jsapiV4).then(function (success) {\n        // Check if we need to authenticate\n        if (!_this.portalUrl) {\n          return resolve();\n        } // If we need authentication then set up IDManager\n\n\n        _this.createIDManager().then(resolve());\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.createIDManager = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/identity/IdentityManager', 'esri/identity/OAuthInfo']).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            esriId = _ref2[0],\n            OAuthInfo = _ref2[1];\n\n        _this.idManager = esriId; //   const esriAuthID = localStorage.getItem('esri_auth_id');\n\n        _this.idManager.useSignInPage = !_this.loginWithPopup;\n        _this.oAuthInfo = new OAuthInfo({\n          appId: _this.appId,\n          portalUrl: _this.portalUrl,\n          popup: _this.loginWithPopup\n        });\n\n        _this.idManager.registerOAuthInfos([_this.oAuthInfo]);\n\n        resolve();\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.login = function () {\n    var portalUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.portalUrl;\n    return new Promise(function (resolve, reject) {\n      _this.checkLogin().then(function (success) {\n        _this.getUser().then(resolve, reject);\n      }, function (failed) {\n        var persistObj = _this.checkPersist();\n\n        if (!_this.idManager && persistObj && persistObj.portalUrl) {\n          // if there is persistent login info grab that portal url\n          _this.portalUrl = persistObj.portalUrl;\n        } else if (portalUrl) {\n          // if a portal url was passed in as a param grab that\n          _this.portalUrl = portalUrl;\n        } else {\n          // no portal, we don't need to login and can return\n          return resolve();\n        } // use the aquired portal url to setup a new ID Manager and login\n\n\n        _this.createIDManager().then(function () {\n          _this.doLogin().then(function (user) {\n            return resolve(user);\n          }, function (error) {\n            return reject(error);\n          });\n        });\n      });\n    });\n  };\n\n  this.checkLogin = function () {\n    return new Promise(function (resolve, reject) {\n      // Reject this if there is no portal URL in the config file\n      if (!_this.portalUrl) {\n        return reject();\n      }\n\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.checkSignInStatus(sharingUrl).then(function (credential) {\n        _this.persistAuth();\n\n        _this.getUser().then(resolve, reject);\n      }).otherwise(function (e) {\n        reject('User is not logged in');\n      });\n    });\n  };\n\n  this.doLogin = function () {\n    // we can store the portal url here so the browser rememebers us on refresh\n    _this.persistAuth();\n\n    return new Promise(function (resolve, reject) {\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.getCredential(sharingUrl, {\n        oAuthPopupConfirmation: false\n      }).then(function (credential) {\n        _this.getUser().then(resolve, reject);\n      }).otherwise(reject);\n    });\n  };\n\n  this.getUser = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/portal/Portal']).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            Portal = _ref4[0];\n\n        var portal = new Portal({\n          url: _this.portalUrl,\n          authMode: 'immediate'\n        });\n        portal.load().then(function () {\n          _this.user = portal.user;\n\n          _this.user.fetchGroups().then(resolve(_this.user)).otherwise(reject);\n        }).otherwise(reject);\n      });\n    });\n  };\n\n  this.persistAuth = function () {\n    // persist auth to a cookie for cross-page goodness\n    var json = _this.idManager.toJSON();\n\n    localStorage.setItem('esri_auth_id', JSON.stringify(json));\n  };\n\n  this.checkPersist = function () {\n    var persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\n\n    if (persistObj && persistObj.oAuthInfos) {\n      return persistObj.oAuthInfos[0];\n    }\n\n    return null;\n  };\n\n  this.logout = function () {\n    loadModules(['dojo/cookie']).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          cookie = _ref6[0];\n\n      cookie('esri_auth', '{esri: \"logout\"}', {\n        expire: -1,\n        expires: -1,\n        path: '/'\n      });\n      localStorage.removeItem('esri_auth_id');\n\n      _this.idManager.destroyCredentials();\n    });\n  };\n\n  this.appId = appId;\n  this.portalUrl = _portalUrl;\n  this.jsapiUrl = jsapiUrl;\n  this.jsapiV4 = jsapiV4;\n  this.loginWithPopup = loginWithPopup;\n}\n/**\n * Use this to start up the JS API via the AuthManager class\n * @return {Promise} Resolves if there is no portal url, which means no login required\n *                   or there is a portal url and the IdentityManager is setup correctly\n */\n;\n\nexport { AuthManager as default };","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\esri\\auth\\AuthManager.js"],"names":["loadModules","bootstrapJSAPI","AuthManager","appId","portalUrl","jsapiUrl","jsapiV4","loginWithPopup","startup","Promise","resolve","reject","then","success","createIDManager","catch","err","esriId","OAuthInfo","idManager","useSignInPage","oAuthInfo","popup","registerOAuthInfos","login","checkLogin","getUser","failed","persistObj","checkPersist","doLogin","user","error","sharingUrl","checkSignInStatus","credential","persistAuth","otherwise","e","getCredential","oAuthPopupConfirmation","Portal","portal","url","authMode","load","fetchGroups","json","toJSON","localStorage","setItem","JSON","stringify","parse","getItem","oAuthInfos","logout","cookie","expire","expires","path","removeItem","destroyCredentials"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.â€‹\n\n// Esri Loader\nimport { loadModules } from 'esri-loader';\n// Esri Helper Functions\nimport { bootstrapJSAPI } from '../../../utils/esriHelper';\n\n/**\n * Class to help with Authentication\n * This is a non-rendered class that is usually attached to the window\n * @type {Class}\n */\nexport default class AuthManager {\n  constructor(appId, portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\n    this.appId = appId;\n    this.portalUrl = portalUrl;\n\n  this.jsapiUrl = jsapiUrl;\n    this.jsapiV4 = jsapiV4;\n    this.loginWithPopup = loginWithPopup;\n  }\n\n  /**\n   * Use this to start up the JS API via the AuthManager class\n   * @return {Promise} Resolves if there is no portal url, which means no login required\n   *                   or there is a portal url and the IdentityManager is setup correctly\n   */\n  startup = () => {\n    \n    return new Promise((resolve, reject) => {\n      bootstrapJSAPI(this.portalUrl, this.jsapiUrl, this.jsapiV4)\n        .then(success => {\n          // Check if we need to authenticate\n          if (!this.portalUrl) {\n          \n            return resolve();\n          }\n          // If we need authentication then set up IDManager\n          this.createIDManager().then(resolve());\n        })\n        .catch(err => {\n          reject();\n        });\n    });\n  };\n\n  /**\n   * Method to create Esri JS API IdentityManager\n   * This is called in startup but can be called independently if needed\n   * @return {Promise} Resolves after IdentityManager is setup\n   */\n  createIDManager = () => {\n    return new Promise((resolve, reject) => {\n      loadModules([\n        'esri/identity/IdentityManager',\n        'esri/identity/OAuthInfo'\n      ]).then(([esriId, OAuthInfo]) => {\n        this.idManager = esriId;\n\n     //   const esriAuthID = localStorage.getItem('esri_auth_id');\n       \n        \n          this.idManager.useSignInPage = !this.loginWithPopup;\n          this.oAuthInfo = new OAuthInfo({\n            appId: this.appId,\n            portalUrl: this.portalUrl,\n            popup: this.loginWithPopup\n          });\n          this.idManager.registerOAuthInfos([this.oAuthInfo]);\n        \n\n        resolve();\n      })\n      .catch(err => {\n        reject();\n      });\n    })\n  };\n\n  /**\n   * Main login function\n   * This will see if the user has persistent login info\n   * and if not it will run the login method\n   * @param  {string}   [portalUrl=this.portalUrl]   will default to config portalUrl\n   * @return {Promise}                               will resolve if user is logged in or\n   *                                                 conditions are met on portal url\n   */\n  login = (portalUrl = this.portalUrl) => {\n    return new Promise((resolve, reject) => {\n      this.checkLogin().then(\n        success => {\n          this.getUser().then(resolve, reject);\n        },\n        failed => {\n          let persistObj = this.checkPersist();\n\n          if (!this.idManager && persistObj && persistObj.portalUrl) {\n            // if there is persistent login info grab that portal url\n            this.portalUrl = persistObj.portalUrl;\n          } else if (portalUrl) {\n            // if a portal url was passed in as a param grab that\n            this.portalUrl = portalUrl;\n          } else {\n            // no portal, we don't need to login and can return\n            return resolve();\n          }\n\n          // use the aquired portal url to setup a new ID Manager and login\n          this.createIDManager().then(() => {\n            this.doLogin().then(user => resolve(user), error => reject(error));\n          });\n        }\n      );\n    });\n  };\n\n  /**\n   * Check if user is logged in already via persistent login info\n   * @return {Promise} will reject if no portal url or there is a login/user info error\n   */\n  checkLogin = () => {\n    return new Promise((resolve, reject) => {\n      // Reject this if there is no portal URL in the config file\n      if (!this.portalUrl) {\n        return reject();\n      }\n\n      const sharingUrl = this.portalUrl + '/sharing';\n\n      this.idManager\n        .checkSignInStatus(sharingUrl)\n        .then(credential => {\n          this.persistAuth();\n          this.getUser().then(resolve, reject);\n        })\n        .otherwise(e => {\n          reject('User is not logged in');\n        });\n    });\n  };\n\n  /**\n   * Method for login process\n   * @return {Promise} Resolves if we user info from login\n   */\n  doLogin = () => {\n    // we can store the portal url here so the browser rememebers us on refresh\n    this.persistAuth();\n\n    return new Promise((resolve, reject) => {\n      const sharingUrl = this.portalUrl + '/sharing';\n\n      this.idManager\n        .getCredential(sharingUrl, { oAuthPopupConfirmation: false })\n        .then(credential => {\n          this.getUser().then(resolve, reject);\n        })\n        .otherwise(reject);\n    });\n  };\n\n  /**\n   * Get user info, part of login process\n   * @return {Promise} Resolves once we get user info\n   */\n  getUser = () => {\n    return new Promise((resolve, reject) => {\n      loadModules(['esri/portal/Portal']).then(([Portal]) => {\n        let portal = new Portal({\n          url: this.portalUrl,\n          authMode: 'immediate'\n        });\n        portal\n          .load()\n          .then(() => {\n            this.user = portal.user;\n            this.user\n              .fetchGroups()\n              .then(\n                resolve(this.user)\n              )\n              .otherwise(reject);\n          })\n          .otherwise(reject);\n      });\n    });\n  };\n\n  /**\n   * Method to store the login info\n   */\n  persistAuth = () => {\n    // persist auth to a cookie for cross-page goodness\n    const json = this.idManager.toJSON();\n    localStorage.setItem('esri_auth_id', JSON.stringify(json));\n  };\n\n  /**\n   * Get method for the stored login info\n   * @return {Object} The login info object, can be null\n   */\n  checkPersist = () => {\n    let persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\n\n    if (persistObj && persistObj.oAuthInfos) {\n      return persistObj.oAuthInfos[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Method for logging out\n   */\n  logout = () => {\n    loadModules(['dojo/cookie']).then(([cookie]) => {\n      cookie('esri_auth', '{esri: \"logout\"}', {\n        expire: -1,\n        expires: -1,\n        path: '/'\n      });\n      localStorage.removeItem('esri_auth_id');\n      this.idManager.destroyCredentials();\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}