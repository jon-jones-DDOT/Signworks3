{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, selPtFeatureSet, gjPt, localExtent, features, neighborFeatures, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // this ball of wax has a ridiculous number of async calls, I am gonna try to do\n          // them all here in the saga\n          console.log('action', action);\n          _context.next = 4;\n          return call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 4:\n          projectResult = _context.sent;\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          console.log('projectResult :', projectResult);\n          _context.next = 8;\n          return call(createFeatureSet, [projectResult]);\n\n        case 8:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet);\n          console.log('gjPt :', gjPt); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          _context.next = 13;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\n          ]);\n\n        case 13:\n          localExtent = _context.sent;\n          _context.next = 16;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 16:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          _context.next = 20;\n          return call(createFeatureSet, [neighborFeatures, 2248]);\n\n        case 20:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 24;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\n            payload: {\n              leftVisible: true,\n              ssEdit: false,\n              ssView: true,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors\n            }\n          });\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 26]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","console","log","payload","coords","layers","geometryService","inSR","outSR","projectResult","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","supports","features","neighborFeatures","data","neighborFeatureSet","gjNeighbors","type","SHOW_STREETSMART_VIEWER","leftVisible","ssEdit","ssView","ssInputGeom","ssgeoJSONselPoint","ssOverlay","START_STREETSMART_VIEWER"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\nimport {faWindows} from '@fortawesome/free-brands-svg-icons';\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\nconsole.log('action', action)\r\n        const projectResult = yield call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\r\n        \r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\nconsole.log('projectResult :', projectResult);\r\n        \r\n        const selPtFeatureSet = yield call(createFeatureSet, [projectResult])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n            console.log('gjPt :', gjPt);\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\r\n\r\n        ])\r\n\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\n//make them a featureset because the converter is picky like that\r\n\r\n      const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures,2248])\r\n\r\n     //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\r\n            payload: {\r\n                leftVisible: true,\r\n                ssEdit: false,\r\n                ssView: true,\r\n                ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint:gjPt,\r\n                ssOverlay:gjNeighbors\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}