{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n// Copyright 2019 Esri\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//     http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.â€‹\n// Esri Loader\nimport * as esriLoader from 'esri-loader';\n/**\r\n * Load in the Esri JSAPI using parameters from the app's configuration\r\n * @param  {string}   portalUrl  Portal URL from public/config\r\n * @param  {string}   jsapiUrl   JSAPI URL from public/config\r\n * @param  {bool}     jsapiV4    Flag for Esri JSAPI 4.x\r\n * @return {Promise}             Returns a promise for async\r\n */\n\nexport function bootstrapJSAPI(portalUrl, jsapiUrl, jsapiV4) {\n  return new Promise(function (resolve, reject) {\n    if (esriLoader.isLoaded()) {\n      resolve();\n      return;\n    }\n\n    var options = {\n      url: jsapiUrl\n    };\n    esriLoader.loadScript(options).then(function () {\n      initApi(portalUrl, jsapiV4).then(function (success) {\n        return resolve();\n      }, function (error) {\n        return reject(error);\n      });\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nfunction initApi(portalUrl, jsapiV4) {\n  return new Promise(function (resolve, reject) {\n    if (jsapiV4 && portalUrl) {\n      esriLoader.loadModules(['esri/identity/IdentityManager']).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            IdentityManager = _ref2[0];\n\n        resolve();\n      });\n    } else if (!jsapiV4 && portalUrl) {\n      esriLoader.loadModules(['esri/IdentityManager', 'esri/arcgis/utils']).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            IdentityManager = _ref4[0],\n            arcgisUtils = _ref4[1];\n\n        arcgisUtils.arcgisUrl = \"\".concat(portalUrl, \"/sharing/rest/content/items\");\n        resolve();\n      });\n    } else if (!portalUrl) {\n      resolve();\n    }\n  });\n}\n\nexport function createView(mapConfig, node) {\n  var isScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return new Promise(function (resolve, reject) {\n    if (!esriLoader.isLoaded()) {\n      reject('JSAPI is not yet loaded');\n      return;\n    }\n\n    if (isScene) {\n      initScene(mapConfig, node).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    } else {\n      initMap(mapConfig, node).then(function (response) {\n        resolve(response);\n      }, function (error) {\n        reject(error);\n      });\n    }\n  });\n}\n\nfunction initMap(mapConfig, node) {\n  // if there is a portal ID then this is a web map\n  // else if there is no portal ID then we return the default map view\n  return new Promise(function (resolve, reject) {\n    esriLoader.loadModules(['esri/Map', 'esri/views/MapView']).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          Map = _ref6[0],\n          MapView = _ref6[1];\n\n      var map = new Map({\n        basemap: mapConfig.basemap\n      });\n      new MapView({\n        container: node,\n        map: map,\n        zoom: mapConfig.zoom,\n        center: mapConfig.center\n      }).when(function (response) {\n        resolve({\n          view: response\n        });\n      }, function (error) {\n        reject(error);\n      });\n    });\n  });\n}\n\nfunction initScene(mapConfig, node) {\n  // if there is a portal ID then this is a web scene\n  if (mapConfig.id) {\n    return new Promise(function (resolve, reject) {\n      esriLoader.loadModules(['esri/WebScene', 'esri/views/SceneView']).then(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            WebScene = _ref8[0],\n            SceneView = _ref8[1];\n\n        var webmap = new WebScene({\n          portalItem: {\n            id: mapConfig.id\n          }\n        });\n        new SceneView({\n          map: webmap,\n          container: node\n        }).when(function (response) {\n          resolve({\n            view: response\n          });\n        }, function (error) {\n          reject(error);\n        });\n      });\n    });\n  } // else if there is no portal ID then we return the default scene view\n\n\n  return new Promise(function (resolve, reject) {\n    esriLoader.loadModules(['esri/Map', 'esri/views/SceneView']).then(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          Map = _ref10[0],\n          SceneView = _ref10[1];\n\n      var map = new Map({\n        basemap: mapConfig.basemap\n      });\n      new SceneView({\n        container: node,\n        map: map\n      }).when(function (response) {\n        resolve({\n          view: response\n        });\n      }, function (error) {\n        reject(error);\n      });\n    });\n  });\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\esriHelper.js"],"names":["esriLoader","bootstrapJSAPI","portalUrl","jsapiUrl","jsapiV4","Promise","resolve","reject","isLoaded","options","url","loadScript","then","initApi","success","error","catch","err","loadModules","IdentityManager","arcgisUtils","arcgisUrl","createView","mapConfig","node","isScene","initScene","response","initMap","Map","MapView","map","basemap","container","zoom","center","when","view","id","WebScene","SceneView","webmap","portalItem"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.â€‹\r\n\r\n// Esri Loader\r\nimport * as esriLoader from 'esri-loader';\r\n\r\n/**\r\n * Load in the Esri JSAPI using parameters from the app's configuration\r\n * @param  {string}   portalUrl  Portal URL from public/config\r\n * @param  {string}   jsapiUrl   JSAPI URL from public/config\r\n * @param  {bool}     jsapiV4    Flag for Esri JSAPI 4.x\r\n * @return {Promise}             Returns a promise for async\r\n */\r\nexport function bootstrapJSAPI(portalUrl, jsapiUrl, jsapiV4) {\r\n  return new Promise((resolve, reject) => {\r\n    if (esriLoader.isLoaded()) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const options = {\r\n      url: jsapiUrl\r\n    };\r\n\r\n    esriLoader\r\n      .loadScript(options)\r\n      .then(() => {\r\n        initApi(portalUrl, jsapiV4).then(\r\n          success => resolve(),\r\n          error => reject(error)\r\n        );\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      });\r\n  });\r\n}\r\n\r\nfunction initApi(portalUrl, jsapiV4) {\r\n  return new Promise((resolve, reject) => {\r\n    if (jsapiV4 && portalUrl) {\r\n      esriLoader\r\n        .loadModules(['esri/identity/IdentityManager'])\r\n        .then(([IdentityManager]) => {\r\n          resolve();\r\n        });\r\n    } else if (!jsapiV4 && portalUrl) {\r\n      esriLoader\r\n        .loadModules(['esri/IdentityManager', 'esri/arcgis/utils'])\r\n        .then(([IdentityManager, arcgisUtils]) => {\r\n          arcgisUtils.arcgisUrl = `${portalUrl}/sharing/rest/content/items`;\r\n          resolve();\r\n        });\r\n    } else if (!portalUrl) {\r\n      resolve();\r\n    }\r\n  });\r\n}\r\n\r\nexport function createView(mapConfig, node, isScene = false) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!esriLoader.isLoaded()) {\r\n            reject('JSAPI is not yet loaded');\r\n            return;\r\n        }\r\n\r\n        if (isScene) {\r\n          initScene(mapConfig, node).then(\r\n              response => {\r\n                resolve(response);\r\n              },\r\n              error => {\r\n                  reject(error);\r\n              }\r\n          );\r\n        } else {\r\n          initMap(mapConfig, node).then(\r\n              response => {\r\n                  resolve(response);\r\n              },\r\n              error => {\r\n                  reject(error);\r\n              }\r\n          );\r\n        }\r\n    });\r\n}\r\n\r\nfunction initMap(mapConfig, node) {\r\n    // if there is a portal ID then this is a web map\r\n    \r\n    // else if there is no portal ID then we return the default map view\r\n    return new Promise((resolve, reject) => {\r\n        esriLoader.loadModules([\r\n            'esri/Map',\r\n        \r\n            'esri/views/MapView'\r\n        ]).then( ([Map, MapView]) => {\r\n        \r\n            const map = new Map({\r\n                basemap: mapConfig.basemap\r\n            });\r\n\r\n            new MapView({\r\n                container: node,\r\n                map: map,\r\n                zoom: mapConfig.zoom,\r\n                center: mapConfig.center\r\n            }).when(\r\n                response => {\r\n                    resolve({\r\n                        view: response,\r\n                    });\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    });\r\n}\r\n\r\nfunction initScene(mapConfig, node) {\r\n    // if there is a portal ID then this is a web scene\r\n    if (mapConfig.id) {\r\n        return new Promise((resolve, reject) => {\r\n            esriLoader.loadModules([\r\n                'esri/WebScene',\r\n                'esri/views/SceneView',\r\n            ]).then( ([WebScene, SceneView]) => {\r\n\r\n                let webmap = new WebScene({\r\n                    portalItem: {\r\n                        id: mapConfig.id\r\n                    }\r\n                });\r\n\r\n                new SceneView({\r\n                    map: webmap,\r\n                    container: node\r\n                }).when(\r\n                    response => {\r\n                        resolve({\r\n                            view: response,\r\n                        });\r\n                    },\r\n                    error => {\r\n                        reject(error);\r\n                    }\r\n                )\r\n            });\r\n        });\r\n    }\r\n    // else if there is no portal ID then we return the default scene view\r\n    return new Promise((resolve, reject) => {\r\n        esriLoader.loadModules([\r\n            'esri/Map',\r\n            'esri/views/SceneView'\r\n        ]).then( ([Map, SceneView]) => {\r\n\r\n            const map = new Map({\r\n                basemap: mapConfig.basemap\r\n            });\r\n\r\n            new SceneView({\r\n                container: node,\r\n                map: map\r\n            }).when(\r\n                response => {\r\n                    resolve({\r\n                        view: response,\r\n                    });\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                }\r\n            );\r\n        });\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}