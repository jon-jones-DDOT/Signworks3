{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSignOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignOrder);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getFullSignPost } from './reload';\nimport { getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSignOrder(action) {\n  var errorMUTCD;\n  return _regeneratorRuntime.wrap(function setSignOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\" // call API to save signs with new SIGNORDER\n\n          };\n          _context.next = 4;\n          return call(saveSignOrder, [action.payload.features, action.payload.layers.signs]);\n\n        case 4:\n          _context.next = 6;\n          return getFullSignPost(action);\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSignOrder, ', _context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 8]]);\n} // WATCHER //\n\n\nexport function watchSignOrder() {\n  return _regeneratorRuntime.wrap(function watchSignOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSignOrder.js"],"names":["setSignOrder","watchSignOrder","call","put","takeLatest","types","mapTypes","getFullSignPost","getRelatedSigns","saveSignOrder","getMUTCDS","getRelatedTimebands","action","errorMUTCD","name","serverImagePath","payload","features","layers","signs","console","log","SIGN_ORDER_CHANGED"],"mappings":";;;;yBAOWA,Y;;;yBAkBOC,c;;AAzBlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,eAAR,QAA8B,UAA9B;AACA,SAAQC,eAAR,EAAyBC,aAAzB,EAAwCC,SAAxC,EAAmDC,mBAAnD,QAA6E,mBAA7E,C,CAEA;;AAEA,SAAWX,YAAX,CAAwBY,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGcC,UAAAA,UAHd,GAG2B;AACfC,YAAAA,IAAI,EAAE,iBADS;AAEfC,YAAAA,eAAe,EAAE,MAFF,CAInB;;AAJmB,WAH3B;AAAA;AASQ,iBAAMb,IAAI,CAACO,aAAD,EAAgB,CAACG,MAAM,CAACI,OAAP,CAAeC,QAAhB,EAA0BL,MAAM,CAACI,OAAP,CAAeE,MAAf,CAAsBC,KAAhD,CAAhB,CAAV;;AATR;AAAA;AAUQ,iBAAMZ,eAAe,CAACK,MAAD,CAArB;;AAVR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQQ,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;;;AACA,OAAO,SAAWpB,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,QAAQ,CAACgB,kBAAV,EAA8BtB,YAA9B,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getFullSignPost} from './reload'\r\nimport {getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSignOrder(action) {\r\n\r\n    try {\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to save signs with new SIGNORDER\r\n\r\n        yield call(saveSignOrder, [action.payload.features, action.payload.layers.signs]);\r\n        yield getFullSignPost(action);\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSignOrder, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchSignOrder() {\r\n\r\n    yield takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\r\n}"]},"metadata":{},"sourceType":"module"}