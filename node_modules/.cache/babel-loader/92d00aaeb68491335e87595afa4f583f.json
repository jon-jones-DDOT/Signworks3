{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\GoogleMaps.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { mapModes, actions as graphicActions } from '../../redux/reducers/graphic';\nimport ReactStreetview from 'react-streetview';\nimport './GoogleMaps.css';\nexport var GoogleMaps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoogleMaps, _Component);\n\n  function GoogleMaps() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GoogleMaps);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleMaps)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.ggCancel = function () {\n      _this.props.closeStreetSmartViewer();\n    };\n\n    return _this;\n  }\n\n  _createClass(GoogleMaps, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // see https://developers.google.com/maps/documentation/javascript\n      var googleMapsApiKey = 'AIzaSyDXDefktZL_z_aT5bUbPA9V5HsPcegIIEI'; // see\n      // https://developers.google.com/maps/documentation/javascript/3.exp/reference#St\n      // reetViewPanoramaOptions\n\n      var streetViewPanoramaOptions = {\n        position: {\n          lat: this.props.graphic.selSupportGeom.y,\n          lng: this.props.graphic.selSupportGeom.x\n        },\n        pov: {\n          heading: this.props.graphic.initialBearing,\n          pitch: -5\n        },\n        zoom: 2\n      };\n      return React.createElement(\"div\", {\n        className: \"GoogleMaps\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ggCancel\",\n        onClick: this.ggCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"X\"), React.createElement(ReactStreetview, {\n        className: \"ggPane\",\n        apiKey: googleMapsApiKey,\n        streetViewPanoramaOptions: streetViewPanoramaOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GoogleMaps;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    auth: state.auth,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleMaps);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\GoogleMaps.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","mapModes","graphicActions","ReactStreetview","GoogleMaps","ggCancel","props","closeStreetSmartViewer","nextProps","nextState","googleMapsApiKey","streetViewPanoramaOptions","position","lat","graphic","selSupportGeom","y","lng","x","pov","heading","initialBearing","pitch","zoom","mapStateToProps","state","map","auth","config","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,kBAAR,QAAiC,OAAjC;AACA,SAAQC,OAAO,IAAIC,UAAnB,QAAoC,0BAApC;AACA,SAAQC,QAAR,EAAkBF,OAAO,IAAIG,cAA7B,QAAkD,8BAAlD;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAO,kBAAP;AAEA,WAAaC,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UACIC,QADJ,GACe,YAAM;AAEb,YACKC,KADL,CAEKC,sBAFL;AAGH,KANL;;AAAA;AAAA;;AAAA;AAAA;AAAA,0CAQ0BC,SAR1B,EAQqCC,SARrC,EAQgD;AACxC,aAAO,IAAP;AACH;AAVL;AAAA;AAAA,6BAYa;AAEL;AACA,UAAMC,gBAAgB,GAAG,yCAAzB,CAHK,CAKL;AACA;AACA;;AACA,UAAMC,yBAAyB,GAAG;AAE9BC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,GAAG,EAAE,KAAKP,KAAL,CAAWQ,OAAX,CAAmBC,cAAnB,CAAkCC,CADjC;AAENC,UAAAA,GAAG,EAAE,KAAKX,KAAL,CAAWQ,OAAX,CAAmBC,cAAnB,CAAkCG;AAFjC,SAFoB;AAM9BC,QAAAA,GAAG,EAAE;AACDC,UAAAA,OAAO,EAAE,KAAKd,KAAL,CAAWQ,OAAX,CAAmBO,cAD3B;AAEDC,UAAAA,KAAK,EAAE,CAAC;AAFP,SANyB;AAU9BC,QAAAA,IAAI,EAAE;AAVwB,OAAlC;AAaA,aACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,OAAO,EAAE,KAAKlB,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAGI,oBAAC,eAAD;AACI,QAAA,SAAS,EAAC,QADd;AAEI,QAAA,MAAM,EAAEK,gBAFZ;AAGI,QAAA,yBAAyB,EAAEC,yBAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,CADJ;AAWH;AA5CL;;AAAA;AAAA,EAAgCf,SAAhC;;AA+CA,IAAM4B,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAACC,IAAAA,GAAG,EAAED,KAAK,CAACC,GAAZ;AAAiBZ,IAAAA,OAAO,EAAEW,KAAK,CAACX,OAAhC;AAAyCa,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAArD;AAA2DC,IAAAA,MAAM,EAAEH,KAAK,CAACG;AAAzE,GAAL;AAAA,CAA7B;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAUC,QAAV,EAAoB;AAC3C,SAAOhC,kBAAkB,mBAClBE,UADkB,EAElBE,cAFkB,GAGtB4B,QAHsB,CAAzB;AAIH,CALD;;AAMA,eAAejC,OAAO,CAAC2B,eAAD,EAAkBK,kBAAlB,CAAP,CAA6CzB,UAA7C,CAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {mapModes, actions as graphicActions} from '../../redux/reducers/graphic';\r\nimport ReactStreetview from 'react-streetview'\r\nimport './GoogleMaps.css'\r\n\r\nexport class GoogleMaps extends Component {\r\n    ggCancel = () => {\r\n\r\n        this\r\n            .props\r\n            .closeStreetSmartViewer();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n\r\n        // see https://developers.google.com/maps/documentation/javascript\r\n        const googleMapsApiKey = 'AIzaSyDXDefktZL_z_aT5bUbPA9V5HsPcegIIEI';\r\n\r\n        // see\r\n        // https://developers.google.com/maps/documentation/javascript/3.exp/reference#St\r\n        // reetViewPanoramaOptions\r\n        const streetViewPanoramaOptions = {\r\n\r\n            position: {\r\n                lat: this.props.graphic.selSupportGeom.y,\r\n                lng: this.props.graphic.selSupportGeom.x\r\n            },\r\n            pov: {\r\n                heading: this.props.graphic.initialBearing,\r\n                pitch: -5\r\n            },\r\n            zoom: 2\r\n        };\r\n\r\n        return (\r\n            <div className=\"GoogleMaps\">\r\n                <div className=\"ggCancel\" onClick={this.ggCancel}>X</div>\r\n\r\n                <ReactStreetview\r\n                    className=\"ggPane\"\r\n                    apiKey={googleMapsApiKey}\r\n                    streetViewPanoramaOptions={streetViewPanoramaOptions}/>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, auth: state.auth, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleMaps);"]},"metadata":{},"sourceType":"module"}