{"ast":null,"code":"import { parkingtypesigns, mphSigns } from \"../../../SignworksJSON\"; // newCode is the mutcd.code that is being checked signs -  an array of signs on\n// the signpost each sign should have a property called MUTCD that has the info\n// from the sign catalog\n\nexport function MutcdDuplicate(newCode, signs) {\n  var isDupe = false;\n\n  for (var i = 0; i < signs.length; i++) {\n    if (signs[i].MUTCD.code === newCode) {\n      isDupe = true;\n    }\n  }\n\n  console.log('isDupe :', isDupe);\n  return isDupe;\n}\nexport function isSpeedLimit(mutt) {\n  mutt = mutt.toUpperCase();\n  var speedy = mphSigns.find(function (code) {\n    if (code === mutt) {\n      return mutt;\n    }\n  });\n  console.log('speedy :', speedy);\n\n  if (speedy) {\n    return \"\";\n  } else return \"disabled\";\n}\n\nfunction zoneVerify(fromSource) {\n  if (!fromSource) {\n    //assemble zone\n    zoneValue = $ward1.val() + $anc1.val();\n\n    if ($ward2.val()) {\n      zoneValue += \"&\" + $ward2.val() + $anc2.val();\n    } else if ($anc2.val()) {\n      // you've got a anc with no ward\n      return flagZone;\n    }\n  } // alert(zoneValue);\n  // verify zone with same script as python server side\n  // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\n\n\n  var verifiedZ = false;\n\n  if (zoneValue == \"\" || !zoneValue) {\n    // this was an error before , but having an empty value is ok\n    return 0;\n  }\n\n  if (zoneValue.length < 1) {\n    return flagZone;\n  }\n\n  var look = zoneValue[0];\n\n  if (ward.test(zoneValue[0])) {\n    // we have a ward in first position\n    if (zoneValue.length < 2) {\n      // it was just a single ward\n      return 0;\n    }\n\n    if (amp.test(zoneValue[1])) {\n      //single digit ward and ...\n      if (ward.test(zoneValue[2])) {\n        //single digit ward and ward and ...\n        if (zoneValue.length < 4) {\n          //single digit ward and single digit ward and done\n          return 0;\n        }\n\n        if (anc.test(zoneValue[3])) {\n          // single digit ward and ward+anc and done\n          return 0;\n        } else {\n          //single digit ward and some garbage\n          return flagZone;\n        }\n      }\n    } else if (anc.test(zoneValue[1])) {\n      // ward + anc\n      if (zoneValue.length < 3) {\n        // ward + anc and done\n        return 0;\n      } else if (amp.test(zoneValue[2])) {\n        // ward + anc and ...\n        if (zoneValue.length < 4) {\n          // oops, nothing after the ampersand\n          // we could just fix it here clip the ampersand\n          return flagZone;\n        } else if (ward.test(zoneValue[3])) {\n          // ward + anc and ward and ...\n          if (zoneValue.length < 5) {\n            // ward + anc and single digit ward and done\n            return 0;\n          } else if (zoneValue.length > 5) {\n            // too many characters  - - shouldn't happen here but check anyway\n            return flagZone;\n          } else if (anc.test(zoneValue[4])) {\n            // ward + anc and ward = anc and done\n            return 0;\n          } else {\n            // ward + anc + ward + garbage\n            return flagZone;\n          }\n        } else {\n          // ward + anc + ampersand + garbage\n          return flagZone;\n        }\n      } else {\n        // ward + anc + garbage\n        return flagZone;\n      }\n    } else {\n      //ward + garbage\n      return flagZone;\n    }\n  } else {\n    //garbage from the get go\n    return flagZone;\n  } //should never get here\n\n\n  return -1;\n}\n\n;\n\nfunction zoneCheck(evt) {\n  if ($ward1.val() != \"\") {\n    $anc1.attr('disabled', false);\n  } else {\n    $anc1.attr('disabled', true);\n    $anc1.val(\"\");\n  }\n\n  if ($ward2.val() != \"\") {\n    $anc2.attr('disabled', false);\n  } else {\n    $anc2.attr('disabled', true);\n    $anc2.val(\"\");\n  }\n\n  var err = zoneVerify(false);\n\n  if (err) {\n    $zoneDiv.removeClass(\"edit_div\");\n    $zoneDiv.addClass(\"edit_div_err\");\n    verify(flagOR, flagZone);\n  } else {\n    $zoneDiv.removeClass(\"edit_div_err\");\n    $zoneDiv.addClass(\"edit_div\");\n    verify(flagORX, flagZone);\n    feature.attributes.ZONE_ID = zoneValue;\n  }\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\SignValidations.js"],"names":["parkingtypesigns","mphSigns","MutcdDuplicate","newCode","signs","isDupe","i","length","MUTCD","code","console","log","isSpeedLimit","mutt","toUpperCase","speedy","find","zoneVerify","fromSource","zoneValue","$ward1","val","$anc1","$ward2","$anc2","flagZone","verifiedZ","look","ward","test","amp","anc","zoneCheck","evt","attr","err","$zoneDiv","removeClass","addClass","verify","flagOR","flagORX","feature","attributes","ZONE_ID"],"mappings":"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","sourcesContent":["import {parkingtypesigns, mphSigns} from \"../../../SignworksJSON\";\r\n\r\n// newCode is the mutcd.code that is being checked signs -  an array of signs on\r\n// the signpost each sign should have a property called MUTCD that has the info\r\n// from the sign catalog\r\nexport function MutcdDuplicate(newCode, signs) {\r\n\r\n    let isDupe = false;\r\n    for (let i = 0; i < signs.length; i++) {\r\n        if (signs[i].MUTCD.code === newCode) {\r\n            isDupe = true;\r\n        }\r\n    }\r\n    console.log('isDupe :', isDupe);\r\n    return isDupe\r\n}\r\n\r\nexport function isSpeedLimit(mutt) {\r\n    mutt = mutt.toUpperCase();\r\n    const speedy = mphSigns.find((code) => {\r\n       \r\n        if (code === mutt) {\r\n            return mutt;\r\n        }\r\n    })\r\n    console.log('speedy :', speedy);\r\nif (speedy){\r\n    return \"\"\r\n}\r\nelse\r\n    return \"disabled\";\r\n\r\n}\r\n\r\nfunction zoneVerify (fromSource) {\r\n\r\n\r\n    if (!fromSource) {\r\n        //assemble zone\r\n        zoneValue = $ward1.val() + $anc1.val();\r\n        if ($ward2.val()) {\r\n            zoneValue += \"&\" + $ward2.val() + $anc2.val();\r\n        }\r\n        else if ($anc2.val()) {\r\n            // you've got a anc with no ward\r\n            return flagZone;\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // alert(zoneValue);\r\n    // verify zone with same script as python server side\r\n    // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\r\n    var verifiedZ = false;\r\n    if (zoneValue == \"\" || !zoneValue) {\r\n        // this was an error before , but having an empty value is ok\r\n        return 0;\r\n    }\r\n    if (zoneValue.length < 1) {\r\n        return flagZone;\r\n    }\r\n    var look = zoneValue[0];\r\n    if (ward.test(zoneValue[0])) {\r\n        // we have a ward in first position\r\n        if (zoneValue.length < 2) {\r\n            // it was just a single ward\r\n            return 0;\r\n        }\r\n        if (amp.test(zoneValue[1])) {\r\n            //single digit ward and ...\r\n            if (ward.test(zoneValue[2])) {\r\n                //single digit ward and ward and ...\r\n                if (zoneValue.length < 4) {\r\n                    //single digit ward and single digit ward and done\r\n                    return 0;\r\n                }\r\n                if (anc.test(zoneValue[3])) {\r\n                    // single digit ward and ward+anc and done\r\n                    return 0;\r\n                }\r\n                else {\r\n                    //single digit ward and some garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n        }\r\n        else if (anc.test(zoneValue[1])) {\r\n            // ward + anc\r\n            if (zoneValue.length < 3) {\r\n                // ward + anc and done\r\n                return 0;\r\n            }\r\n            else if (amp.test(zoneValue[2])) {\r\n                // ward + anc and ...\r\n                if (zoneValue.length < 4) {\r\n                    // oops, nothing after the ampersand\r\n                    // we could just fix it here clip the ampersand\r\n                    return flagZone;\r\n                }\r\n                else if (ward.test(zoneValue[3])) {\r\n                    // ward + anc and ward and ...\r\n                    if (zoneValue.length < 5) {\r\n                        // ward + anc and single digit ward and done\r\n                        return 0;\r\n                    }\r\n                    else if (zoneValue.length > 5) {\r\n                        // too many characters  - - shouldn't happen here but check anyway\r\n                        return flagZone;\r\n                    }\r\n                    else if (anc.test(zoneValue[4])) {\r\n                        // ward + anc and ward = anc and done\r\n                        return 0;\r\n                    }\r\n                    else {\r\n                        // ward + anc + ward + garbage\r\n                        return flagZone;\r\n                    }\r\n                }\r\n                else {\r\n                    // ward + anc + ampersand + garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n            else {\r\n                // ward + anc + garbage\r\n                return flagZone;\r\n            }\r\n        }\r\n        else {\r\n            //ward + garbage\r\n            return flagZone;\r\n        }\r\n\r\n\r\n\r\n    }\r\n    else {\r\n        //garbage from the get go\r\n        return flagZone;\r\n    }\r\n    //should never get here\r\n    return -1;\r\n};\r\n\r\nfunction zoneCheck (evt) {\r\n\r\n\r\n    if ($ward1.val() != \"\") {\r\n        $anc1.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc1.attr('disabled', true);\r\n        $anc1.val(\"\");\r\n    }\r\n    if ($ward2.val() != \"\") {\r\n        $anc2.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc2.attr('disabled', true);\r\n        $anc2.val(\"\");\r\n    }\r\n    var err = zoneVerify(false);\r\n    if (err) {\r\n        $zoneDiv.removeClass(\"edit_div\");\r\n        $zoneDiv.addClass(\"edit_div_err\");\r\n        verify(flagOR, flagZone);\r\n    }\r\n    else {\r\n        $zoneDiv.removeClass(\"edit_div_err\");\r\n        $zoneDiv.addClass(\"edit_div\");\r\n        verify(flagORX, flagZone);\r\n        feature.attributes.ZONE_ID = zoneValue;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}