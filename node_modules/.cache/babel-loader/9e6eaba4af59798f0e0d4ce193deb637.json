{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, proj4326geom, sel2, selPtFeatureSet, gjPt, extPoint, localExtent, features, neighborFeatures, i, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // this ball of wax has a ridiculous number of async calls, I am gonna try to do\n          // them all here in the saga\n          console.log('action.payload.sel', action.payload.sel);\n          _context.next = 4;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 4:\n          projectResult = _context.sent;\n          console.log('projectResult', projectResult);\n          proj4326geom = null;\n\n          if (!(action.payload.inSR === 26985)) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 10;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, 4326]);\n\n        case 10:\n          proj4326geom = _context.sent;\n\n        case 11:\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          sel2 = _objectSpread({}, action.payload.sel[0]);\n          sel2.geometry = projectResult[0];\n          _context.next = 15;\n          return call(createFeatureSet, [sel2]);\n\n        case 15:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          extPoint = null;\n\n          if (proj4326geom) {\n            extPoint = proj4326geom[0];\n          } else {\n            alert('woop der it is');\n            extPoint = action.payload.sel[0].geometry;\n          }\n\n          _context.next = 21;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, extPoint, 400 //tolerance in pixels\n          ]);\n\n        case 21:\n          localExtent = _context.sent;\n          console.log('localExtent :', localExtent); //get neighboring points from the selected support\n\n          _context.next = 25;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 25:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          for (i = 0; i < neighborFeatures.length; i++) {\n            neighborFeatures[i].geometry.type = \"point\";\n            neighborFeatures[i].geometry.spatialReference = {\n              wkid: 2248\n            };\n          }\n\n          _context.next = 30;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 30:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 34;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\n            payload: {\n              leftVisible: true,\n              editMode: action.payload.editMode,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors\n            }\n          });\n\n        case 34:\n          _context.next = 39;\n          break;\n\n        case 36:\n          _context.prev = 36;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 39:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 36]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","console","log","payload","sel","geometry","layers","geometryService","inSR","outSR","projectResult","proj4326geom","sel2","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","extPoint","alert","viewWidth","viewExtentWidth","view_spatRef","localExtent","supports","features","neighborFeatures","data","i","length","type","spatialReference","wkid","neighborFeatureSet","gjNeighbors","SHOW_STREETSMART_VIEWER_RG","leftVisible","editMode","ssInputGeom","ssgeoJSONselPoint","ssOverlay","START_STREETSMART_VIEWER_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\nimport {faWindows} from '@fortawesome/free-brands-svg-icons';\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\nconsole.log('action.payload.sel', action.payload.sel)\r\n        const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        console.log('projectResult', projectResult)\r\n\r\n        let proj4326geom = null;\r\n\r\n        if (action.payload.inSR === 26985) {\r\n            proj4326geom = yield call(projectGeometry, [\r\n                [action.payload.sel[0].geometry],\r\n                action.payload.layers.geometryService,\r\n                action.payload.inSR,\r\n                4326\r\n            ]);\r\n        }\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        let sel2 = {\r\n            ...action.payload.sel[0]\r\n        }\r\n        sel2.geometry = projectResult[0];\r\n\r\n        const selPtFeatureSet = yield call(createFeatureSet, [sel2])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        let extPoint = null;\r\n        if (proj4326geom) {\r\n           \r\n            extPoint = proj4326geom[0];\r\n        } else {\r\n            alert('woop der it is')\r\n            extPoint = action.payload.sel[0].geometry\r\n        }\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, extPoint, 400 //tolerance in pixels\r\n\r\n        ])\r\n        console.log('localExtent :', localExtent);\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\n        //make them a featureset because the converter is picky like that\r\n\r\n        for (let i = 0; i < neighborFeatures.length; i++) {\r\n            neighborFeatures[i].geometry.type = \"point\";\r\n            neighborFeatures[i].geometry.spatialReference = {\r\n                wkid: 2248\r\n            }\r\n        }\r\n        const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n\r\n        //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\r\n            payload: {\r\n                leftVisible: true,\r\n                editMode: action.payload.editMode,\r\n                ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint: gjPt,\r\n                ssOverlay: gjNeighbors\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}