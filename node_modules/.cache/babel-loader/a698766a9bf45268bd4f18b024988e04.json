{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\StreetSmart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { actions as graphicActions } from '../../redux/reducers/graphic';\nimport './StreetSmart.css';\nvar containerID = \"StreetSmart-container\";\n\nvar StreetSmart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreetSmart, _Component);\n\n  function StreetSmart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreetSmart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreetSmart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.ssCancel = function () {\n      window.StreetSmartApi.destroy({\n        targetElement: document.getElementById(containerID)\n      });\n\n      _this.props.closeStreetSmartViewer();\n    };\n\n    _this.startup = function (divId) {\n      var x = _this.props.graphic.ssInputGeom[0].x;\n      var y = _this.props.graphic.ssInputGeom[0].y;\n      var geoJSONSelect = _this.props.graphic.ssgeoJSONselPoint;\n      var geoJSONNeighbors = _this.props.graphic.ssOverlay;\n      var editMode = _this.props.graphic.editMode;\n      var PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' + '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' + 'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' + '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' + '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' + 'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' + 'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' + 'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' + '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' + 'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' + '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\n      var selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' + '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' + 'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' + 'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' + '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' + 'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' + 'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' + 'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' + 'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' + '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' + 'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' + '</UserStyle></NamedLayer></StyledLayerDescriptor>';\n      var options = [{\n        name: \"Nearby Supports\",\n        geojson: geoJSONNeighbors,\n        sldXMLtext: PointsSLD\n      }, {\n        name: \"Selected Support\",\n        geojson: geoJSONSelect,\n        sldXMLtext: selectSLD\n      }];\n\n      var clkMap = function clkMap(evt) {\n        var msEvents = window.StreetSmartApi.Events.measurement;\n        var result = window.StreetSmartApi.getActiveMeasurement();\n\n        if (result.features[0].geometry.coordinates == null) {\n          return;\n        }\n\n        console.log('result', result);\n        window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED); // graphics.view.surface.style.cursor = \"default\";\n        // callback.GetLRSInfo(result, callback);\n        //  close();\n      };\n\n      var changeView = function changeView(evt) {// view cone stuff\n        //  imagePitch = evt.detail.pitch;\n        //    imageYaw = evt.detail.yaw;\n        //   projectCoords(panoramaViewer._panoramaViewer._activeRecording.xyz[0], panoramaViewer._panoramaViewer._activeRecording.xyz[1], panoramaViewer._panoramaViewer._activeRecording.xyz[2]);\n      };\n\n      var loadViewEnd = function loadViewEnd(evt) {//some hack for the view cone\n        //  panoramaViewer.rotateLeft(1);\n      };\n\n      window.StreetSmartApi.init({\n        username: \"signworks\",\n        password: \"SIGNWORKS\",\n        apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\n        targetElement: document.getElementById(containerID),\n        srs: \"EPSG:2248\",\n        locale: 'en-us',\n        configurationUrl: 'https://atlas.cyclomedia.com/configuration',\n        addressSettings: {\n          locale: \"en\",\n          database: \"Nokia\"\n        }\n      }).then(function () {\n        var viewerType = window.StreetSmartApi.ViewerType.PANORAMA;\n        window.StreetSmartApi.open(x + \",\" + y, {\n          viewerType: viewerType,\n          srs: 'EPSG:2248'\n        }).then(function (result) {\n          if (result) {\n            for (var i = 0; i < result.length; i++) {\n              if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\n                window.panoramaViewer = result[i];\n              }\n\n              if (editMode) {\n                window.StreetSmartApi.startMeasurementMode(window.panoramaViewer, {\n                  geometry: window.StreetSmartApi.MeasurementGeometryType.POINT\n                });\n                var msEvents = window.StreetSmartApi.Events.measurement;\n                window.StreetSmartApi.on(msEvents.MEASUREMENT_CHANGED, clkMap);\n                window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\n                window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\n              }\n\n              for (var o in options) {\n                window.StreetSmartApi.addOverlay(options[o]);\n              }\n            }\n          }\n        }.bind(this)).catch(function (reason) {\n          alert('Failed to create component(s) through API: ' + reason);\n        });\n      }, function (err) {\n        alert('Api Init Failed!' + err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StreetSmart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(containerID);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // Tell React to never update this component, that's up to us\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"StreetSmart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ssCancel\",\n        onClick: this.ssCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"div\", {\n        ref: \"ssDiv\",\n        className: \"ssPane\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreetSmart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\StreetSmart.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","graphicActions","containerID","StreetSmart","ssCancel","window","StreetSmartApi","destroy","targetElement","document","getElementById","props","closeStreetSmartViewer","startup","divId","x","graphic","ssInputGeom","y","geoJSONSelect","ssgeoJSONselPoint","geoJSONNeighbors","ssOverlay","editMode","PointsSLD","selectSLD","options","name","geojson","sldXMLtext","clkMap","evt","msEvents","Events","measurement","result","getActiveMeasurement","features","geometry","coordinates","console","log","off","MEASUREMENT_CHANGED","changeView","loadViewEnd","init","username","password","apiKey","srs","locale","configurationUrl","addressSettings","database","then","viewerType","ViewerType","PANORAMA","open","i","length","getType","panoramaViewer","startMeasurementMode","MeasurementGeometryType","POINT","on","VIEW_CHANGE","VIEW_LOAD_END","o","addOverlay","bind","catch","reason","alert","err","nextProps","nextState","mapStateToProps","state","map","config","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {actions as graphicActions} from '../../redux/reducers/graphic'\r\nimport './StreetSmart.css'\r\n\r\nconst containerID = \"StreetSmart-container\";\r\n\r\nclass StreetSmart extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.startup(containerID);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // Tell React to never update this component, that's up to us\r\n        return false;\r\n    }\r\n    ssCancel = () => {\r\n        window\r\n            .StreetSmartApi\r\n            .destroy({\r\n                targetElement: document.getElementById(containerID)\r\n            });\r\n        this\r\n            .props\r\n            .closeStreetSmartViewer();\r\n\r\n    }\r\n\r\n    startup = (divId) => {\r\n\r\n        const x = this.props.graphic.ssInputGeom[0].x;\r\n        const y = this.props.graphic.ssInputGeom[0].y;\r\n        const geoJSONSelect = this.props.graphic.ssgeoJSONselPoint;\r\n        const geoJSONNeighbors = this.props.graphic.ssOverlay;\r\n        const editMode = this.props.graphic.editMode;\r\n\r\n        const PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' +\r\n                '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' +\r\n                'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' +\r\n                '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' +\r\n                '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' +\r\n                'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' +\r\n                'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' +\r\n                'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' +\r\n                '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' +\r\n                'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' +\r\n                '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n        const selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' +\r\n                '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' +\r\n                'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' +\r\n                'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' +\r\n                '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' +\r\n                'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' +\r\n                'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' +\r\n                'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' +\r\n                'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' +\r\n                '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' +\r\n                'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' +\r\n                '</UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n        const options = [\r\n            {\r\n                name: \"Nearby Supports\",\r\n                geojson: geoJSONNeighbors,\r\n                sldXMLtext: PointsSLD\r\n            }, {\r\n                name: \"Selected Support\",\r\n                geojson: geoJSONSelect,\r\n                sldXMLtext: selectSLD\r\n            }\r\n        ]\r\n        const clkMap = function (evt) {\r\n\r\n            let msEvents = window.StreetSmartApi.Events.measurement;\r\n\r\n            let result = window.StreetSmartApi.getActiveMeasurement();\r\n            if (result.features[0].geometry.coordinates == null) {\r\n                return;\r\n            }\r\n            console.log('result', result)\r\n            window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED);\r\n           // graphics.view.surface.style.cursor = \"default\";\r\n           // callback.GetLRSInfo(result, callback);\r\n          //  close();\r\n\r\n        };\r\n\r\n        const changeView = function (evt) {\r\n            // view cone stuff\r\n          //  imagePitch = evt.detail.pitch;\r\n        //    imageYaw = evt.detail.yaw;\r\n         //   projectCoords(panoramaViewer._panoramaViewer._activeRecording.xyz[0], panoramaViewer._panoramaViewer._activeRecording.xyz[1], panoramaViewer._panoramaViewer._activeRecording.xyz[2]);\r\n        };\r\n\r\n        const loadViewEnd = function (evt) {\r\n            //some hack for the view cone\r\n          //  panoramaViewer.rotateLeft(1);\r\n        };\r\n\r\n        window\r\n            .StreetSmartApi\r\n            .init({\r\n                username: \"signworks\",\r\n                password: \"SIGNWORKS\",\r\n                apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\r\n                targetElement: document.getElementById(containerID),\r\n                srs: \"EPSG:2248\",\r\n                locale: 'en-us',\r\n                configurationUrl: 'https://atlas.cyclomedia.com/configuration',\r\n                addressSettings: {\r\n                    locale: \"en\",\r\n                    database: \"Nokia\"\r\n                }\r\n            })\r\n            .then(function () {\r\n                var viewerType = window.StreetSmartApi.ViewerType.PANORAMA\r\n\r\n                window\r\n                    .StreetSmartApi\r\n                    .open(x + \",\" + y, {\r\n                        viewerType: viewerType,\r\n                        srs: 'EPSG:2248'\r\n                    })\r\n                    .then(function (result) {\r\n                        if (result) {\r\n\r\n                            for (let i = 0; i < result.length; i++) {\r\n                                if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\r\n\r\n                                    window.panoramaViewer = result[i];\r\n                                }\r\n\r\n                                if (editMode) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .startMeasurementMode(window.panoramaViewer, {geometry: window.StreetSmartApi.MeasurementGeometryType.POINT});\r\n                                    let msEvents = window.StreetSmartApi.Events.measurement;\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .on(msEvents.MEASUREMENT_CHANGED, clkMap);\r\n                                    window\r\n                                        .panoramaViewer\r\n                                        .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\r\n                                    window\r\n                                        .panoramaViewer\r\n                                        .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\r\n                                }\r\n\r\n                                for (let o in options) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .addOverlay(options[o])\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }.bind(this))\r\n                    .catch(function (reason) {\r\n                        alert('Failed to create component(s) through API: ' + reason)\r\n                    });\r\n            }, function (err) {\r\n                alert('Api Init Failed!' + err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"StreetSmart\">\r\n                <div className=\"ssCancel\" onClick={this.ssCancel}>X</div>\r\n                <div ref=\"ssDiv\" className=\"ssPane\" id={containerID}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);\r\n"]},"metadata":{},"sourceType":"module"}