{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, selPtFeatureSet, gjPt, localExtent, features, neighborFeatures, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          _context.next = 6;\n          return call(createFeatureSet, [projectResult]);\n\n        case 6:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          _context.next = 10;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\n          ]);\n\n        case 10:\n          localExtent = _context.sent;\n          _context.next = 13;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 13:\n          features = _context.sent;\n          neighborFeatures = features.data.features;\n          console.log('neighborFeatures', neighborFeatures);\n          _context.next = 18;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 18:\n          neighborFeatureSet = _context.sent;\n          console.log('neighborFeatureSet', neighborFeatureSet);\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          console.log('gjNeighbors :', gjNeighbors);\n          _context.next = 24;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\n            payload: {\n              leftVisible: true,\n              ssEdit: false,\n              ssView: true,\n              ssInputGeom: projectResult\n            }\n          });\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 26]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","payload","coords","layers","geometryService","inSR","outSR","projectResult","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","supports","features","neighborFeatures","data","console","log","neighborFeatureSet","gjNeighbors","type","SHOW_STREETSMART_VIEWER","leftVisible","ssEdit","ssView","ssInputGeom","START_STREETSMART_VIEWER"],"mappings":";;;;yBAOWA,e;;;yBAmDOC,gB;;AA1DlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAuF,mBAAvF;AACA,SAAQC,SAAR,QAAwB,oCAAxB,C,CAEA;;AAEA,SAAWX,eAAX,CAA2BY,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK8B,iBAAMV,IAAI,CAACK,eAAD,EAAkB,CAACK,MAAM,CAACC,OAAP,CAAeC,MAAhB,EAAwBF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBC,eAA9C,EAA+DJ,MAAM,CAACC,OAAP,CAAeI,IAA9E,EAAoFL,MAAM,CAACC,OAAP,CAAeK,KAAnG,CAAlB,CAAV;;AAL9B;AAKcC,UAAAA,aALd;AAAA;AAUgC,iBAAMjB,IAAI,CAACQ,gBAAD,EAAmB,CAACS,aAAD,CAAnB,CAAV;;AAVhC;AAUcC,UAAAA,eAVd;AAWcC,UAAAA,IAXd,GAWqBC,MAAM,CACdC,oBADQ,CAERC,eAFQ,CAEQJ,eAFR,CAXrB,EAeQ;AACA;;AAhBR;AAiB4B,iBAAMlB,IAAI,CAACO,iBAAD,EAAoB,CAC9CG,MAAM,CAACC,OAAP,CAAeY,SAD+B,EACpBb,MAAM,CAACC,OAAP,CAAea,eADK,EACYd,MAAM,CAACC,OAAP,CAAec,YAD3B,EACyCf,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAsB,CAAtB,CADzC,EACmE,GADnE,CACuE;AADvE,WAApB,CAAV;;AAjB5B;AAiBcc,UAAAA,WAjBd;AAAA;AAuByB,iBAAM1B,IAAI,CAACM,kBAAD,EAAqB,CAACoB,WAAD,EAAchB,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBc,QAApC,EAA8C,IAA9C,CAArB,CAAV;;AAvBzB;AAuBcC,UAAAA,QAvBd;AAwBcC,UAAAA,gBAxBd,GAwBiCD,QAAQ,CAACE,IAAT,CAAcF,QAxB/C;AAyBAG,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,gBAAhC;AAzBA;AA0BiC,iBAAM7B,IAAI,CAACQ,gBAAD,EAAmB,CAACqB,gBAAD,CAAnB,CAAV;;AA1BjC;AA0BYI,UAAAA,kBA1BZ;AA2BOF,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,kBAAlC;AAEOC,UAAAA,WA7Bd,GA6B4Bd,MAAM,CACrBC,oBADe,CAEfC,eAFe,CAECW,kBAFD,CA7B5B;AAiCAF,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,WAA7B;AAjCA;AAmCQ,iBAAMjC,GAAG,CAAC;AACNkC,YAAAA,IAAI,EAAE/B,YAAY,CAACgC,uBADb;AAENzB,YAAAA,OAAO,EAAE;AACL0B,cAAAA,WAAW,EAAE,IADR;AAELC,cAAAA,MAAM,EAAE,KAFH;AAGLC,cAAAA,MAAM,EAAE,IAHH;AAILC,cAAAA,WAAW,EAAEvB;AAJR;AAFH,WAAD,CAAT;;AAnCR;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8CQc,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AA9CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkDA;;;AACA,OAAO,SAAWjC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACqC,wBAAd,EAAwC3C,eAAxC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\nimport {faWindows} from '@fortawesome/free-brands-svg-icons';\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\n\r\n        const projectResult = yield call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\r\n\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        const selPtFeatureSet = yield call(createFeatureSet, [projectResult])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\r\n\r\n        ])\r\n\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\nconsole.log('neighborFeatures', neighborFeatures)\r\n      const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n       console.log('neighborFeatureSet', neighborFeatureSet)\r\n\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\nconsole.log('gjNeighbors :', gjNeighbors);\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\r\n            payload: {\r\n                leftVisible: true,\r\n                ssEdit: false,\r\n                ssView: true,\r\n                ssInputGeom: projectResult\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}