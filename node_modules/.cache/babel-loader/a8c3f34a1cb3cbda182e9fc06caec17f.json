{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\esri\\\\map\\\\MapView.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 100%;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n// or agreed to in writing, software distributed under the License is\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied. See the License for the specific language\n// governing permissions and limitations under the License.â€‹ NOTE This is a\n// \"special\" react component that does not strictly play by React's rules.\n//\n// Conceptually, this component creates a \"portal\" in React by closing its\n// render method off from updates (by simply rendering a div and never accepting\n// re-renders) then reconnecting itself to the React lifecycle by listening for\n// any new props (using componentWillReceiveProps) React\nimport React, { Component } from 'react'; // Redux\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../../redux/reducers/map';\nimport { actions as graphicActions } from '../../../redux/reducers/graphic';\nimport { mapModes } from '../../../redux/reducers/graphic';\nimport { leftKeys } from '../../../SignworksJSON'; // ESRI\n\nimport { loadModules } from 'esri-loader';\nimport { createView } from '../../../utils/esriHelper';\nimport cloneDeep from 'lodash.clonedeep'; // Styled Components\n\nimport styled from 'styled-components';\nimport { pointToExtent, layerURLs } from '../../../utils/JSAPI';\nvar Container = styled.div(_templateObject()); // Variables\n\nvar containerID = \"map-view-container\";\n\nvar MapView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapView, _Component);\n\n  function MapView(props) {\n    var _this;\n\n    _classCallCheck(this, MapView);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapView).call(this, props));\n    _this.selPoint = {\n      geometry: null\n    };\n    _this.markerLayer = null;\n    _this.queryMarkerLayer = null;\n    _this.featureLayer = null;\n    _this.conicLayer = null;\n    _this.drawExtentLayer = null;\n    _this.symb = null;\n    _this.addSymb = null;\n    _this.marSymb = null;\n    _this.geom = null;\n\n    _this.startup = function (mapConfig, node) {\n      var isScene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      createView(mapConfig, node, isScene).then(function (response) {\n        _this.init(response);\n\n        _this.setupWidgetsAndLayers();\n\n        _this.finishedLoading();\n      }, function (error) {\n        console.error(\"maperr\", error);\n        window.setTimeout(function () {\n          _this.startup(mapConfig, node);\n        }, 1000);\n      });\n    };\n\n    _this.finishedLoading = function () {\n      // Update app state only after map and widgets are loaded\n      _this.props.onMapLoaded(_this.view.extent);\n    };\n\n    _this.getSelectedSupport = function (expandedMapPoint) {\n      // this line takes the buffered point and sends it  to the map reducer which\n      // punts it to the _setSupport saga which queries and gets the support, signs,\n      // timebands, etc and writes them to the store, where they dictate the Rightbar\n      // display.  Once the store changes the action picks up in willReceiveProps\n      _this.props.onMapClicked(expandedMapPoint, layerURLs(_this.props));\n    };\n\n    _this.mapClickHandler = function (evt) {\n      // this redux call moves info about the view into the store so that an extent\n      // around the point can be calculated I don't think it changes, (todo) see about\n      // moving it to map load or something\n      _this.props.setPointBuffer(_this.view.width, _this.view.extent.width, _this.view.spatialReference); // in any map app that's more than a viewer, the map click event is gonna be\n      // complicated so much so that I wrote this a month ago and it is already\n      // getting away from me so we shall comment.  The click event is first captured\n      // here then evaluated against the store to decide what it is supposed to do\n\n\n      switch (_this.props.graphic.mapClickMode) {\n        //the click is supposed to select an existing support on the map\n        case mapModes.SELECT_SUPPORT_MODE:\n          // this creates a small extent buffer around the mapPoint to aid in the select\n          // query its callback is getSelectedSupport, above\n          pointToExtent(_this.view.width, _this.view.extent.width, _this.view.spatialReference, evt.mapPoint, 12, _this.getSelectedSupport);\n          break;\n        //ok now we are in add support mode\n\n        case mapModes.ADD_SUPPORT_MODE:\n          // we should create a 'fake' feature out of the map click event console.lg('map\n          // // click happens here')\n          var newSupportFeature = {\n            atrributes: {},\n            geometry: {\n              x: evt.mapPoint.longitude,\n              y: evt.mapPoint.latitude,\n              type: 'point'\n            } //grabbing a local copy of the mapPoint.geom for the marker\n\n          };\n\n          _this.setState({\n            newSupportClickGeom: evt.mapPoint\n          });\n\n          _this.props.startStreetSmartViewer([newSupportFeature], layerURLs(_this.props), 4326, 2248, _this.props.graphic.viewWidth, _this.props.graphic.viewExtentWidth, _this.props.graphic.view_spatRef, true);\n\n          _this.props.setMapClickMode(mapModes.SELECT_SUPPORT_MODE, 'default');\n\n          _this.view.surface.style.cursor = \"default\";\n          break;\n\n        case mapModes.DRAW_MODE:\n          var draw, action;\n          var drawLayer = _this.drawExtentLayer;\n          var setMode = _this.props.setMapClickMode;\n          var setExtent = _this.props.setQueryCustomExtent;\n          var spatRef = _this.view.spatialReference;\n          loadModules(['esri/views/draw/Draw', \"esri/Graphic\"]).then(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                Draw = _ref2[0],\n                Graphic = _ref2[1];\n\n            var createPolygonGraphic = function createPolygonGraphic(vertices) {\n              drawLayer.removeAll();\n              var polygon = {\n                type: \"polygon\",\n                // autocasts as Polygon\n                rings: vertices,\n                spatialReference: spatRef\n              };\n              var graphic = new Graphic({\n                geometry: polygon,\n                symbol: {\n                  type: \"simple-fill\",\n                  // autocasts as SimpleFillSymbol\n                  color: \"purple\",\n                  style: \"none\",\n                  outline: {\n                    // autocasts as SimpleLineSymbol\n                    color: \"black\",\n                    width: 1\n                  }\n                }\n              });\n              drawLayer.add(graphic);\n              return graphic;\n            };\n\n            draw = new Draw({\n              view: _this.view\n            });\n            action = draw.create(\"polygon\", {\n              mode: \"hybrid\"\n            }); // PolygonDrawAction.vertex-add Fires when user clicks, or presses the \"F\" key.\n            // Can also be triggered when the \"R\" key is pressed to redo.\n\n            action.on(\"vertex-add\", function (evt) {\n              console.log('add', evt);\n              createPolygonGraphic(evt.vertices);\n            }); // PolygonDrawAction.vertex-remove Fires when the \"Z\" key is pressed to undo the\n            // last added vertex\n\n            action.on(\"vertex-remove\", function (evt) {\n              console.log('remove', evt.vertices);\n              createPolygonGraphic(evt.vertices);\n            }); // Fires when the pointer moves over the view\n\n            action.on(\"cursor-update\", function (evt) {\n              console.log('update', evt);\n              createPolygonGraphic(evt.vertices);\n            }); // Add a graphic representing the completed polygon when user double-clicks on\n            // the view or presses the \"C\" key\n\n            action.on(\"draw-complete\", function (evt) {\n              console.log('complete', evt);\n              var rslt = createPolygonGraphic(evt.vertices);\n              console.log('rslt', rslt);\n              setExtent(rslt.geometry);\n              setMode(mapModes.SELECT_SUPPORT_MODE, {\n                cursor: \"default\"\n              });\n            });\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    _this.mapMoveHandler = function (evt) {\n      _this.props.onMapChanged(_this.view.extent);\n    };\n\n    _this.init = function (response) {\n      _this.view = response.view;\n      _this.map = response.view.map;\n    };\n\n    _this.setupWidgetsAndLayers = function () {\n      loadModules(['esri/layers/FeatureLayer', \"esri/layers/GraphicsLayer\", 'esri/Graphic']).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 3),\n            FeatureLayer = _ref4[0],\n            GraphicsLayer = _ref4[1],\n            Graphic = _ref4[2];\n\n        _this.featureLayer = new FeatureLayer({\n          url: layerURLs(_this.props).supports,\n          definitionExpression: \"SUPPORTSTATUS = 1\",\n          outFields: [\"*\"],\n          id: \"support\"\n        });\n        _this.queryMarkerLayer = new GraphicsLayer();\n        _this.markerLayer = new GraphicsLayer();\n        _this.conicLayer = new GraphicsLayer();\n        _this.drawExtentLayer = new GraphicsLayer(); //     this.map.basemap = baseMap;\n\n        _this.map.addMany([_this.featureLayer, _this.queryMarkerLayer, _this.markerLayer, _this.conicLayer, _this.drawExtentLayer]);\n\n        _this.view.on(\"click\", _this.mapClickHandler);\n\n        _this.view.on(\"pointer-up\", _this.mapMoveHandler);\n\n        _this.view.on('mouse-wheel', _this.mapMoveHandler);\n\n        _this.symb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'magenta',\n            width: 3 // points\n\n          }\n        };\n        _this.addSymb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'green',\n            width: 3 // points\n\n          }\n        };\n        _this.marSymb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()\n          style: \"square\",\n          color: [0, 255, 0, 0.0],\n          size: \"30px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'green',\n            width: 3 // points\n\n          }\n        };\n        _this.selPoint = new Graphic({\n          geometry: null,\n          symbol: _this.symb\n        }); //   this.markerLayer.add(this.selPoint)\n      });\n    };\n\n    _this.state = {\n      newSupportClickGeom: null\n    };\n    return _this;\n  }\n\n  _createClass(MapView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(this.props.mapConfig, containerID, this.props.is3DScene);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      //view cone needs adjustment\n      if (this.props.graphic.coneGraphic !== nextProps.graphic.coneGraphic) {\n        //    console.lg('update due to view cone');\n        return true;\n      }\n\n      if (nextState.newSupportClickGeom !== this.state.newSupportClickGeom) {\n        //        console.lg('update because map clicked to select target area for new\n        // support')\n        return true;\n      }\n\n      if (this.props.graphic.queryFeatures.length > 0 && this.props.graphic.queryFeatures !== nextProps.graphic.queryFeatures) {\n        //        console.lg('update because of query features');\n        return true;\n      }\n\n      if (this.props.graphic.needSupRefresh === true) {\n        //       console.lg('update to refresh for new support feature added');\n        return true;\n      }\n\n      if (this.props.graphic.mapClickMode !== nextProps.graphic.mapClickMode) {\n        //        console.lg('update because mapClickMode changed.  Not sure this does\n        // anything')\n        return true;\n      }\n\n      if (this.props.map.support !== nextProps.map.support) {\n        //         console.lg('update because map.support changed');\n        return true;\n      } //removes superQuery results from view based on store\n\n\n      if (nextProps.graphic.showQuery !== this.props.graphic.showQuery) {\n        //          console.lg('update because showQuery has changed');\n        return true;\n      }\n\n      if (nextProps.graphic.ssOverlay === null & this.conicLayer.graphics.length > 0) {\n        //     console.lg('update because view cone needs to be removed');\n        return true;\n      }\n\n      if (nextProps.graphic.zoomPoint != this.props.graphic.zoomPoint) {\n        return true;\n      }\n\n      if (nextProps.map.retiredPosts != this.props.map.retiredPosts) {\n        return true;\n      } //    console.lg('did not update');\n\n\n      return false;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this2 = this;\n\n      // changes cone graphic in response to evt\n      if (this.props.graphic.coneGraphic !== prevProps.graphic.coneGraphic) {\n        this.conicLayer.removeAll(); //   console.lg('unexpected call to cone graphics');\n\n        this.queryMarkerLayer.removeAll();\n        this.conicLayer.add(this.props.graphic.coneGraphic);\n        this.conicLayer.add(this.props.graphic.conePointGraphic);\n        return;\n      } // removes all query graphics\n\n\n      if (this.props.graphic.showQuery === false && this.queryMarkerLayer.graphics.length > 0) {\n        //      console.lg('removing query markers')\n        this.queryMarkerLayer.removeAll();\n      } //removes cone graphics\n\n\n      if (this.props.graphic.ssOverlay === null && this.conicLayer.graphics.length > 0) {\n        //      console.lg('removing conic graphics')\n        this.conicLayer.removeAll();\n      } //if there are query features in the store, this block displays them in the view\n\n\n      if (this.props.graphic.queryFeatures.length > 0) {\n        //       console.lg('adding query features');\n        var graphics = _toConsumableArray(this.props.graphic.queryFeatures); // add symbols\n\n\n        var querySymb = {\n          type: \"simple-marker\",\n          // autocasts as new SimpleMarkerSymbol()  NEVER TRUST AUTOCAST\n          style: \"circle\",\n          color: [0, 255, 0, 0.0],\n          size: \"35px\",\n          // pixels\n          outline: {\n            // autocasts as new SimpleLineSymbol()\n            color: 'blue',\n            width: 3 // points\n\n          }\n        }; //this just sets query results in the store to empty array\n\n        this.props.removeQueryResults(); // create graphics and add them to layer\n\n        loadModules([\"esri/Graphic\"]).then(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 1),\n              Graphic = _ref6[0];\n\n          var gr = null;\n\n          for (var i = 0; i < graphics.length; i++) {\n            graphics[i].geometry.type = \"point\";\n            gr = new Graphic({\n              geometry: graphics[i].geometry,\n              symbol: querySymb\n            });\n\n            _this2.queryMarkerLayer.add(gr);\n          }\n        });\n      } //let's see if the support layer has been added to\n\n\n      if (this.props.graphic.needSupRefresh === true) {\n        //       console.lg('refershing support layer on map after add')\n        this.featureLayer.refresh();\n      } // updates marker use nextProps or this.props for the map clicks?  if bugs come\n      // up , check this part\n\n\n      if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && !this.props.graphic.selSupportGeom) {} //  console.lg('not even sure why')   return;\n      //changes map graphics when new support is selected\n\n\n      if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && this.props.map.support !== prevProps.map.support) {\n        this.selPoint.geometry = this.props.graphic.selSupportGeom;\n\n        if (this.props.graphic.leftKey === 1 || this.props.graphic.leftKey === leftKeys.SS_VIEW_REPEAT) {\n          this.props.startStreetSmartViewer([this.selPoint], layerURLs(this.props), 4326, 2248, this.props.graphic.viewWidth, this.props.graphic.viewExtentWidth, this.props.graphic.view_spatRef, false, leftKeys.SS_VIEW_FIRST, this.props.map.retiredPosts);\n        }\n\n        this.selPoint.symbol = this.symb;\n        this.markerLayer.removeAll();\n        this.markerLayer.add(this.selPoint);\n        this.view.zoom = 20;\n        this.view.center = this.selPoint.geometry;\n      } else if (this.props.graphic.mapClickMode === mapModes.ADD_SUPPORT_MODE && prevState.newSupportClickGeom !== this.state.newSupportClickGeom) {\n        // gonna try to keep the selected point in local state console.lg('changing add\n        // support target graphic because of click')\n        var addMark = {};\n        addMark.geometry = this.state.newSupportClickGeom;\n        this.view.center = addMark.geometry;\n        this.view.zoom = 19;\n      }\n\n      if (this.props.graphic.zoomPoint != prevProps.graphic.zoomPoint) {\n        var marPoint = {};\n        marPoint.geometry = cloneDeep(this.props.graphic.zoomPoint);\n        marPoint.symbol = this.marSymb;\n        this.queryMarkerLayer.removeAll();\n        this.queryMarkerLayer.addMany([marPoint]);\n        this.view.center = marPoint.geometry;\n        this.view.zoom = 19;\n      }\n\n      if (this.props.map.retiredPosts != prevProps.map.retiredPosts) {\n        if (this.props.map.retiredPosts === 2) {\n          this.featureLayer.definitionExpression = ' SUPPORTSTATUS = 5';\n        } else if (this.props.map.retiredPosts === 1) {\n          this.featureLayer.definitionExpression = 'SUPPORTSTATUS = 1 OR SUPPORTSTATUS = 5';\n        } else if (this.props.map.retiredPosts === 3) {\n          this.featureLayer.definitionExpression = 'SUPPORTSTATUS = 627';\n        } else {\n          this.featureLayer.definitionExpression = \"SUPPORTSTATUS = 1\";\n        }\n      }\n\n      this.view.surface.style.cursor = this.props.graphic.cursor;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Container, {\n        ref: \"mapDiv\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      });\n    } // ESRI JSAPI\n\n  }]);\n\n  return MapView;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    config: state.config,\n    auth: state.auth,\n    map: state.map,\n    graphic: state.graphic\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MapView);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\esri\\map\\MapView.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","graphicActions","mapModes","leftKeys","loadModules","createView","cloneDeep","styled","pointToExtent","layerURLs","Container","div","containerID","MapView","props","selPoint","geometry","markerLayer","queryMarkerLayer","featureLayer","conicLayer","drawExtentLayer","symb","addSymb","marSymb","geom","startup","mapConfig","node","isScene","then","response","init","setupWidgetsAndLayers","finishedLoading","error","console","window","setTimeout","onMapLoaded","view","extent","getSelectedSupport","expandedMapPoint","onMapClicked","mapClickHandler","evt","setPointBuffer","width","spatialReference","graphic","mapClickMode","SELECT_SUPPORT_MODE","mapPoint","ADD_SUPPORT_MODE","newSupportFeature","atrributes","x","longitude","y","latitude","type","setState","newSupportClickGeom","startStreetSmartViewer","viewWidth","viewExtentWidth","view_spatRef","setMapClickMode","surface","style","cursor","DRAW_MODE","draw","action","drawLayer","setMode","setExtent","setQueryCustomExtent","spatRef","Draw","Graphic","createPolygonGraphic","vertices","removeAll","polygon","rings","symbol","color","outline","add","create","mode","on","log","rslt","mapMoveHandler","onMapChanged","map","FeatureLayer","GraphicsLayer","url","supports","definitionExpression","outFields","id","addMany","size","state","is3DScene","nextProps","nextState","coneGraphic","queryFeatures","length","needSupRefresh","support","showQuery","ssOverlay","graphics","zoomPoint","retiredPosts","prevProps","prevState","snapshot","conePointGraphic","querySymb","removeQueryResults","gr","i","refresh","selSupportGeom","leftKey","SS_VIEW_REPEAT","SS_VIEW_FIRST","zoom","center","addMark","marPoint","mapStateToProps","config","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\r\n// or agreed to in writing, software distributed under the License is\r\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied. See the License for the specific language\r\n// governing permissions and limitations under the License.â€‹ NOTE This is a\r\n// \"special\" react component that does not strictly play by React's rules.\r\n//\r\n// Conceptually, this component creates a \"portal\" in React by closing its\r\n// render method off from updates (by simply rendering a div and never accepting\r\n// re-renders) then reconnecting itself to the React lifecycle by listening for\r\n// any new props (using componentWillReceiveProps) React\r\nimport React, {Component} from 'react';\r\n\r\n// Redux\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../../redux/reducers/map';\r\nimport {actions as graphicActions} from '../../../redux/reducers/graphic'\r\nimport {mapModes} from '../../../redux/reducers/graphic'\r\nimport {leftKeys} from '../../../SignworksJSON'\r\n// ESRI\r\nimport {loadModules} from 'esri-loader';\r\nimport {createView} from '../../../utils/esriHelper';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n// Styled Components\r\nimport styled from 'styled-components';\r\n\r\nimport {pointToExtent, layerURLs} from '../../../utils/JSAPI';\r\n\r\nconst Container = styled.div `\r\n  height: 100%;\r\n  width: 100%;\r\n`;\r\n\r\n// Variables\r\nconst containerID = \"map-view-container\";\r\n\r\nclass MapView extends Component {\r\n    selPoint = {\r\n        geometry: null\r\n    };\r\n    markerLayer = null;\r\n    queryMarkerLayer = null;\r\n    featureLayer = null;\r\n    conicLayer = null;\r\n    drawExtentLayer = null;\r\n    symb = null;\r\n    addSymb = null;\r\n    marSymb = null;\r\n    geom = null;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            newSupportClickGeom: null\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.startup(this.props.mapConfig, containerID, this.props.is3DScene);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n\r\n        //view cone needs adjustment\r\n        if (this.props.graphic.coneGraphic !== nextProps.graphic.coneGraphic) {\r\n            //    console.lg('update due to view cone');\r\n            return true;\r\n        }\r\n        if (nextState.newSupportClickGeom !== this.state.newSupportClickGeom) {\r\n            //        console.lg('update because map clicked to select target area for new\r\n            // support')\r\n            return true;\r\n        }\r\n\r\n        if (this.props.graphic.queryFeatures.length > 0 && this.props.graphic.queryFeatures !== nextProps.graphic.queryFeatures) {\r\n            //        console.lg('update because of query features');\r\n            return true;\r\n        }\r\n        if (this.props.graphic.needSupRefresh === true) {\r\n            //       console.lg('update to refresh for new support feature added');\r\n            return true;\r\n        }\r\n\r\n        if (this.props.graphic.mapClickMode !== nextProps.graphic.mapClickMode) {\r\n            //        console.lg('update because mapClickMode changed.  Not sure this does\r\n            // anything')\r\n            return true;\r\n        }\r\n\r\n        if (this.props.map.support !== nextProps.map.support) {\r\n            //         console.lg('update because map.support changed');\r\n            return true\r\n        }\r\n        //removes superQuery results from view based on store\r\n        if (nextProps.graphic.showQuery !== this.props.graphic.showQuery) {\r\n            //          console.lg('update because showQuery has changed');\r\n            return true;\r\n        }\r\n\r\n        if (nextProps.graphic.ssOverlay === null & this.conicLayer.graphics.length > 0) {\r\n            //     console.lg('update because view cone needs to be removed');\r\n            return true;\r\n        }\r\n\r\n        if (nextProps.graphic.zoomPoint != this.props.graphic.zoomPoint) {\r\n\r\n            return true;\r\n        }\r\n        if (nextProps.map.retiredPosts != this.props.map.retiredPosts) {\r\n            return true;\r\n        }\r\n        //    console.lg('did not update');\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        // changes cone graphic in response to evt\r\n        if (this.props.graphic.coneGraphic !== prevProps.graphic.coneGraphic) {\r\n\r\n            this\r\n                .conicLayer\r\n                .removeAll();\r\n\r\n            //   console.lg('unexpected call to cone graphics');\r\n            this\r\n                .queryMarkerLayer\r\n                .removeAll();\r\n            this\r\n                .conicLayer\r\n                .add(this.props.graphic.coneGraphic)\r\n            this\r\n                .conicLayer\r\n                .add(this.props.graphic.conePointGraphic)\r\n            return;\r\n        }\r\n        // removes all query graphics\r\n        if (this.props.graphic.showQuery === false && this.queryMarkerLayer.graphics.length > 0) {\r\n            //      console.lg('removing query markers')\r\n            this\r\n                .queryMarkerLayer\r\n                .removeAll();\r\n        }\r\n        //removes cone graphics\r\n        if (this.props.graphic.ssOverlay === null && this.conicLayer.graphics.length > 0) {\r\n            //      console.lg('removing conic graphics')\r\n            this\r\n                .conicLayer\r\n                .removeAll();\r\n        }\r\n\r\n        //if there are query features in the store, this block displays them in the view\r\n        if (this.props.graphic.queryFeatures.length > 0) {\r\n            //       console.lg('adding query features');\r\n            const graphics = [...this.props.graphic.queryFeatures]\r\n            // add symbols\r\n            let querySymb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()  NEVER TRUST AUTOCAST\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"35px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'blue',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n\r\n            //this just sets query results in the store to empty array\r\n            this\r\n                .props\r\n                .removeQueryResults();\r\n            // create graphics and add them to layer\r\n            loadModules([\"esri/Graphic\"]).then(([Graphic]) => {\r\n                let gr = null;\r\n                for (let i = 0; i < graphics.length; i++) {\r\n                    graphics[i].geometry.type = \"point\"\r\n                    gr = new Graphic({geometry: graphics[i].geometry, symbol: querySymb})\r\n\r\n                    this\r\n                        .queryMarkerLayer\r\n                        .add(gr)\r\n                }\r\n\r\n            })\r\n\r\n        }\r\n\r\n        //let's see if the support layer has been added to\r\n\r\n        if (this.props.graphic.needSupRefresh === true) {\r\n            //       console.lg('refershing support layer on map after add')\r\n            this\r\n                .featureLayer\r\n                .refresh();\r\n        }\r\n\r\n        // updates marker use nextProps or this.props for the map clicks?  if bugs come\r\n        // up , check this part\r\n        if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && !this.props.graphic.selSupportGeom) {\r\n            //  console.lg('not even sure why')   return;\r\n        }\r\n        //changes map graphics when new support is selected\r\n        if (this.props.graphic.mapClickMode === mapModes.SELECT_SUPPORT_MODE && this.props.map.support !== prevProps.map.support) {\r\n\r\n            this.selPoint.geometry = this.props.graphic.selSupportGeom;\r\n            if (this.props.graphic.leftKey === 1 || this.props.graphic.leftKey === leftKeys.SS_VIEW_REPEAT) {\r\n\r\n                this\r\n                    .props\r\n                    .startStreetSmartViewer([this.selPoint], layerURLs(this.props), 4326, 2248, this.props.graphic.viewWidth, this.props.graphic.viewExtentWidth, this.props.graphic.view_spatRef, false, leftKeys.SS_VIEW_FIRST, this.props.map.retiredPosts)\r\n            }\r\n\r\n            this.selPoint.symbol = this.symb;\r\n            this\r\n                .markerLayer\r\n                .removeAll();\r\n            this\r\n                .markerLayer\r\n                .add(this.selPoint)\r\n\r\n            this.view.zoom = 20\r\n\r\n            this.view.center = this.selPoint.geometry\r\n        } else if (this.props.graphic.mapClickMode === mapModes.ADD_SUPPORT_MODE && prevState.newSupportClickGeom !== this.state.newSupportClickGeom) {\r\n            // gonna try to keep the selected point in local state console.lg('changing add\r\n            // support target graphic because of click')\r\n            let addMark = {};\r\n            addMark.geometry = this.state.newSupportClickGeom;\r\n\r\n            this.view.center = addMark.geometry;\r\n            this.view.zoom = 19;\r\n        }\r\n\r\n        if (this.props.graphic.zoomPoint != prevProps.graphic.zoomPoint) {\r\n            let marPoint = {};\r\n            marPoint.geometry = cloneDeep(this.props.graphic.zoomPoint);\r\n\r\n            marPoint.symbol = this.marSymb;\r\n\r\n            this\r\n                .queryMarkerLayer\r\n                .removeAll();\r\n            this\r\n                .queryMarkerLayer\r\n                .addMany([marPoint]);\r\n            this.view.center = marPoint.geometry;\r\n            this.view.zoom = 19;\r\n\r\n        }\r\n        if (this.props.map.retiredPosts != prevProps.map.retiredPosts) {\r\n\r\n            if (this.props.map.retiredPosts === 2) {\r\n                this.featureLayer.definitionExpression = ' SUPPORTSTATUS = 5'\r\n            } else if (this.props.map.retiredPosts === 1) {\r\n                this.featureLayer.definitionExpression = 'SUPPORTSTATUS = 1 OR SUPPORTSTATUS = 5'\r\n            } else if (this.props.map.retiredPosts === 3) {\r\n                this.featureLayer.definitionExpression = 'SUPPORTSTATUS = 627'\r\n            } else {\r\n                this.featureLayer.definitionExpression = \"SUPPORTSTATUS = 1\"\r\n            }\r\n        }\r\n\r\n        this.view.surface.style.cursor = this.props.graphic.cursor;\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container ref=\"mapDiv\" id={containerID}></Container>\r\n        );\r\n    }\r\n\r\n    // ESRI JSAPI\r\n    startup = (mapConfig, node, isScene = false) => {\r\n        createView(mapConfig, node, isScene).then(response => {\r\n            this.init(response);\r\n\r\n            this.setupWidgetsAndLayers();\r\n            this.finishedLoading();\r\n\r\n        }, error => {\r\n            console.error(\"maperr\", error);\r\n            window.setTimeout(() => {\r\n                this.startup(mapConfig, node);\r\n            }, 1000);\r\n        })\r\n    }\r\n\r\n    finishedLoading = () => {\r\n        // Update app state only after map and widgets are loaded\r\n        this\r\n            .props\r\n            .onMapLoaded(this.view.extent);\r\n    }\r\n\r\n    getSelectedSupport = (expandedMapPoint) => {\r\n        // this line takes the buffered point and sends it  to the map reducer which\r\n        // punts it to the _setSupport saga which queries and gets the support, signs,\r\n        // timebands, etc and writes them to the store, where they dictate the Rightbar\r\n        // display.  Once the store changes the action picks up in willReceiveProps\r\n\r\n        this\r\n            .props\r\n            .onMapClicked(expandedMapPoint, layerURLs(this.props));\r\n\r\n    }\r\n\r\n    mapClickHandler = (evt) => {\r\n        // this redux call moves info about the view into the store so that an extent\r\n        // around the point can be calculated I don't think it changes, (todo) see about\r\n        // moving it to map load or something\r\n        this\r\n            .props\r\n            .setPointBuffer(this.view.width, this.view.extent.width, this.view.spatialReference);\r\n\r\n        // in any map app that's more than a viewer, the map click event is gonna be\r\n        // complicated so much so that I wrote this a month ago and it is already\r\n        // getting away from me so we shall comment.  The click event is first captured\r\n        // here then evaluated against the store to decide what it is supposed to do\r\n        switch (this.props.graphic.mapClickMode) {\r\n                //the click is supposed to select an existing support on the map\r\n            case mapModes.SELECT_SUPPORT_MODE:\r\n\r\n                // this creates a small extent buffer around the mapPoint to aid in the select\r\n                // query its callback is getSelectedSupport, above\r\n                pointToExtent(this.view.width, this.view.extent.width, this.view.spatialReference, evt.mapPoint, 12, this.getSelectedSupport);\r\n                break;\r\n                //ok now we are in add support mode\r\n            case mapModes.ADD_SUPPORT_MODE:\r\n                // we should create a 'fake' feature out of the map click event console.lg('map\r\n                // // click happens here')\r\n\r\n                const newSupportFeature = {\r\n                    atrributes: {},\r\n                    geometry: {\r\n                        x: evt.mapPoint.longitude,\r\n                        y: evt.mapPoint.latitude,\r\n                        type: 'point'\r\n                    }\r\n                }\r\n                //grabbing a local copy of the mapPoint.geom for the marker\r\n\r\n                this.setState({newSupportClickGeom: evt.mapPoint});\r\n                this\r\n                    .props\r\n                    .startStreetSmartViewer([newSupportFeature], layerURLs(this.props), 4326, 2248, this.props.graphic.viewWidth, this.props.graphic.viewExtentWidth, this.props.graphic.view_spatRef, true);\r\n                this\r\n                    .props\r\n                    .setMapClickMode(mapModes.SELECT_SUPPORT_MODE, 'default');\r\n                this.view.surface.style.cursor = \"default\";\r\n                break;\r\n            case mapModes.DRAW_MODE:\r\n                let draw,\r\n                    action;\r\n                const drawLayer = this.drawExtentLayer;\r\n                const setMode = this\r\n                .props\r\n                .setMapClickMode;\r\n                const setExtent = this.props.setQueryCustomExtent;\r\n                const spatRef = this.view.spatialReference;\r\n\r\n                loadModules(['esri/views/draw/Draw', \"esri/Graphic\"]).then(([Draw, Graphic]) => {\r\n\r\n                    const createPolygonGraphic = function (vertices) {\r\n                        drawLayer.removeAll();\r\n\r\n                        var polygon = {\r\n                            type: \"polygon\", // autocasts as Polygon\r\n                            rings: vertices,\r\n                            spatialReference: spatRef\r\n                        };\r\n\r\n                        var graphic = new Graphic({\r\n                            geometry: polygon,\r\n                            symbol: {\r\n                                type: \"simple-fill\", // autocasts as SimpleFillSymbol\r\n                                color: \"purple\",\r\n                                style: \"none\",\r\n                                outline: { // autocasts as SimpleLineSymbol\r\n                                    color: \"black\",\r\n                                    width: 1\r\n                                }\r\n                            }\r\n                        });\r\n                        drawLayer.add(graphic);\r\n                        return graphic;\r\n                    }\r\n\r\n                    draw = new Draw({view: this.view});\r\n                    action = draw.create(\"polygon\", {mode: \"hybrid\"});\r\n                    // PolygonDrawAction.vertex-add Fires when user clicks, or presses the \"F\" key.\r\n                    // Can also be triggered when the \"R\" key is pressed to redo.\r\n                    action.on(\"vertex-add\", function (evt) {\r\n                        console.log('add', evt)\r\n                        createPolygonGraphic(evt.vertices);\r\n                    });\r\n                    // PolygonDrawAction.vertex-remove Fires when the \"Z\" key is pressed to undo the\r\n                    // last added vertex\r\n                    action.on(\"vertex-remove\", function (evt) {\r\n                        console.log('remove', evt.vertices)\r\n                        createPolygonGraphic(evt.vertices);\r\n                    });\r\n                    // Fires when the pointer moves over the view\r\n                    action.on(\"cursor-update\", function (evt) {\r\n                        console.log( 'update', evt)\r\n                        createPolygonGraphic(evt.vertices);\r\n                    });\r\n                    // Add a graphic representing the completed polygon when user double-clicks on\r\n                    // the view or presses the \"C\" key\r\n                    action.on(\"draw-complete\", function (evt) {\r\n                        console.log('complete', evt)\r\n                        const rslt = createPolygonGraphic(evt.vertices);\r\n                        console.log('rslt', rslt)\r\n                        setExtent(rslt.geometry);\r\n                       setMode(mapModes.SELECT_SUPPORT_MODE, {cursor:\"default\"});\r\n                        \r\n                    });\r\n\r\n                });\r\n\r\n                break;\r\n            default:\r\n                return\r\n\r\n        }\r\n\r\n    }\r\n\r\n    mapMoveHandler = (evt) => {\r\n        this\r\n            .props\r\n            .onMapChanged(this.view.extent);\r\n    }\r\n\r\n    init = (response) => {\r\n        this.view = response.view\r\n        this.map = response.view.map;\r\n\r\n    }\r\n\r\n    setupWidgetsAndLayers = () => {\r\n        loadModules(['esri/layers/FeatureLayer', \"esri/layers/GraphicsLayer\", 'esri/Graphic']).then(([FeatureLayer, GraphicsLayer, Graphic]) => {\r\n\r\n            this.featureLayer = new FeatureLayer({\r\n                url: layerURLs(this.props).supports,\r\n                definitionExpression: \"SUPPORTSTATUS = 1\",\r\n                outFields: [\"*\"],\r\n                id: \"support\"\r\n            });\r\n            this.queryMarkerLayer = new GraphicsLayer();\r\n            this.markerLayer = new GraphicsLayer();\r\n            this.conicLayer = new GraphicsLayer();\r\n            this.drawExtentLayer = new GraphicsLayer();\r\n\r\n            //     this.map.basemap = baseMap;\r\n            this\r\n                .map\r\n                .addMany([this.featureLayer, this.queryMarkerLayer, this.markerLayer, this.conicLayer, this.drawExtentLayer]);\r\n            this\r\n                .view\r\n                .on(\"click\", this.mapClickHandler);\r\n\r\n            this\r\n                .view\r\n                .on(\"pointer-up\", this.mapMoveHandler);\r\n            this\r\n                .view\r\n                .on('mouse-wheel', this.mapMoveHandler)\r\n\r\n            this.symb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'magenta',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n            this.addSymb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                style: \"circle\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'green',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n            this.marSymb = {\r\n                type: \"simple-marker\", // autocasts as new SimpleMarkerSymbol()\r\n                style: \"square\",\r\n                color: [\r\n                    0, 255, 0, 0.0\r\n                ],\r\n                size: \"30px\", // pixels\r\n                outline: { // autocasts as new SimpleLineSymbol()\r\n                    color: 'green',\r\n                    width: 3 // points\r\n                }\r\n            };\r\n\r\n            this.selPoint = new Graphic({geometry: null, symbol: this.symb})\r\n\r\n            //   this.markerLayer.add(this.selPoint)\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({config: state.config, auth: state.auth, map: state.map, graphic: state.graphic});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MapView);\r\n"]},"metadata":{},"sourceType":"module"}