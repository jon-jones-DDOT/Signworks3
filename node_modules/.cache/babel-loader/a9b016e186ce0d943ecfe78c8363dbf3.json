{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { loadModules } from 'esri-loader';\n\nvar err = function err() {\n  alert('an error occurred in JSAPI');\n};\n\nvar getSupportLayer = function getSupportLayer() {\n  alert('geting souport layer');\n  loadModules(['esri/layers/FeatureLayer']).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        FeatureLayer = _ref2[0];\n\n    var fLayer = new FeatureLayer({\n      url: \"https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServer/0\",\n      outFields: [\"*\"]\n    });\n    return fLayer;\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n};\n\nexport function getSupportById(args) {\n  var id = args[0];\n  var layer = args[1];\n  loadModules([\"esri/tasks/support/Query\"]).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        Query = _ref4[0];\n\n    var query = new Query();\n    query.where = \"OBJECTID = \" + id;\n    query.outFields = [\"*\"];\n    query.returnGeometry = true;\n    alert('inside the JSAPI loaded');\n    layer.queryFeatures(query).then(function (results) {\n      alert('alleged results');\n\n      if (results.features.length > 0) {\n        return results.features[0];\n      } else {\n        alert('support was not retrieved');\n      }\n    }, err);\n  }).catch(function (err) {\n    // handle any errors\n    console.error(err);\n  });\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\utils\\JSAPI.js"],"names":["loadModules","err","alert","getSupportLayer","then","FeatureLayer","fLayer","url","outFields","catch","console","error","getSupportById","args","id","layer","Query","query","where","returnGeometry","queryFeatures","results","features","length"],"mappings":";AAAA,SAASA,WAAT,QAA4B,aAA5B;;AAIA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAK;AAAEC,EAAAA,KAAK,CAAE,4BAAF,CAAL;AAAqC,CAAxD;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BD,EAAAA,KAAK,CAAC,sBAAD,CAAL;AACAF,EAAAA,WAAW,CAAC,CAAI,0BAAJ,CAAD,CAAX,CACCI,IADD,CACM,gBAAqB;AAAA;AAAA,QAAlBC,YAAkB;;AAE1B,QAAMC,MAAM,GAAK,IAAID,YAAJ,CAAiB;AAC/BE,MAAAA,GAAG,EAAE,sFAD0B;AAC8DC,MAAAA,SAAS,EAAE,CAAC,GAAD;AADzE,KAAjB,CAAjB;AAIC,WAAOF,MAAP;AACD,GARD,EASCG,KATD,CASO,UAAAR,GAAG,EAAI;AACZ;AACAS,IAAAA,OAAO,CAACC,KAAR,CAAcV,GAAd;AACD,GAZD;AAaH,CAfD;;AAkBA,OAAO,SAAUW,cAAV,CAA0BC,IAA1B,EAAgC;AACrC,MAAMC,EAAE,GAAGD,IAAI,CAAC,CAAD,CAAf;AACA,MAAME,KAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;AAEEb,EAAAA,WAAW,CAAC,CAAS,0BAAT,CAAD,CAAX,CACCI,IADD,CACM,iBAAa;AAAA;AAAA,QAAXY,KAAW;;AACf,QAAIC,KAAK,GAAG,IAAID,KAAJ,EAAZ;AACAC,IAAAA,KAAK,CAACC,KAAN,GAAc,gBAAgBJ,EAA9B;AACAG,IAAAA,KAAK,CAACT,SAAN,GAAkB,CAAC,GAAD,CAAlB;AACAS,IAAAA,KAAK,CAACE,cAAN,GAAuB,IAAvB;AACAjB,IAAAA,KAAK,CAAG,yBAAH,CAAL;AACAa,IAAAA,KAAK,CAACK,aAAN,CAAoBH,KAApB,EAA2Bb,IAA3B,CACI,UAAUiB,OAAV,EAAmB;AACfnB,MAAAA,KAAK,CAAC,iBAAD,CAAL;;AACA,UAAImB,OAAO,CAACC,QAAR,CAAiBC,MAAjB,GAA0B,CAA9B,EAAiC;AAC9B,eAAOF,OAAO,CAACC,QAAR,CAAiB,CAAjB,CAAP;AACF,OAFD,MAEO;AACHpB,QAAAA,KAAK,CAAC,2BAAD,CAAL;AACH;AACJ,KARL,EASID,GATJ;AAaH,GApBD,EAqBCQ,KArBD,CAqBO,UAAAR,GAAG,EAAI;AACZ;AACAS,IAAAA,OAAO,CAACC,KAAR,CAAcV,GAAd;AACD,GAxBD;AAyBH","sourcesContent":["import { loadModules } from 'esri-loader';\r\n\r\n\r\n\r\nconst err = () =>{ alert ('an error occurred in JSAPI')}\r\n\r\nconst getSupportLayer = () => {\r\n    alert('geting souport layer')\r\n    loadModules([   'esri/layers/FeatureLayer'])\r\n    .then(([ FeatureLayer]) => {\r\n\r\n     const fLayer =   new FeatureLayer({\r\n        url: \"https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServer/0\", outFields: [\"*\"]\r\n      });\r\n      \r\n      return fLayer;\r\n    })\r\n    .catch(err => {\r\n      // handle any errors\r\n      console.error(err);\r\n    });\r\n}\r\n\r\n\r\nexport function  getSupportById (args) {\r\n  const id = args[0];\r\n  const layer = args[1];\r\n   \r\n    loadModules([        \"esri/tasks/support/Query\"])\r\n    .then(([Query]) => {\r\n        let query = new Query();\r\n        query.where = \"OBJECTID = \" + id;\r\n        query.outFields = [\"*\"];\r\n        query.returnGeometry = true;\r\n        alert ( 'inside the JSAPI loaded')\r\n        layer.queryFeatures(query).then(\r\n            function (results) {\r\n                alert('alleged results')\r\n                if (results.features.length > 0) {\r\n                   return results.features[0];\r\n                } else {\r\n                    alert('support was not retrieved')\r\n                }\r\n            },\r\n            err);\r\n\r\n     \r\n     \r\n    })\r\n    .catch(err => {\r\n      // handle any errors\r\n      console.error(err);\r\n    });\r\n}\r\n "]},"metadata":{},"sourceType":"module"}