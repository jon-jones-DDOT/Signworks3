{"ast":null,"code":"import _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\Signs\\\\Zone.js\";\nimport React, { Component } from 'react';\nimport './Zone.css';\nvar amp = /[&]/;\n\nvar Zone =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Zone, _Component);\n\n  function Zone(props) {\n    var _this;\n\n    _classCallCheck(this, Zone);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Zone).call(this, props));\n\n    _this.zoneParse = function (zoneValue) {\n      // why don't we just set the controls directly?  Because they don't exist yet. we\n      // don't have to check for all possible garbage because the zoneValue has\n      // already passed ZoneVerify Don't run this without running and passing\n      // zoneVerify first!\n      var zoneArray = [,,];\n\n      if (zoneValue) {\n        // set first cell\n        zoneArray[0] = zoneValue[0];\n      } else {\n        //empty zone id\n        return \"\";\n      } // set second cell\n\n\n      if (!zoneValue[1]) {\n        //just one ward no anc\n        return zoneArray;\n      } else if (amp.test(zoneValue[1])) {\n        //second digit is amp so third must be ward\n        zoneArray[2] = zoneValue[2];\n\n        if (!zoneValue[3]) {\n          // ward + amp + ward and done\n          return zoneArray;\n        } else {\n          //ward + amp + ward + anc and done\n          zoneArray[3] = zoneValue[3];\n          return zoneArray;\n        }\n      } else {\n        //ward + anc + ...\n        zoneArray[1] = zoneValue[1];\n\n        if (amp.test(zoneValue[2])) {\n          zoneArray[2] = zoneValue[3];\n\n          if (!zoneValue[4]) {\n            // ward + anc + amp + ward and done\n            return zoneArray;\n          } else {\n            // ward + anc + amp + ward + anc\n            zoneArray[3] = zoneValue[4];\n            return zoneArray;\n          }\n        } else {\n          // ward + anc and done\n          return zoneArray;\n        }\n      }\n    };\n\n    _this.state = {\n      ward1: null,\n      anc1: null,\n      ward2: null,\n      anc2: null\n    };\n    return _this;\n  }\n\n  _createClass(Zone, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.zoneParse(this.props.zone));\n    }\n  }]);\n\n  return Zone;\n}(Component);\n\nexport { Zone as default };","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\Zone.js"],"names":["React","Component","amp","Zone","props","zoneParse","zoneValue","zoneArray","test","state","ward1","anc1","ward2","anc2","zone"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;AACA,IAAMC,GAAG,GAAG,KAAZ;;IAOqBC,I;;;;;AACjB,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;;AADe,UAelBC,SAfkB,GAeN,UAACC,SAAD,EAAe;AACxB;AACA;AACA;AACA;AACA,UAAIC,SAAS,GAAG,IAAhB;;AACA,UAAID,SAAJ,EAAe;AACX;AACAC,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACH,OAHD,MAGO;AACH;AACA,eAAO,EAAP;AACH,OAZuB,CAaxB;;;AACA,UAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,eAAOC,SAAP;AACH,OAHD,MAGO,IAAIL,GAAG,CAACM,IAAJ,CAASF,SAAS,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AAC/B;AACAC,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,YAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,iBAAOC,SAAP;AACH,SAHD,MAGO;AACH;AACAA,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACA,iBAAOC,SAAP;AACH;AACJ,OAXM,MAWA;AACH;AACAA,QAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,YAAIJ,GAAG,CAACM,IAAJ,CAASF,SAAS,CAAC,CAAD,CAAlB,CAAJ,EAA4B;AACxBC,UAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;;AACA,cAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EAAmB;AACf;AACA,mBAAOC,SAAP;AACH,WAHD,MAGO;AACH;AACAA,YAAAA,SAAS,CAAC,CAAD,CAAT,GAAeD,SAAS,CAAC,CAAD,CAAxB;AACA,mBAAOC,SAAP;AACH;AACJ,SAVD,MAUO;AACH;AACA,iBAAOA,SAAP;AACH;AACJ;AAEJ,KA9DkB;;AAGf,UAAKE,KAAL,GAAa;AAETC,MAAAA,KAAK,EAAC,IAFG;AAGTC,MAAAA,IAAI,EAAC,IAHI;AAITC,MAAAA,KAAK,EAAC,IAJG;AAKTC,MAAAA,IAAI,EAAC;AALI,KAAb;AAHe;AAYlB;;;;6BAmDM;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKR,SAAL,CAAe,KAAKD,KAAL,CAAWU,IAA1B,CADH,CADF;AAKD;;;;EAtE+Bb,S;;SAAbE,I","sourcesContent":["import React, { Component } from 'react'\r\nimport './Zone.css'\r\nconst amp = /[&]/;\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class Zone extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n            ward1:null,\r\n            anc1:null,\r\n            ward2:null,\r\n            anc2:null\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n     zoneParse = (zoneValue) => {\r\n        // why don't we just set the controls directly?  Because they don't exist yet. we\r\n        // don't have to check for all possible garbage because the zoneValue has\r\n        // already passed ZoneVerify Don't run this without running and passing\r\n        // zoneVerify first!\r\n        let zoneArray = [,,];\r\n        if (zoneValue) {\r\n            // set first cell\r\n            zoneArray[0] = zoneValue[0]\r\n        } else {\r\n            //empty zone id\r\n            return \"\";\r\n        }\r\n        // set second cell\r\n        if (!zoneValue[1]) {\r\n            //just one ward no anc\r\n            return zoneArray;\r\n        } else if (amp.test(zoneValue[1])) {\r\n            //second digit is amp so third must be ward\r\n            zoneArray[2] = zoneValue[2];\r\n            if (!zoneValue[3]) {\r\n                // ward + amp + ward and done\r\n                return zoneArray;\r\n            } else {\r\n                //ward + amp + ward + anc and done\r\n                zoneArray[3] = zoneValue[3];\r\n                return zoneArray;\r\n            }\r\n        } else {\r\n            //ward + anc + ...\r\n            zoneArray[1] = zoneValue[1];\r\n            if (amp.test(zoneValue[2])) {\r\n                zoneArray[2] = zoneValue[3];\r\n                if (!zoneValue[4]) {\r\n                    // ward + anc + amp + ward and done\r\n                    return zoneArray;\r\n                } else {\r\n                    // ward + anc + amp + ward + anc\r\n                    zoneArray[3] = zoneValue[4];\r\n                    return zoneArray;\r\n                }\r\n            } else {\r\n                // ward + anc and done\r\n                return zoneArray;\r\n            }\r\n        }\r\n    \r\n    }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.zoneParse(this.props.zone)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}