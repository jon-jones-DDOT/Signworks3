{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSignOrder),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignOrder);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent, getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var features, support, signs, _support, signsREsp, signArray, _signs, muttQueryString, i, _i, results;\n\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\n\n        case 3:\n          features = _context.sent;\n\n          if (!(features.features.length === 0)) {\n            _context.next = 11;\n            break;\n          }\n\n          support = {\n            selSupport: null\n          };\n          signs = {\n            signs: []\n          };\n          _context.next = 9;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 9:\n          _context.next = 32;\n          break;\n\n        case 11:\n          //create support payload from support returned\n          _support = {\n            selSupport: features.features[0]\n          }; //retrieve associated sign features from AGS\n\n          _context.next = 14;\n          return call(getRelatedSigns, [_support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 14:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features;\n          console.log('arr', signArray); // start creating sign payload\n\n          _signs = {\n            signs: []\n          }; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          for (i = 0; i < signsREsp.data.features.length; i++) {\n            muttQueryString += signsREsp.data.features[i].attributes.SIGNCODE + \",\";\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n          //  const muttData = yield call(getMUTCDS,[muttQueryString])\n          //  console.log('mutts', muttData)\n          //loop through globalIDS and get timebands\n\n          _i = 0;\n\n        case 22:\n          if (!(_i < signArray.length)) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 25;\n          return call(getRelatedTimebands, [signArray[_i]]);\n\n        case 25:\n          results = _context.sent;\n          console.log(\"timebandit\", results);\n\n        case 27:\n          _i++;\n          _context.next = 22;\n          break;\n\n        case 30:\n          _context.next = 32;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: _support,\n              signs: _signs\n            }\n          });\n\n        case 32:\n          _context.next = 37;\n          break;\n\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 37:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 34]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n} // WORKER //\n\nfunction setSignOrder(action) {\n  var resp, support, signsREsp, signs;\n  return _regeneratorRuntime.wrap(function setSignOrder$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(saveSignOrder, [action.payload.features]);\n\n        case 3:\n          resp = _context3.sent;\n          support = {\n            selSupport: action.payload.support\n          };\n          _context3.next = 7;\n          return call(getRelatedSigns, [support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 7:\n          signsREsp = _context3.sent;\n          signs = {\n            signs: signsREsp.data.features\n          }; // Put config in store\n\n          _context3.next = 11;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 11:\n          _context3.next = 16;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSignOrder, ', _context3.t0);\n\n        case 16:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[0, 13]]);\n} // WATCHER //\n\n\nexport function watchSignOrder() {\n  return _regeneratorRuntime.wrap(function watchSignOrder$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_map.js"],"names":["setSelectSupport","watchLayers","setSignOrder","watchSignOrder","call","put","takeLatest","types","mapTypes","getSupportByExtent","getRelatedSigns","saveSignOrder","getMUTCDS","getRelatedTimebands","action","payload","geom","layer","features","length","support","selSupport","signs","type","SET_SELECTED_SUPPORT","signsREsp","signArray","data","console","log","muttQueryString","i","attributes","SIGNCODE","replace","results","MAP_CLICKED","resp","SIGN_ORDER_CHANGED"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent, getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.features.length === 0) {\r\n            const support = {\r\n                selSupport: null\r\n            };\r\n            const signs = {\r\n                signs: []\r\n            };\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            const support = {\r\n                selSupport: features.features[0]\r\n            };\r\n            //retrieve associated sign features from AGS\r\n            const signsREsp = yield call(getRelatedSigns, [\r\n                support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                        'er/1/query'\r\n            ])\r\n            const signArray = signsREsp.data.features;\r\n            console.log('arr', signArray)\r\n            // start creating sign payload\r\n            const signs = {\r\n                signs: []\r\n            };\r\n\r\n            // create a string to get back MUTCD metadata for all signs on post\r\n            \r\n            let muttQueryString = \"\";\r\n           \r\n            for (let i = 0; i < signsREsp.data.features.length; i++) {\r\n                    muttQueryString += signsREsp.data.features[i].attributes.SIGNCODE + \",\";                  \r\n            }\r\n            muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n\r\n            // call out to Sign Catalog API to get MUTCD metadata\r\n          //  const muttData = yield call(getMUTCDS,[muttQueryString])\r\n          //  console.log('mutts', muttData)\r\n\r\n          //loop through globalIDS and get timebands\r\n          for (let i =0;i <signArray.length; i++){\r\n              const results = yield call(getRelatedTimebands,[signArray[i]])\r\n              console.log(\"timebandit\", results)\r\n          }\r\n\r\n            // Put config in store\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        }\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n\r\n// WORKER //\r\n\r\nfunction * setSignOrder(action) {\r\n\r\n    try {\r\n\r\n        // call API to fetch config\r\n\r\n        const resp = yield call(saveSignOrder, [action.payload.features]);\r\n       \r\n        const support = {\r\n            selSupport: action.payload.support\r\n        };\r\n        const signsREsp = yield call(getRelatedSigns, [\r\n            support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                    'er/1/query'\r\n        ])\r\n\r\n        const signs = {\r\n            signs: signsREsp.data.features\r\n        };\r\n\r\n        // Put config in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSignOrder, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchSignOrder() {\r\n\r\n    yield takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}