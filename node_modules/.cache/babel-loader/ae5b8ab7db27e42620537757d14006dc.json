{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\StreetSmart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { mapModes, actions as graphicActions } from '../../redux/reducers/graphic';\nimport { projectGeometry, createTriangle } from '../../utils/JSAPI';\nimport './StreetSmart.css';\nvar containerID = \"StreetSmart-container\";\n\nvar StreetSmart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreetSmart, _Component);\n\n  function StreetSmart(props) {\n    var _this;\n\n    _classCallCheck(this, StreetSmart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreetSmart).call(this, props));\n\n    _this.ssCancel = function () {\n      var msEvents = window.StreetSmartApi.Events.measurement;\n      window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED);\n      window.StreetSmartApi.destroy({\n        targetElement: document.getElementById(containerID)\n      });\n\n      _this.props.closeStreetSmartViewer();\n    };\n\n    _this.startup = function (divId) {\n      var x = _this.props.graphic.ssInputGeom[0].x;\n      var y = _this.props.graphic.ssInputGeom[0].y;\n      var geoJSONSelect = _this.props.graphic.ssgeoJSONselPoint;\n      var geoJSONNeighbors = _this.props.graphic.ssOverlay;\n      var editMode = _this.props.graphic.editMode;\n      var save = _this.props.newSupport;\n      var layers = _this.props.config.featureURLs;\n      var ciao = _this.props.setMapClickMode;\n      var bye = _this.ssCancel;\n      var setState = _this.setState;\n      var PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' + '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' + 'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' + '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' + '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' + 'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' + 'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' + 'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' + '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' + 'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' + '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\n      var selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' + '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' + 'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' + 'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' + '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' + 'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' + 'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' + 'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' + 'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' + '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' + 'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' + '</UserStyle></NamedLayer></StyledLayerDescriptor>';\n      console.log('this.state :', _this.state);\n      var options = [{\n        name: \"Nearby Supports\",\n        geojson: geoJSONNeighbors,\n        sldXMLtext: PointsSLD\n      }, {\n        name: \"Selected Support\",\n        geojson: geoJSONSelect,\n        sldXMLtext: selectSLD\n      }];\n\n      var clkMap = function clkMap(evt) {\n        var msEvents = window.StreetSmartApi.Events.measurement;\n        var result = window.StreetSmartApi.getActiveMeasurement();\n\n        if (result.features[0].geometry.coordinates == null) {\n          return;\n        }\n\n        save(result, layers);\n        window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED); // graphics.view.surface.style.cursor = \"default\"; callback.GetLRSInfo(result,\n        // callback);  close();\n\n        ciao(mapModes.SELECT_SUPPORT_MODE, 'default');\n        bye();\n      };\n\n      var projectCoords = function projectCoords(x, y, z) {\n        var newPoint = {\n          type: 'point',\n          x: x,\n          y: y,\n          z: z,\n          SpatialReference: {\n            wkid: 2248\n          }\n        };\n        projectGeometry([[newPoint], layers.geometryService, 2248, 102100]).then(function (resp) {\n          return createTriangle([resp]);\n        }, function (error) {\n          return function (error) {\n            alert(error);\n          };\n        }); //   mp = new Point(x, y, new SpatialReference(2248));\n        //  graphics.projectPoint(mp, 4326, createTriangle);\n      };\n\n      var changeView = function changeView(evt) {\n        // view cone stuff  \n        var imagePitch = evt.detail.pitch;\n        var imageYaw = evt.detail.yaw;\n        setState({\n          imagePitch: evt.detail.pitch,\n          imageYaw: evt.detail.yaw\n        });\n        projectCoords(window.panoramaViewer._panoramaViewer._activeRecording.xyz[0], window.panoramaViewer._panoramaViewer._activeRecording.xyz[1], window.panoramaViewer._panoramaViewer._activeRecording.xyz[2]);\n      };\n\n      var loadViewEnd = function loadViewEnd(evt) {\n        //some hack for the view cone \n        window.panoramaViewer.rotateLeft(1);\n      };\n\n      window.StreetSmartApi.init({\n        username: \"signworks\",\n        password: \"SIGNWORKS\",\n        apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\n        targetElement: document.getElementById(containerID),\n        srs: \"EPSG:2248\",\n        locale: 'en-us',\n        configurationUrl: 'https://atlas.cyclomedia.com/configuration',\n        addressSettings: {\n          locale: \"en\",\n          database: \"Nokia\"\n        }\n      }).then(function () {\n        var viewerType = window.StreetSmartApi.ViewerType.PANORAMA;\n        window.StreetSmartApi.open(x + \",\" + y, {\n          viewerType: viewerType,\n          srs: 'EPSG:2248'\n        }).then(function (result) {\n          if (result) {\n            for (var i = 0; i < result.length; i++) {\n              if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\n                window.panoramaViewer = result[i];\n              }\n\n              if (editMode) {\n                window.StreetSmartApi.startMeasurementMode(window.panoramaViewer, {\n                  geometry: window.StreetSmartApi.MeasurementGeometryType.POINT\n                });\n                var msEvents = window.StreetSmartApi.Events.measurement;\n                window.StreetSmartApi.on(msEvents.MEASUREMENT_CHANGED, clkMap);\n              }\n\n              window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\n              window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\n\n              for (var o in options) {\n                window.StreetSmartApi.addOverlay(options[o]);\n              }\n            }\n          }\n        }.bind(this)).catch(function (reason) {\n          alert('Failed to create component(s) through API: ' + reason);\n        });\n      }, function (err) {\n        alert('Api Init Failed!' + err);\n      });\n    };\n\n    _this.state = {\n      imageYaw: null,\n      imagePitch: null\n    };\n    return _this;\n  }\n\n  _createClass(StreetSmart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(containerID);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // Tell React to never update this component, that's up to us\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"StreetSmart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ssCancel\",\n        onClick: this.ssCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"div\", {\n        ref: \"ssDiv\",\n        className: \"ssPane\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreetSmart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\StreetSmart.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","mapModes","graphicActions","projectGeometry","createTriangle","containerID","StreetSmart","props","ssCancel","msEvents","window","StreetSmartApi","Events","measurement","off","MEASUREMENT_CHANGED","destroy","targetElement","document","getElementById","closeStreetSmartViewer","startup","divId","x","graphic","ssInputGeom","y","geoJSONSelect","ssgeoJSONselPoint","geoJSONNeighbors","ssOverlay","editMode","save","newSupport","layers","config","featureURLs","ciao","setMapClickMode","bye","setState","PointsSLD","selectSLD","console","log","state","options","name","geojson","sldXMLtext","clkMap","evt","result","getActiveMeasurement","features","geometry","coordinates","SELECT_SUPPORT_MODE","projectCoords","z","newPoint","type","SpatialReference","wkid","geometryService","then","resp","error","alert","changeView","imagePitch","detail","pitch","imageYaw","yaw","panoramaViewer","_panoramaViewer","_activeRecording","xyz","loadViewEnd","rotateLeft","init","username","password","apiKey","srs","locale","configurationUrl","addressSettings","database","viewerType","ViewerType","PANORAMA","open","i","length","getType","startMeasurementMode","MeasurementGeometryType","POINT","on","VIEW_CHANGE","VIEW_LOAD_END","o","addOverlay","bind","catch","reason","err","nextProps","nextState","mapStateToProps","map","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {mapModes, actions as graphicActions} from '../../redux/reducers/graphic'\r\nimport {projectGeometry, createTriangle} from '../../utils/JSAPI'\r\n\r\nimport './StreetSmart.css'\r\n\r\nconst containerID = \"StreetSmart-container\";\r\n\r\nclass StreetSmart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {imageYaw:null, imagePitch:null}\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.startup(containerID);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // Tell React to never update this component, that's up to us\r\n        return false;\r\n    }\r\n    ssCancel = () => {\r\n\r\n        const msEvents = window.StreetSmartApi.Events.measurement;\r\n        window\r\n            .StreetSmartApi\r\n            .off(msEvents.MEASUREMENT_CHANGED);\r\n        window\r\n            .StreetSmartApi\r\n            .destroy({\r\n                targetElement: document.getElementById(containerID)\r\n            });\r\n        this\r\n            .props\r\n            .closeStreetSmartViewer();\r\n\r\n    }\r\n\r\n    startup = (divId) => {\r\n\r\n        const x = this.props.graphic.ssInputGeom[0].x;\r\n        const y = this.props.graphic.ssInputGeom[0].y;\r\n        const geoJSONSelect = this.props.graphic.ssgeoJSONselPoint;\r\n        const geoJSONNeighbors = this.props.graphic.ssOverlay;\r\n        const editMode = this.props.graphic.editMode;\r\n        const save = this.props.newSupport;\r\n        const layers = this.props.config.featureURLs;\r\n        const ciao = this.props.setMapClickMode;\r\n        const bye = this.ssCancel;\r\n        const setState = this.setState;\r\n\r\n        const PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' +\r\n                '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' +\r\n                'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' +\r\n                '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' +\r\n                '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' +\r\n                'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' +\r\n                'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' +\r\n                'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' +\r\n                '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' +\r\n                'idth\">2</CssParameter></Stroke></Mark><Size>6</Size></Graphic></PointSymbolizer>' +\r\n                '</Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n        const selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' +\r\n                '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' +\r\n                'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' +\r\n                'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' +\r\n                '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' +\r\n                'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' +\r\n                'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' +\r\n                'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' +\r\n                'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' +\r\n                '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' +\r\n                'oke></Mark><Size>12</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' +\r\n                '</UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n                console.log('this.state :', this.state);\r\n        const options = [\r\n            {\r\n                name: \"Nearby Supports\",\r\n                geojson: geoJSONNeighbors,\r\n                sldXMLtext: PointsSLD\r\n            }, {\r\n                name: \"Selected Support\",\r\n                geojson: geoJSONSelect,\r\n                sldXMLtext: selectSLD\r\n            }\r\n        ]\r\n        const clkMap = function (evt) {\r\n\r\n            let msEvents = window.StreetSmartApi.Events.measurement;\r\n\r\n            let result = window\r\n                .StreetSmartApi\r\n                .getActiveMeasurement();\r\n            if (result.features[0].geometry.coordinates == null) {\r\n                return;\r\n            }\r\n\r\n            save(result, layers);\r\n\r\n            window\r\n                .StreetSmartApi\r\n                .off(msEvents.MEASUREMENT_CHANGED);\r\n            // graphics.view.surface.style.cursor = \"default\"; callback.GetLRSInfo(result,\r\n            // callback);  close();\r\n            ciao(mapModes.SELECT_SUPPORT_MODE, 'default');\r\n            bye();\r\n\r\n        };\r\n\r\n        \r\n\r\n        const projectCoords = (x, y, z) =>{\r\n            const newPoint = {\r\n              type:'point',\r\n              x:x,\r\n              y:y,\r\n              z:z,\r\n               SpatialReference:{\r\n                   wkid:2248\r\n               }\r\n            }\r\n\r\n            projectGeometry([[newPoint],layers.geometryService,2248,102100])\r\n            .then(resp => createTriangle([resp]), error => (error) => {alert(error)});\r\n\r\n                     //   mp = new Point(x, y, new SpatialReference(2248));\r\n          //  graphics.projectPoint(mp, 4326, createTriangle);\r\n\r\n\r\n        }\r\n\r\n        const changeView = function (evt) {\r\n            // view cone stuff  \r\n           const imagePitch = evt.detail.pitch;    \r\n           const imageYaw = evt.detail.yaw;\r\n           setState({imagePitch:evt.detail.pitch, imageYaw:evt.detail.yaw})\r\n    \r\n               projectCoords(window.panoramaViewer._panoramaViewer._activeRecording.xyz[0],\r\n             window.panoramaViewer._panoramaViewer._activeRecording.xyz[1],\r\n             window.panoramaViewer._panoramaViewer._activeRecording.xyz[2]);\r\n        };\r\n\r\n        const loadViewEnd = function (evt) {\r\n            //some hack for the view cone \r\n         \r\n             window.panoramaViewer.rotateLeft(1);\r\n        };\r\n\r\n        window\r\n            .StreetSmartApi\r\n            .init({\r\n                username: \"signworks\",\r\n                password: \"SIGNWORKS\",\r\n                apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\r\n                targetElement: document.getElementById(containerID),\r\n                srs: \"EPSG:2248\",\r\n                locale: 'en-us',\r\n                configurationUrl: 'https://atlas.cyclomedia.com/configuration',\r\n                addressSettings: {\r\n                    locale: \"en\",\r\n                    database: \"Nokia\"\r\n                }\r\n            })\r\n            .then(function () {\r\n                var viewerType = window.StreetSmartApi.ViewerType.PANORAMA\r\n\r\n                window\r\n                    .StreetSmartApi\r\n                    .open(x + \",\" + y, {\r\n                        viewerType: viewerType,\r\n                        srs: 'EPSG:2248'\r\n                    })\r\n                    .then(function (result) {\r\n                        if (result) {\r\n\r\n                            for (let i = 0; i < result.length; i++) {\r\n                                if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\r\n\r\n                                    window.panoramaViewer = result[i];\r\n                                }\r\n\r\n                                if (editMode) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .startMeasurementMode(window.panoramaViewer, {geometry: window.StreetSmartApi.MeasurementGeometryType.POINT});\r\n                                    let msEvents = window.StreetSmartApi.Events.measurement;\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .on(msEvents.MEASUREMENT_CHANGED, clkMap);\r\n                                   \r\n                                }\r\n\r\n                                window\r\n                                .panoramaViewer\r\n                                .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\r\n                            window\r\n                                .panoramaViewer\r\n                                .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\r\n\r\n                                for (let o in options) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .addOverlay(options[o])\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    }.bind(this))\r\n                    .catch(function (reason) {\r\n                        alert('Failed to create component(s) through API: ' + reason)\r\n                    });\r\n            }, function (err) {\r\n                alert('Api Init Failed!' + err);\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"StreetSmart\">\r\n                <div className=\"ssCancel\" onClick={this.ssCancel}>X</div>\r\n                <div ref=\"ssDiv\" className=\"ssPane\" id={containerID}></div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);\r\n"]},"metadata":{},"sourceType":"module"}