{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, selPtFeatureSet, gjPt, localExtent, features;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          _context.next = 6;\n          return call(createFeatureSet, [projectResult]);\n\n        case 6:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); //now we have the geoJSON for the selected point overlay, let's get the nearby points overlay\n          //first get the extent\n\n          _context.next = 10;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.coords[0], 400 //tolerance in pixels\n          ]);\n\n        case 10:\n          localExtent = _context.sent;\n          _context.next = 13;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 13:\n          features = _context.sent;\n          _context.next = 16;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\n            payload: {\n              leftVisible: true,\n              ssEdit: false,\n              ssView: true,\n              ssInputGeom: projectResult\n            }\n          });\n\n        case 16:\n          _context.next = 21;\n          break;\n\n        case 18:\n          _context.prev = 18;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 18]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","payload","coords","layers","geometryService","inSR","outSR","projectResult","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","supports","features","type","SHOW_STREETSMART_VIEWER","leftVisible","ssEdit","ssView","ssInputGeom","console","log","START_STREETSMART_VIEWER"],"mappings":";;;;yBAUWA,e;;;yBAmDOC,gB;;AA7DlB,SAAQC,IAAR,EAAcC,GAAd,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAwBC,kBAAxB,EAA2CC,iBAA3C,EAA6DC,gBAA7D,QAAoF,mBAApF;AACA,SAASC,SAAT,QAA0B,oCAA1B,C,CAKA;;AAEA,SAAWX,eAAX,CAA2BY,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI+B,iBAAMV,IAAI,CAACK,eAAD,EAAkB,CAACK,MAAM,CAACC,OAAP,CAAeC,MAAhB,EACnDF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBC,eAD6B,EACZJ,MAAM,CAACC,OAAP,CAAeI,IADH,EACSL,MAAM,CAACC,OAAP,CAAeK,KADxB,CAAlB,CAAV;;AAJ/B;AAIaC,UAAAA,aAJb;AAAA;AASyB,iBAAMjB,IAAI,CAACQ,gBAAD,EAAkB,CAACS,aAAD,CAAlB,CAAV;;AATzB;AASMC,UAAAA,eATN;AAUMC,UAAAA,IAVN,GAUaC,MAAM,CAACC,oBAAP,CAA4BC,eAA5B,CAA4CJ,eAA5C,CAVb,EAYA;AACA;;AAbA;AAcoB,iBAAMlB,IAAI,CAACO,iBAAD,EAAmB,CAAEG,MAAM,CAACC,OAAP,CAAeY,SAAjB,EACjDb,MAAM,CAACC,OAAP,CAAea,eADkC,EAEjDd,MAAM,CAACC,OAAP,CAAec,YAFkC,EAGjDf,MAAM,CAACC,OAAP,CAAeC,MAAf,CAAsB,CAAtB,CAHiD,EAIjD,GAJiD,CAI5C;AAJ4C,WAAnB,CAAV;;AAdpB;AAcMc,UAAAA,WAdN;AAAA;AAyBsB,iBAAM1B,IAAI,CAACM,kBAAD,EAAqB,CAACoB,WAAD,EAAchB,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBc,QAApC,EAA6C,IAA7C,CAArB,CAAV;;AAzBtB;AAyBWC,UAAAA,QAzBX;AAAA;AAgCO,iBAAM3B,GAAG,CAAC;AACT4B,YAAAA,IAAI,EAAEzB,YAAY,CAAC0B,uBADV;AAETnB,YAAAA,OAAO,EAAE;AACLoB,cAAAA,WAAW,EAAE,IADR;AAELC,cAAAA,MAAM,EAAE,KAFH;AAGLC,cAAAA,MAAM,EAAE,IAHH;AAILC,cAAAA,WAAW,EAACjB;AAJP;AAFA,WAAD,CAAT;;AAhCP;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8CQkB,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AA9CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkDA;;;AACA,OAAO,SAAWrC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACiC,wBAAd,EAAwCvC,eAAxC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put,takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry,getSupportByExtent,pointToExtentSaga,createFeatureSet} from '../../utils/JSAPI'\r\nimport { faWindows } from '@fortawesome/free-brands-svg-icons';\r\n\r\n\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try{\r\n     //this ball of wax has a ridiculous number of async calls, I am gonna try to do them all here in the saga\r\n \r\n       const projectResult =   yield call(projectGeometry, [action.payload.coords,\r\n        action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\r\n       \r\n      //now we have the projected (2248) support, let's make a geoJSON feature set out of it yay\r\n\r\nconst selPtFeatureSet  = yield call(createFeatureSet,[projectResult])\r\nconst gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n//now we have the geoJSON for the selected point overlay, let's get the nearby points overlay\r\n//first get the extent\r\nconst localExtent = yield call(pointToExtentSaga,[ action.payload.viewWidth,\r\naction.payload.viewExtentWidth,\r\naction.payload.view_spatRef,\r\naction.payload.coords[0],\r\n400  //tolerance in pixels\r\n\r\n\r\n])\r\n\r\n\r\n       //get neighboring points from the selected support\r\n     const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports,2248]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n       yield put({\r\n        type: graphicTypes.SHOW_STREETSMART_VIEWER,\r\n        payload: {\r\n            leftVisible: true,\r\n            ssEdit: false,\r\n            ssView: true,\r\n            ssInputGeom:projectResult\r\n        }\r\n    });\r\n\r\n        \r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n   \r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}