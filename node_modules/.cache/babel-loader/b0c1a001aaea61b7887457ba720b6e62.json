{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI';\nimport { faWindows } from '@fortawesome/free-brands-svg-icons'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, proj4326geom, sel2, selPtFeatureSet, gjPt, extPoint, localExtent, features, neighborFeatures, i, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          proj4326geom = null;\n\n          if (!(action.payload.inSR === 26985)) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 8;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, 4326]);\n\n        case 8:\n          proj4326geom = _context.sent;\n\n        case 9:\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          sel2 = _objectSpread({}, action.payload.sel[0]);\n          sel2.geometry = projectResult[0];\n          _context.next = 13;\n          return call(createFeatureSet, [sel2]);\n\n        case 13:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          extPoint = null;\n\n          if (proj4326geom) {\n            extPoint = proj4326geom[0];\n          } else {\n            extPoint = action.payload.sel[0].geometry;\n          }\n\n          _context.next = 19;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, extPoint, 400 //tolerance in pixels\n          ]);\n\n        case 19:\n          localExtent = _context.sent;\n          console.log('localExtent :', localExtent); //get neighboring points from the selected support\n\n          _context.next = 23;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 23:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          for (i = 0; i < neighborFeatures.length; i++) {\n            neighborFeatures[i].geometry.type = \"point\";\n            neighborFeatures[i].geometry.spatialReference = {\n              wkid: 2248\n            };\n          }\n\n          _context.next = 28;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 28:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 32;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\n            payload: {\n              leftVisible: true,\n              editMode: action.payload.editMode,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors\n            }\n          });\n\n        case 32:\n          _context.next = 37;\n          break;\n\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 37:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 34]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","faWindows","action","payload","sel","geometry","layers","geometryService","inSR","outSR","projectResult","proj4326geom","sel2","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","extPoint","viewWidth","viewExtentWidth","view_spatRef","localExtent","console","log","supports","features","neighborFeatures","data","i","length","type","spatialReference","wkid","neighborFeatureSet","gjNeighbors","SHOW_STREETSMART_VIEWER_RG","leftVisible","editMode","ssInputGeom","ssgeoJSONselPoint","ssOverlay","START_STREETSMART_VIEWER_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\nimport {faWindows} from '@fortawesome/free-brands-svg-icons';\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\n\r\n        const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        let proj4326geom = null;\r\n\r\n        if (action.payload.inSR === 26985) {\r\n            proj4326geom = yield call(projectGeometry, [\r\n                [action.payload.sel[0].geometry],\r\n                action.payload.layers.geometryService,\r\n                action.payload.inSR,\r\n                4326\r\n            ]);\r\n        }\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        let sel2 = {\r\n            ...action.payload.sel[0]\r\n        }\r\n        sel2.geometry = projectResult[0];\r\n\r\n        const selPtFeatureSet = yield call(createFeatureSet, [sel2])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        let extPoint = null;\r\n        if (proj4326geom) {\r\n            extPoint = proj4326geom[0];\r\n        } else {\r\n            extPoint = action.payload.sel[0].geometry\r\n        }\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, extPoint, 400 //tolerance in pixels\r\n\r\n        ])\r\n        console.log('localExtent :', localExtent);\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\n        //make them a featureset because the converter is picky like that\r\n\r\n        for (let i = 0; i < neighborFeatures.length; i++) {\r\n            neighborFeatures[i].geometry.type = \"point\";\r\n            neighborFeatures[i].geometry.spatialReference = {\r\n                wkid: 2248\r\n            }\r\n        }\r\n        const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n\r\n        //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\r\n            payload: {\r\n                leftVisible: true,\r\n                editMode: action.payload.editMode,\r\n                ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint: gjPt,\r\n                ssOverlay: gjNeighbors\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}