{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga } from '../../utils/JSAPI'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, geoms;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [action.payload.coords, action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          geoms = projectResult;\n          console.log('action :', action); // make extent to query for neighboring supports\n          //const localExtent = yield call(pointToExtentSaga,[])\n          //get neighboring points from the selected support\n          //  const features = yield call(getSupportByExtent, [action.payload.coords, action.payload.layers.supports,2248]);\n          //  console.log('features', features)\n\n          _context.next = 8;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER,\n            payload: {\n              leftVisible: true,\n              ssEdit: false,\n              ssView: true,\n              ssInputGeom: geoms\n            }\n          });\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 10]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","action","payload","coords","layers","geometryService","inSR","outSR","projectResult","geoms","console","log","type","SHOW_STREETSMART_VIEWER","leftVisible","ssEdit","ssView","ssInputGeom","START_STREETSMART_VIEWER"],"mappings":";;;;yBAQWA,e;;;yBAsCOC,gB;;AA9ClB,SAAQC,IAAR,EAAcC,GAAd,EAAkBC,UAAlB,QAAmC,oBAAnC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAwBC,kBAAxB,EAA2CC,iBAA3C,QAAmE,mBAAnE,C,CAIA;;AAEA,SAAWT,eAAX,CAA2BU,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG+B,iBAAMR,IAAI,CAACK,eAAD,EAAkB,CAACG,MAAM,CAACC,OAAP,CAAeC,MAAhB,EAAuBF,MAAM,CAACC,OAAP,CAAeE,MAAf,CAAsBC,eAA7C,EAA8DJ,MAAM,CAACC,OAAP,CAAeI,IAA7E,EAAmFL,MAAM,CAACC,OAAP,CAAeK,KAAlG,CAAlB,CAAV;;AAH/B;AAGaC,UAAAA,aAHb;AAKaC,UAAAA,KALb,GAKqBD,aALrB;AAOAE,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBV,MAAxB,EAPA,CAQO;AAEP;AACO;AACH;AAEA;;AAdJ;AAmBO,iBAAMP,GAAG,CAAC;AACTkB,YAAAA,IAAI,EAAEf,YAAY,CAACgB,uBADV;AAETX,YAAAA,OAAO,EAAE;AACLY,cAAAA,WAAW,EAAE,IADR;AAELC,cAAAA,MAAM,EAAE,KAFH;AAGLC,cAAAA,MAAM,EAAE,IAHH;AAILC,cAAAA,WAAW,EAACR;AAJP;AAFA,WAAD,CAAT;;AAnBP;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiCQC,UAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;;AAjCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAqCA;;;AACA,OAAO,SAAWnB,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACqB,wBAAd,EAAwC3B,eAAxC,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put,takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry,getSupportByExtent,pointToExtentSaga} from '../../utils/JSAPI'\r\n\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try{\r\n     \r\n       const projectResult =   yield call(projectGeometry, [action.payload.coords,action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\r\n       \r\n       const geoms = projectResult;\r\n      \r\nconsole.log('action :', action);\r\n       // make extent to query for neighboring supports\r\n\r\n//const localExtent = yield call(pointToExtentSaga,[])\r\n       //get neighboring points from the selected support\r\n    //  const features = yield call(getSupportByExtent, [action.payload.coords, action.payload.layers.supports,2248]);\r\n\r\n    //  console.log('features', features)\r\n\r\n\r\n\r\n\r\n       yield put({\r\n        type: graphicTypes.SHOW_STREETSMART_VIEWER,\r\n        payload: {\r\n            leftVisible: true,\r\n            ssEdit: false,\r\n            ssView: true,\r\n            ssInputGeom:geoms\r\n        }\r\n    });\r\n\r\n        \r\n    }\r\n    \r\n    catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n   \r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}