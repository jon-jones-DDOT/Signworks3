{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent, getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI';\nimport { getFullSignPost } from './reload'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var errorMUTCD, features, support, signs;\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\" // call API to fetch support\n\n          };\n          _context.next = 4;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layers.supports]);\n\n        case 4:\n          features = _context.sent;\n\n          if (!(features.data.features.length === 0)) {\n            _context.next = 12;\n            break;\n          }\n\n          support = null;\n          signs = [];\n          _context.next = 10;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 10:\n          _context.next = 15;\n          break;\n\n        case 12:\n          //create support payload from support returned\n          action.payload.support = features.data.features[0];\n          _context.next = 15;\n          return getFullSignPost(action);\n\n        case 15:\n          _context.next = 20;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 17]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSupport.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","getRelatedSigns","getMUTCDS","getRelatedTimebands","getFullSignPost","action","errorMUTCD","name","serverImagePath","payload","geom","layers","supports","features","data","length","support","signs","type","SET_SELECTED_SUPPORT","console","log","MAP_CLICKED"],"mappings":";;;;yBAOWA,gB;;;yBAmCOC,W;;AA1ClB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,kBAAR,EAA4BC,eAA5B,EAA6CC,SAA7C,EAAwDC,mBAAxD,QAAkF,mBAAlF;AACA,SAAQC,eAAR,QAA8B,UAA9B,C,CAEA;;AAEA,SAAWX,gBAAX,CAA4BY,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGcC,UAAAA,UAHd,GAG2B;AACfC,YAAAA,IAAI,EAAE,iBADS;AAEfC,YAAAA,eAAe,EAAE,MAFF,CAInB;;AAJmB,WAH3B;AAAA;AAQyB,iBAAMb,IAAI,CAACK,kBAAD,EAAqB,CAACK,MAAM,CAACI,OAAP,CAAeC,IAAhB,EAAsBL,MAAM,CAACI,OAAP,CAAeE,MAAf,CAAsBC,QAA5C,CAArB,CAAV;;AARzB;AAQcC,UAAAA,QARd;;AAAA,gBAWYA,QAAQ,CAACC,IAAT,CAAcD,QAAd,CAAuBE,MAAvB,KAAkC,CAX9C;AAAA;AAAA;AAAA;;AAYkBC,UAAAA,OAZlB,GAY4B,IAZ5B;AAakBC,UAAAA,KAblB,GAa0B,EAb1B;AAAA;AAeY,iBAAMrB,GAAG,CAAC;AACNsB,YAAAA,IAAI,EAAEnB,QAAQ,CAACoB,oBADT;AAENV,YAAAA,OAAO,EAAE;AACLO,cAAAA,OAAO,EAAPA,OADK;AAELC,cAAAA,KAAK,EAALA;AAFK;AAFH,WAAD,CAAT;;AAfZ;AAAA;AAAA;;AAAA;AAwBY;AACAZ,UAAAA,MAAM,CAACI,OAAP,CAAeO,OAAf,GAAyBH,QAAQ,CAACC,IAAT,CAAcD,QAAd,CAAuB,CAAvB,CAAzB;AAzBZ;AA0BY,iBAAMT,eAAe,CAACC,MAAD,CAArB;;AA1BZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8BQe,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AA9BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkCA;;;AACA,OAAO,SAAW3B,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,UAAU,CAACE,QAAQ,CAACuB,WAAV,EAAuB7B,gBAAvB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent, getRelatedSigns, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\nimport {getFullSignPost} from './reload'\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n   \r\n    try {\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layers.supports]);\r\n      \r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.data.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            action.payload.support = features.data.features[0];\r\n            yield getFullSignPost(action)\r\n           \r\n        }\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}