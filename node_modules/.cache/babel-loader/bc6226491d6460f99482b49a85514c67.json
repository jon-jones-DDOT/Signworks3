{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSignOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignOrder);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSignOrder(action) {\n  var support, signsREsp, signArray, signs, muttQueryString, i, muttData, _i, sign, results, j;\n\n  return _regeneratorRuntime.wrap(function setSignOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(saveSignOrder, [action.payload.features]);\n\n        case 3:\n          support = action.payload.support; // retrieve the new related signs with a call to AGS\n\n          _context.next = 6;\n          return call(getRelatedSigns, [support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 6:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 15;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 15:\n          muttData = _context.sent;\n          _i = 0;\n\n        case 17:\n          if (!(_i < signArray.length)) {\n            _context.next = 29;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i]\n          };\n          _context.next = 21;\n          return call(getRelatedTimebands, [signArray[_i]]);\n\n        case 21:\n          results = _context.sent;\n          sign.timebands = results.data.features;\n\n          for (j = 0; j < muttData.length; j++) {\n            //      console.log('does ' + signArray[i].attributes.SIGNCODE.toUpperCase() + \" equal \" + muttData[j].code.toUpperCase())\n            if (signArray[_i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\n              sign.MUTCD = muttData[j]; //        console.log('apparently it does')\n            }\n          }\n\n          if (sign.MUTCD === undefined) {\n            sign.MUTCD = errorMUTCD; //       console.log ('MUTCD not found for '+ signArray[i].attributes.SIGNCODE)\n          } //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\n\n\n          signs.push(sign);\n\n        case 26:\n          _i++;\n          _context.next = 17;\n          break;\n\n        case 29:\n          _context.next = 31;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 31:\n          _context.next = 36;\n          break;\n\n        case 33:\n          _context.prev = 33;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSignOrder, ', _context.t0);\n\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 33]]);\n} // WATCHER //\n\n\nexport function watchSignOrder() {\n  return _regeneratorRuntime.wrap(function watchSignOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSignOrder.js"],"names":["setSignOrder","watchSignOrder","call","put","takeLatest","types","mapTypes","getRelatedSigns","saveSignOrder","getMUTCDS","getRelatedTimebands","action","payload","features","support","signsREsp","signArray","data","signs","muttQueryString","length","i","attributes","SIGNCODE","replace","muttData","sign","feature","results","timebands","j","toUpperCase","code","MUTCD","undefined","errorMUTCD","push","type","SET_SELECTED_SUPPORT","console","log","SIGN_ORDER_CHANGED"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport { getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSignOrder(action) {\r\n\r\n    try {\r\n\r\n        // call API to save signs with new SIGNORDER\r\n\r\n         yield call(saveSignOrder, [action.payload.features]);\r\n        const support =  action.payload.support;\r\n      // retrieve the new related signs with a call to AGS\r\n        const signsREsp = yield call(getRelatedSigns, [\r\n            support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                    'er/1/query'\r\n        ])\r\n        const signArray = signsREsp.data.features;\r\n\r\n        // start creating sign payload\r\n        const signs = [];\r\n         // create a string to get back MUTCD metadata for all signs on post\r\n\r\n         let muttQueryString = \"\";\r\n           \r\n         if(signArray.length < 1){\r\n             muttQueryString = \"PR-OTHER\"\r\n         }\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            if(signArray[i].attributes.SIGNCODE){\r\n            muttQueryString += signArray[i].attributes.SIGNCODE + \",\";}\r\n            else{\r\n                muttQueryString += \"PR-OTHER,\"\r\n            }\r\n        }\r\n        muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n       \r\n        // call out to Sign Catalog API to get MUTCD metadata\r\n        const muttData = yield call(getMUTCDS, [muttQueryString])\r\n      //  console.log('signArray', signArray)\r\n     //   console.log( 'muttDatas', muttData)\r\n        \r\n               //loop through globalIDS and get timebands\r\n               for (let i = 0; i < signArray.length; i++) {\r\n                let sign = {\r\n                    feature: signArray[i]\r\n                    \r\n                }\r\n                const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                sign.timebands = results.data.features;\r\n                for (let j = 0; j < muttData.length;j++){\r\n              //      console.log('does ' + signArray[i].attributes.SIGNCODE.toUpperCase() + \" equal \" + muttData[j].code.toUpperCase())\r\n                    if( signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase() ){\r\n                        sign.MUTCD = muttData[j];\r\n                //        console.log('apparently it does')\r\n                    }\r\n                }\r\n                if ( sign.MUTCD === undefined){\r\n                    sign.MUTCD = errorMUTCD;\r\n             //       console.log ('MUTCD not found for '+ signArray[i].attributes.SIGNCODE)\r\n                }\r\n                //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n                signs.push(sign)\r\n\r\n            }\r\n\r\n\r\n\r\n//console.log(\"* updated features\", signs)\r\n        // Put config in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSignOrder, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchSignOrder() {\r\n\r\n    yield takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\r\n}"]},"metadata":{},"sourceType":"module"}