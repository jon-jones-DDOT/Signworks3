{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var feature;\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\n\n        case 3:\n          feature = _context.sent;\n          console.log('feature returning from JSAPI', feature); // Put config in store\n\n          _context.next = 7;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: feature\n          });\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 9]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_map.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","action","payload","geom","layer","feature","console","log","type","SET_SELECTED_SUPPORT","MAP_CLICKED"],"mappings":";;;;yBAMWA,gB;;;yBAgBOC,W;;AAtBlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,kBAAR,QAAiC,mBAAjC,C,CAEA;;AAEA,SAAWP,gBAAX,CAA4BQ,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKwB,iBAAMN,IAAI,CAACK,kBAAD,EAAqB,CAACC,MAAM,CAACC,OAAP,CAAeC,IAAhB,EAAsBF,MAAM,CAACC,OAAP,CAAeE,KAArC,CAArB,CAAV;;AALxB;AAKcC,UAAAA,OALd;AAMQC,UAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA2CF,OAA3C,EANR,CAOQ;;AAPR;AAQQ,iBAAMT,GAAG,CAAC;AAACY,YAAAA,IAAI,EAAET,QAAQ,CAACU,oBAAhB;AAAsCP,YAAAA,OAAO,EAAEG;AAA/C,WAAD,CAAT;;AARR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWQC,UAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAeA;;;AACA,OAAO,SAAWb,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,UAAU,CAACE,QAAQ,CAACW,WAAV,EAAuBjB,gBAAvB,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n       \r\n        // call API to fetch config\r\n        const feature = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n        console.log('feature returning from JSAPI',feature);\r\n        // Put config in store\r\n        yield put({type: mapTypes.SET_SELECTED_SUPPORT, payload: feature});\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}