{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getSupportByExtent, getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSelectSupport(action) {\n  var errorMUTCD, features, support, signs, _support, signsREsp, signArray, _signs, muttQueryString, i, muttData, _i, _i2, sign, results, j;\n\n  return _regeneratorRuntime.wrap(function setSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\" // call API to fetch support\n\n          };\n          _context.next = 4;\n          return call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\n\n        case 4:\n          features = _context.sent;\n\n          if (!(features.features.length === 0)) {\n            _context.next = 12;\n            break;\n          }\n\n          support = null;\n          signs = [];\n          _context.next = 10;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 10:\n          _context.next = 41;\n          break;\n\n        case 12:\n          //create support payload from support returned\n          _support = features.features[0]; //retrieve associated sign features from AGS\n\n          _context.next = 15;\n          return call(getRelatedSigns, [_support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' + 'er/1/query']);\n\n        case 15:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          _signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 24;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 24:\n          muttData = _context.sent;\n\n          for (_i = 0; _i < signArray.length; _i++) {} //loop through globalIDS and get timebands\n\n\n          _i2 = 0;\n\n        case 27:\n          if (!(_i2 < signArray.length)) {\n            _context.next = 39;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i2]\n          };\n          _context.next = 31;\n          return call(getRelatedTimebands, [signArray[_i2]]);\n\n        case 31:\n          results = _context.sent;\n          sign.timebands = results.data.features;\n\n          for (j = 0; j < muttData.length; j++) {\n            if (signArray[_i2].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\n              sign.MUTCD = muttData[j];\n            }\n          }\n\n          if (sign.MUTCD === undefined) {\n            sign.MUTCD = errorMUTCD;\n          } //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\n\n\n          _signs.push(sign);\n\n        case 36:\n          _i2++;\n          _context.next = 27;\n          break;\n\n        case 39:\n          _context.next = 41;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: _support,\n              signs: _signs\n            }\n          });\n\n        case 41:\n          _context.next = 46;\n          break;\n\n        case 43:\n          _context.prev = 43;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSelectedSupport, ', _context.t0);\n\n        case 46:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 43]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSupport.js"],"names":["setSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","getSupportByExtent","getRelatedSigns","getMUTCDS","getRelatedTimebands","action","errorMUTCD","name","serverImagePath","payload","geom","layer","features","length","support","signs","type","SET_SELECTED_SUPPORT","signsREsp","signArray","data","muttQueryString","i","attributes","SIGNCODE","replace","muttData","sign","feature","results","timebands","j","toUpperCase","code","MUTCD","undefined","push","console","log","MAP_CLICKED"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getSupportByExtent, getRelatedSigns, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSelectSupport(action) {\r\n\r\n    try {\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            const support = features.features[0];\r\n\r\n            //retrieve associated sign features from AGS\r\n            const signsREsp = yield call(getRelatedSigns, [\r\n                support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                        'er/1/query'\r\n            ])\r\n            const signArray = signsREsp.data.features;\r\n\r\n            // start creating sign payload\r\n            const signs = [];\r\n\r\n            // create a string to get back MUTCD metadata for all signs on post\r\n\r\n            let muttQueryString = \"\";\r\n\r\n            if (signArray.length < 1) {\r\n                muttQueryString = \"PR-OTHER\"\r\n            }\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                if (signArray[i].attributes.SIGNCODE) {\r\n                    muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n                } else {\r\n                    muttQueryString += \"PR-OTHER,\"\r\n                }\r\n            }\r\n            muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n            // call out to Sign Catalog API to get MUTCD metadata\r\n            const muttData = yield call(getMUTCDS, [muttQueryString])\r\n\r\n            for (let i = 0; i < signArray.length; i++) {}\r\n\r\n            //loop through globalIDS and get timebands\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                let sign = {\r\n                    feature: signArray[i]\r\n\r\n                }\r\n                const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                sign.timebands = results.data.features;\r\n                for (let j = 0; j < muttData.length; j++) {\r\n\r\n                    if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                        sign.MUTCD = muttData[j];\r\n\r\n                    }\r\n                }\r\n                if (sign.MUTCD === undefined) {\r\n                    sign.MUTCD = errorMUTCD;\r\n\r\n                }\r\n                //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n                signs.push(sign)\r\n\r\n            }\r\n\r\n            // Put config in store\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        }\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n    yield takeLatest(mapTypes.MAP_CLICKED, setSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}