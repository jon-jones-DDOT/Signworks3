{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(openStreetSmart),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI'; // WORKER //\n\nfunction openStreetSmart(action) {\n  var projectResult, sel2, selPtFeatureSet, gjPt, localExtent, features, neighborFeatures, i, neighborFeatureSet, gjNeighbors;\n  return _regeneratorRuntime.wrap(function openStreetSmart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(projectGeometry, [[action.payload.sel[0].geometry], action.payload.layers.geometryService, action.payload.inSR, action.payload.outSR]);\n\n        case 3:\n          projectResult = _context.sent;\n          // now we have the projected (2248) support, let's make a geoJSON feature set\n          // out of it yay\n          sel2 = _objectSpread({}, action.payload.sel[0]);\n          sel2.geometry = projectResult[0];\n          _context.next = 8;\n          return call(createFeatureSet, [sel2]);\n\n        case 8:\n          selPtFeatureSet = _context.sent;\n          gjPt = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(selPtFeatureSet); // now we have the geoJSON for the selected point overlay, let's get the nearby\n          // points overlay first get the extent\n\n          _context.next = 12;\n          return call(pointToExtentSaga, [action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\n          ]);\n\n        case 12:\n          localExtent = _context.sent;\n          _context.next = 15;\n          return call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\n\n        case 15:\n          features = _context.sent;\n          neighborFeatures = features.data.features; //make them a featureset because the converter is picky like that\n\n          for (i = 0; i < neighborFeatures.length; i++) {\n            neighborFeatures[i].geometry.type = \"point\";\n            neighborFeatures[i].geometry.spatialReference = {\n              wkid: 2248\n            };\n          }\n\n          _context.next = 20;\n          return call(createFeatureSet, [neighborFeatures]);\n\n        case 20:\n          neighborFeatureSet = _context.sent;\n          //convert FeatureSet to geoJSON feature set\n          gjNeighbors = window.ArcgisToGeojsonUtils.arcgisToGeoJSON(neighborFeatureSet);\n          _context.next = 24;\n          return put({\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\n            payload: {\n              leftVisible: true,\n              leftMode: 'StreetSmart',\n              editMode: action.payload.editMode,\n              ssInputGeom: projectResult,\n              ssgeoJSONselPoint: gjPt,\n              ssOverlay: gjNeighbors,\n              leftkey: action.payload.leftKey\n            }\n          });\n\n        case 24:\n          _context.next = 29;\n          break;\n\n        case 26:\n          _context.prev = 26;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: graphic/openStreetSmart, ', _context.t0);\n\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 26]]);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_openStreetSmart.js"],"names":["openStreetSmart","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","action","payload","sel","geometry","layers","geometryService","inSR","outSR","projectResult","sel2","selPtFeatureSet","gjPt","window","ArcgisToGeojsonUtils","arcgisToGeoJSON","viewWidth","viewExtentWidth","view_spatRef","localExtent","supports","features","neighborFeatures","data","i","length","type","spatialReference","wkid","neighborFeatureSet","gjNeighbors","SHOW_STREETSMART_VIEWER_RG","leftVisible","leftMode","editMode","ssInputGeom","ssgeoJSONselPoint","ssOverlay","leftkey","leftKey","console","log","START_STREETSMART_VIEWER_S"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\n\r\n\r\n// WORKER //\r\n\r\nfunction * openStreetSmart(action) {\r\n    try {\r\n        // this ball of wax has a ridiculous number of async calls, I am gonna try to do\r\n        // them all here in the saga\r\n   \r\n        const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n        // now we have the projected (2248) support, let's make a geoJSON feature set\r\n        // out of it yay\r\n\r\n        let sel2 = {\r\n            ...action.payload.sel[0]\r\n        }\r\n        sel2.geometry = projectResult[0];\r\n        const selPtFeatureSet = yield call(createFeatureSet, [sel2])\r\n        const gjPt = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(selPtFeatureSet)\r\n\r\n        // now we have the geoJSON for the selected point overlay, let's get the nearby\r\n        // points overlay first get the extent\r\n        const localExtent = yield call(pointToExtentSaga, [\r\n            action.payload.viewWidth, action.payload.viewExtentWidth, action.payload.view_spatRef, action.payload.sel[0].geometry, 400 //tolerance in pixels\r\n\r\n        ])\r\n\r\n        //get neighboring points from the selected support\r\n        const features = yield call(getSupportByExtent, [localExtent, action.payload.layers.supports, 2248]);\r\n        const neighborFeatures = features.data.features;\r\n        //make them a featureset because the converter is picky like that\r\n\r\n        for (let i = 0; i < neighborFeatures.length; i++) {\r\n            neighborFeatures[i].geometry.type = \"point\";\r\n            neighborFeatures[i].geometry.spatialReference = {\r\n                wkid: 2248\r\n            }\r\n        }\r\n        const neighborFeatureSet = yield call(createFeatureSet, [neighborFeatures])\r\n\r\n        //convert FeatureSet to geoJSON feature set\r\n        const gjNeighbors = window\r\n            .ArcgisToGeojsonUtils\r\n            .arcgisToGeoJSON(neighborFeatureSet)\r\n\r\n        yield put({\r\n            type: graphicTypes.SHOW_STREETSMART_VIEWER_RG,\r\n            payload: {\r\n                leftVisible: true,\r\n                leftMode:'StreetSmart',\r\n                editMode: action.payload.editMode,\r\n               ssInputGeom: projectResult,\r\n                ssgeoJSONselPoint: gjPt,\r\n                ssOverlay: gjNeighbors,\r\n                leftkey:action.payload.leftKey\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/openStreetSmart, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.START_STREETSMART_VIEWER_S, openStreetSmart);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}