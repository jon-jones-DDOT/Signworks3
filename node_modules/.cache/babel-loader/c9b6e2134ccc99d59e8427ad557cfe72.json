{"ast":null,"code":"import _objectSpread from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Projects\\\\Signworks3\\\\src\\\\components\\\\myModules\\\\StreetSmart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actions as mapActions } from '../../redux/reducers/map';\nimport { mapModes, actions as graphicActions } from '../../redux/reducers/graphic';\nimport { layerURLs } from '../../utils/JSAPI';\nimport './StreetSmart.css';\nvar containerID = \"StreetSmart-container\";\n\nvar StreetSmart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StreetSmart, _Component);\n\n  function StreetSmart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, StreetSmart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StreetSmart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.ssCancel = function () {\n      var msEvents = window.StreetSmartApi.Events.measurement;\n      window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED);\n      window.panoramaViewer.off(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE).off(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END);\n      window.StreetSmartApi.destroy({\n        targetElement: document.getElementById(containerID)\n      });\n\n      _this.props.closeStreetSmartViewer();\n    };\n\n    _this.loadViewEnd = function (evt) {\n      window.panoramaViewer.rotateLeft(1);\n    };\n\n    _this.startup = function (divId) {\n      console.log('selSup and ssInputGeom', _this.props.graphic.selSupportGeom.x, _this.props.graphic.ssInputGeom[0].x);\n      var x = _this.props.graphic.ssInputGeom[0].x;\n      var y = _this.props.graphic.ssInputGeom[0].y;\n      var geoJSONSelect = _this.props.graphic.ssgeoJSONselPoint;\n      var geoJSONNeighbors = _this.props.graphic.ssOverlay;\n      var coneCode = _this.props.getNewCone;\n      var editMode = _this.props.graphic.editMode;\n      var save = _this.props.newSupport;\n      var layers = layerURLs(_this.props);\n      var ciao = _this.props.setMapClickMode;\n      var bye = _this.ssCancel;\n      var imagePitch, imageYaw;\n      var PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' + '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' + 'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' + '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' + '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' + 'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' + 'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' + 'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' + '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' + 'idth\">2</CssParameter></Stroke></Mark><Size>16</Size></Graphic></PointSymbolizer' + '></Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\n      var selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' + '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' + 'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' + 'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' + '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' + 'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' + 'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' + 'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' + 'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' + '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' + 'oke></Mark><Size>19</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' + '</UserStyle></NamedLayer></StyledLayerDescriptor>';\n      var options = [{\n        name: \"Nearby Supports\",\n        geojson: geoJSONNeighbors,\n        sldXMLtext: PointsSLD\n      }, {\n        name: \"Selected Support\",\n        geojson: geoJSONSelect,\n        sldXMLtext: selectSLD\n      }];\n\n      var clkMap = function clkMap(evt) {\n        var msEvents = window.StreetSmartApi.Events.measurement;\n        var result = window.StreetSmartApi.getActiveMeasurement();\n\n        if (result.features[0].geometry.coordinates == null) {\n          return;\n        }\n\n        save(result, layers);\n        window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED);\n        ciao(mapModes.SELECT_SUPPORT_MODE, 'default');\n        bye();\n      };\n\n      var changeView = function changeView(evt) {\n        // view cone stuff\n        imagePitch = evt.detail.pitch;\n        imageYaw = evt.detail.yaw;\n        coneCode(window.panoramaViewer._panoramaViewer._activeRecording.xyz, imagePitch, imageYaw, layers);\n      };\n\n      window.StreetSmartApi.init({\n        username: \"signworks\",\n        password: \"SIGNWORKS\",\n        apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\n        targetElement: document.getElementById(containerID),\n        srs: \"EPSG:2248\",\n        locale: 'en-us',\n        configurationUrl: 'https://atlas.cyclomedia.com/configuration',\n        addressSettings: {\n          locale: \"en\",\n          database: \"Nokia\"\n        }\n      }).then(function () {\n        var viewerType = window.StreetSmartApi.ViewerType.PANORAMA;\n        window.StreetSmartApi.open(x + \",\" + y, {\n          viewerType: viewerType,\n          srs: 'EPSG:2248',\n          panoramaViewer: {\n            closable: false,\n            replace: true\n          }\n        }).then(function (result) {\n          if (result) {\n            for (var i = 0; i < result.length; i++) {\n              if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\n                window.panoramaViewer = result[i];\n              }\n\n              if (editMode) {\n                window.StreetSmartApi.startMeasurementMode(window.panoramaViewer, {\n                  geometry: window.StreetSmartApi.MeasurementGeometryType.POINT\n                });\n                var msEvents = window.StreetSmartApi.Events.measurement;\n                window.StreetSmartApi.on(msEvents.MEASUREMENT_CHANGED, clkMap);\n              }\n\n              window.panoramaViewer.closable = false;\n              window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\n              window.panoramaViewer.on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\n\n              for (var o in options) {\n                window.StreetSmartApi.addOverlay(options[o]);\n              }\n            }\n          }\n        });\n      }, function (err) {\n        alert('Api Init Failed!' + err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(StreetSmart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.startup(containerID);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.graphic.ssInputGeom[0] != this.props.graphic.ssInputGeom[0]) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.graphic.ssInputGeom[0] != this.props.graphic.ssInputGeom[0]) {\n        ;\n        var msEvents = window.StreetSmartApi.Events.measurement;\n        window.StreetSmartApi.off(msEvents.MEASUREMENT_CHANGED);\n        window.panoramaViewer.off(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE).off(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END);\n        window.StreetSmartApi.destroy({\n          targetElement: document.getElementById(containerID)\n        });\n        this.startup(containerID);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render()\n    /* unto Caesar */\n    {\n      return React.createElement(\"div\", {\n        className: \"StreetSmart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ssCancel\",\n        onClick: this.ssCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"div\", {\n        ref: \"ssDiv\",\n        className: \"ssPane\",\n        id: containerID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return StreetSmart;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    map: state.map,\n    graphic: state.graphic,\n    auth: state.auth,\n    config: state.config\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators(_objectSpread({}, mapActions, graphicActions), dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\StreetSmart.js"],"names":["React","Component","connect","bindActionCreators","actions","mapActions","mapModes","graphicActions","layerURLs","containerID","StreetSmart","ssCancel","msEvents","window","StreetSmartApi","Events","measurement","off","MEASUREMENT_CHANGED","panoramaViewer","VIEW_CHANGE","VIEW_LOAD_END","destroy","targetElement","document","getElementById","props","closeStreetSmartViewer","loadViewEnd","evt","rotateLeft","startup","divId","console","log","graphic","selSupportGeom","x","ssInputGeom","y","geoJSONSelect","ssgeoJSONselPoint","geoJSONNeighbors","ssOverlay","coneCode","getNewCone","editMode","save","newSupport","layers","ciao","setMapClickMode","bye","imagePitch","imageYaw","PointsSLD","selectSLD","options","name","geojson","sldXMLtext","clkMap","result","getActiveMeasurement","features","geometry","coordinates","SELECT_SUPPORT_MODE","changeView","detail","pitch","yaw","_panoramaViewer","_activeRecording","xyz","init","username","password","apiKey","srs","locale","configurationUrl","addressSettings","database","then","viewerType","ViewerType","PANORAMA","open","closable","replace","i","length","getType","startMeasurementMode","MeasurementGeometryType","POINT","on","o","addOverlay","err","alert","nextProps","nextState","prevProps","prevState","snapshot","mapStateToProps","state","map","auth","config","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {actions as mapActions} from '../../redux/reducers/map';\r\nimport {mapModes, actions as graphicActions} from '../../redux/reducers/graphic';\r\nimport {layerURLs} from '../../utils/JSAPI';\r\nimport './StreetSmart.css'\r\n\r\nconst containerID = \"StreetSmart-container\";\r\n\r\nclass StreetSmart extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.startup(containerID);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (nextProps.graphic.ssInputGeom[0] != this.props.graphic.ssInputGeom[0]) {\r\n          return true;\r\n        } else {\r\n         \r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n        if(prevProps.graphic.ssInputGeom[0] != this.props.graphic.ssInputGeom[0]){\r\n ;\r\n            const msEvents = window.StreetSmartApi.Events.measurement;\r\n            window\r\n                .StreetSmartApi\r\n                .off(msEvents.MEASUREMENT_CHANGED);\r\n            window\r\n                .panoramaViewer\r\n                .off(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE)\r\n                .off(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END)\r\n            window\r\n                .StreetSmartApi\r\n                .destroy({\r\n                    targetElement: document.getElementById(containerID)\r\n                });\r\n\r\n                this.startup(containerID);\r\n        }\r\n    }\r\n\r\n    ssCancel = () => {\r\n\r\n        const msEvents = window.StreetSmartApi.Events.measurement;\r\n        window\r\n            .StreetSmartApi\r\n            .off(msEvents.MEASUREMENT_CHANGED);\r\n        window\r\n            .panoramaViewer\r\n            .off(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE)\r\n            .off(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END)\r\n        window\r\n            .StreetSmartApi\r\n            .destroy({\r\n                targetElement: document.getElementById(containerID)\r\n            });\r\n        this\r\n            .props\r\n            .closeStreetSmartViewer();\r\n\r\n    }\r\n\r\n     loadViewEnd = function (evt) {\r\n\r\n        window\r\n            .panoramaViewer\r\n            .rotateLeft(1);\r\n\r\n    }\r\n\r\n    startup = (divId) => {\r\nconsole.log('selSup and ssInputGeom',this.props.graphic.selSupportGeom.x, this.props.graphic.ssInputGeom[0].x);\r\n        const x = this.props.graphic.ssInputGeom[0].x;\r\n        const y = this.props.graphic.ssInputGeom[0].y;\r\n        const geoJSONSelect = this.props.graphic.ssgeoJSONselPoint;\r\n        const geoJSONNeighbors = this.props.graphic.ssOverlay;\r\n\r\n        const coneCode = this.props.getNewCone;\r\n        const editMode = this.props.graphic.editMode;\r\n        const save = this.props.newSupport;\r\n        const layers = layerURLs(this.props);\r\n        const ciao = this.props.setMapClickMode;\r\n        const bye = this.ssCancel;\r\n        let imagePitch,\r\n            imageYaw;\r\n\r\n        const PointsSLD = ' <?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.' +\r\n                '0.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDesc' +\r\n                'riptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net' +\r\n                '/ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/20' +\r\n                '01/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><User' +\r\n                'Style><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fe' +\r\n                'atureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</Well' +\r\n                'KnownName><Fill><CssParameter  name=\"fill\">#FF0000</CssParameter></Fill><Stroke>' +\r\n                '<CssParameter  name=\"stroke\">#000000</CssParameter><CssParameter  name=\"stroke-w' +\r\n                'idth\">2</CssParameter></Stroke></Mark><Size>16</Size></Graphic></PointSymbolizer' +\r\n                '></Rule></FeatureTypeStyle></UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n        const selectSLD = '<?xml version=\"1.0\"  encoding=\"ISO-8859-1\"?><StyledLayerDescriptor  version=\"1.0' +\r\n                '.0\"             xsi:schemaLocation=\"http://www.opengis.net/sld  StyledLayerDescr' +\r\n                'iptor.xsd\" xmlns=\"http://www.opengis.net/sld\" xmlns:ogc=\"http://www.opengis.net/' +\r\n                'ogc\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:xsi=\"http://www.w3.org/200' +\r\n                '1/XMLSchema-instance\"><NamedLayer><Name>Simple  point  with  stroke</Name><UserS' +\r\n                'tyle><Title>GeoServer  SLD  Cook  Book:  Simple  point  with  stroke</Title><Fea' +\r\n                'tureTypeStyle><Rule><PointSymbolizer><Graphic><Mark><WellKnownName>circle</WellK' +\r\n                'nownName><Fill><CssParameter  name=\"fill\">#00000000</CssParameter><CssParameter ' +\r\n                'name=\"fill-opacity\">0.2</CssParameter></Fill><Stroke><CssParameter  name=\"stroke' +\r\n                '\">#E633FF</CssParameter><CssParameter  name=\"stroke-width\">2</CssParameter></Str' +\r\n                'oke></Mark><Size>19</Size></Graphic></PointSymbolizer></Rule></FeatureTypeStyle>' +\r\n                '</UserStyle></NamedLayer></StyledLayerDescriptor>';\r\n\r\n        const options = [\r\n            {\r\n                name: \"Nearby Supports\",\r\n                geojson: geoJSONNeighbors,\r\n                sldXMLtext: PointsSLD\r\n            }, {\r\n                name: \"Selected Support\",\r\n                geojson: geoJSONSelect,\r\n                sldXMLtext: selectSLD\r\n            }\r\n        ]\r\n        const clkMap = function (evt) {\r\n\r\n            let msEvents = window.StreetSmartApi.Events.measurement;\r\n\r\n            let result = window\r\n                .StreetSmartApi\r\n                .getActiveMeasurement();\r\n            if (result.features[0].geometry.coordinates == null) {\r\n                return;\r\n            }\r\n\r\n            save(result, layers);\r\n\r\n            window\r\n                .StreetSmartApi\r\n                .off(msEvents.MEASUREMENT_CHANGED);\r\n\r\n            ciao(mapModes.SELECT_SUPPORT_MODE, 'default');\r\n            bye();\r\n\r\n        };\r\n\r\n        const changeView = function (evt) {\r\n            // view cone stuff\r\n\r\n            imagePitch = evt.detail.pitch;\r\n            imageYaw = evt.detail.yaw;\r\n\r\n            coneCode(window.panoramaViewer._panoramaViewer._activeRecording.xyz, imagePitch, imageYaw, layers)\r\n\r\n        };\r\n\r\n        \r\n\r\n        window\r\n            .StreetSmartApi\r\n            .init({\r\n                username: \"signworks\",\r\n                password: \"SIGNWORKS\",\r\n                apiKey: \"CnkxOTY52fExizg9C_EVanMh2j0RK3gxuzURif89eLsZu3ghqTAt6LEdKng56fo1\",\r\n                targetElement: document.getElementById(containerID),\r\n                srs: \"EPSG:2248\",\r\n                locale: 'en-us',\r\n                configurationUrl: 'https://atlas.cyclomedia.com/configuration',\r\n                addressSettings: {\r\n                    locale: \"en\",\r\n                    database: \"Nokia\"\r\n                }\r\n            })\r\n            .then(function () {\r\n                var viewerType = window.StreetSmartApi.ViewerType.PANORAMA\r\n\r\n                window\r\n                    .StreetSmartApi\r\n                    .open(x + \",\" + y, {\r\n                        viewerType: viewerType,\r\n                        srs: 'EPSG:2248',\r\n                        panoramaViewer: {\r\n                            closable: false,\r\n                            replace: true\r\n                        }\r\n\r\n                    })\r\n                    .then(function (result) {\r\n                        if (result) {\r\n\r\n                            for (let i = 0; i < result.length; i++) {\r\n                                if (result[i].getType() === window.StreetSmartApi.ViewerType.PANORAMA) {\r\n\r\n                                    window.panoramaViewer = result[i];\r\n                                }\r\n\r\n                                if (editMode) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .startMeasurementMode(window.panoramaViewer, {geometry: window.StreetSmartApi.MeasurementGeometryType.POINT});\r\n                                    let msEvents = window.StreetSmartApi.Events.measurement;\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .on(msEvents.MEASUREMENT_CHANGED, clkMap);\r\n\r\n                                }\r\n                                window.panoramaViewer.closable = false;\r\n                                window\r\n                                    .panoramaViewer\r\n                                    .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_CHANGE, changeView);\r\n                                window\r\n                                    .panoramaViewer\r\n                                    .on(window.StreetSmartApi.Events.panoramaViewer.VIEW_LOAD_END, loadViewEnd);\r\n\r\n                                for (let o in options) {\r\n                                    window\r\n                                        .StreetSmartApi\r\n                                        .addOverlay(options[o])\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                    });\r\n            }, function (err) {\r\n                alert('Api Init Failed!' + err);\r\n            });\r\n\r\n    }\r\n\r\n    render/* unto Caesar */() {return(\r\n            <div className=\"StreetSmart\">\r\n                <div className=\"ssCancel\" onClick={this.ssCancel}>X</div>\r\n                <div ref=\"ssDiv\" className=\"ssPane\" id={containerID}></div>\r\n\r\n            </div>\r\n        )}\r\n}\r\nconst mapStateToProps = state => ({map: state.map, graphic: state.graphic, auth: state.auth, config: state.config});\r\n\r\nconst mapDispatchToProps = function (dispatch) {\r\n    return bindActionCreators({\r\n        ...mapActions,\r\n        ...graphicActions\r\n    }, dispatch);\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StreetSmart);\r\n"]},"metadata":{},"sourceType":"module"}