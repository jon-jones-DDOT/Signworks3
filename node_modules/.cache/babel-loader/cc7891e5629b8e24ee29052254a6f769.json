{"ast":null,"code":"import { parkingtypesigns, mphSigns } from \"../../../SignworksJSON\"; // newCode is the mutcd.code that is being checked signs -  an array of signs on\n// the signpost each sign should have a property called MUTCD that has the info\n// from the sign catalog\n\nexport function MutcdDuplicate(newCode, signs) {\n  var isDupe = false;\n\n  for (var i = 0; i < signs.length; i++) {\n    if (signs[i].MUTCD.code === newCode) {\n      isDupe = true;\n    }\n  }\n\n  console.log('isDupe :', isDupe);\n  return isDupe;\n}\nexport function isSpeedLimit(mutt) {\n  mutt = mutt.toUpperCase();\n  var speedy = mphSigns.find(function (code) {\n    if (code === mutt) {\n      return mutt;\n    }\n  });\n\n  if (speedy) {\n    return \"\";\n  } else return \"disabled\";\n}\n/*\r\nfunction zoneVerify (fromSource) {\r\n\r\n\r\n    if (!fromSource) {\r\n        //assemble zone\r\n        zoneValue = $ward1.val() + $anc1.val();\r\n        if ($ward2.val()) {\r\n            zoneValue += \"&\" + $ward2.val() + $anc2.val();\r\n        }\r\n        else if ($anc2.val()) {\r\n            // you've got a anc with no ward\r\n            return flagZone;\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // alert(zoneValue);\r\n    // verify zone with same script as python server side\r\n    // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\r\n    var verifiedZ = false;\r\n    if (zoneValue == \"\" || !zoneValue) {\r\n        // this was an error before , but having an empty value is ok\r\n        return 0;\r\n    }\r\n    if (zoneValue.length < 1) {\r\n        return flagZone;\r\n    }\r\n    var look = zoneValue[0];\r\n    if (ward.test(zoneValue[0])) {\r\n        // we have a ward in first position\r\n        if (zoneValue.length < 2) {\r\n            // it was just a single ward\r\n            return 0;\r\n        }\r\n        if (amp.test(zoneValue[1])) {\r\n            //single digit ward and ...\r\n            if (ward.test(zoneValue[2])) {\r\n                //single digit ward and ward and ...\r\n                if (zoneValue.length < 4) {\r\n                    //single digit ward and single digit ward and done\r\n                    return 0;\r\n                }\r\n                if (anc.test(zoneValue[3])) {\r\n                    // single digit ward and ward+anc and done\r\n                    return 0;\r\n                }\r\n                else {\r\n                    //single digit ward and some garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n        }\r\n        else if (anc.test(zoneValue[1])) {\r\n            // ward + anc\r\n            if (zoneValue.length < 3) {\r\n                // ward + anc and done\r\n                return 0;\r\n            }\r\n            else if (amp.test(zoneValue[2])) {\r\n                // ward + anc and ...\r\n                if (zoneValue.length < 4) {\r\n                    // oops, nothing after the ampersand\r\n                    // we could just fix it here clip the ampersand\r\n                    return flagZone;\r\n                }\r\n                else if (ward.test(zoneValue[3])) {\r\n                    // ward + anc and ward and ...\r\n                    if (zoneValue.length < 5) {\r\n                        // ward + anc and single digit ward and done\r\n                        return 0;\r\n                    }\r\n                    else if (zoneValue.length > 5) {\r\n                        // too many characters  - - shouldn't happen here but check anyway\r\n                        return flagZone;\r\n                    }\r\n                    else if (anc.test(zoneValue[4])) {\r\n                        // ward + anc and ward = anc and done\r\n                        return 0;\r\n                    }\r\n                    else {\r\n                        // ward + anc + ward + garbage\r\n                        return flagZone;\r\n                    }\r\n                }\r\n                else {\r\n                    // ward + anc + ampersand + garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n            else {\r\n                // ward + anc + garbage\r\n                return flagZone;\r\n            }\r\n        }\r\n        else {\r\n            //ward + garbage\r\n            return flagZone;\r\n        }\r\n\r\n\r\n\r\n    }\r\n    else {\r\n        //garbage from the get go\r\n        return flagZone;\r\n    }\r\n    //should never get here\r\n    return -1;\r\n};\r\n\r\nfunction zoneCheck (evt) {\r\n\r\n\r\n    if ($ward1.val() != \"\") {\r\n        $anc1.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc1.attr('disabled', true);\r\n        $anc1.val(\"\");\r\n    }\r\n    if ($ward2.val() != \"\") {\r\n        $anc2.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc2.attr('disabled', true);\r\n        $anc2.val(\"\");\r\n    }\r\n    var err = zoneVerify(false);\r\n    if (err) {\r\n        $zoneDiv.removeClass(\"edit_div\");\r\n        $zoneDiv.addClass(\"edit_div_err\");\r\n        verify(flagOR, flagZone);\r\n    }\r\n    else {\r\n        $zoneDiv.removeClass(\"edit_div_err\");\r\n        $zoneDiv.addClass(\"edit_div\");\r\n        verify(flagORX, flagZone);\r\n        feature.attributes.ZONE_ID = zoneValue;\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\SignValidations.js"],"names":["parkingtypesigns","mphSigns","MutcdDuplicate","newCode","signs","isDupe","i","length","MUTCD","code","console","log","isSpeedLimit","mutt","toUpperCase","speedy","find"],"mappings":"AAAA,SAAQA,gBAAR,EAA0BC,QAA1B,QAAyC,wBAAzC,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,KAAjC,EAAwC;AAE3C,MAAIC,MAAM,GAAG,KAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIF,KAAK,CAACE,CAAD,CAAL,CAASE,KAAT,CAAeC,IAAf,KAAwBN,OAA5B,EAAqC;AACjCE,MAAAA,MAAM,GAAG,IAAT;AACH;AACJ;;AACDK,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,MAAxB;AACA,SAAOA,MAAP;AACH;AAED,OAAO,SAASO,YAAT,CAAsBC,IAAtB,EAA4B;AAC/BA,EAAAA,IAAI,GAAGA,IAAI,CAACC,WAAL,EAAP;AACA,MAAMC,MAAM,GAAGd,QAAQ,CAACe,IAAT,CAAc,UAACP,IAAD,EAAU;AAEnC,QAAIA,IAAI,KAAKI,IAAb,EAAmB;AACf,aAAOA,IAAP;AACH;AACJ,GALc,CAAf;;AAOJ,MAAIE,MAAJ,EAAW;AACP,WAAO,EAAP;AACH,GAFD,MAII,OAAO,UAAP;AAEH;AACD","sourcesContent":["import {parkingtypesigns, mphSigns} from \"../../../SignworksJSON\";\r\n\r\n// newCode is the mutcd.code that is being checked signs -  an array of signs on\r\n// the signpost each sign should have a property called MUTCD that has the info\r\n// from the sign catalog\r\nexport function MutcdDuplicate(newCode, signs) {\r\n\r\n    let isDupe = false;\r\n    for (let i = 0; i < signs.length; i++) {\r\n        if (signs[i].MUTCD.code === newCode) {\r\n            isDupe = true;\r\n        }\r\n    }\r\n    console.log('isDupe :', isDupe);\r\n    return isDupe\r\n}\r\n\r\nexport function isSpeedLimit(mutt) {\r\n    mutt = mutt.toUpperCase();\r\n    const speedy = mphSigns.find((code) => {\r\n       \r\n        if (code === mutt) {\r\n            return mutt;\r\n        }\r\n    })\r\n   \r\nif (speedy){\r\n    return \"\"\r\n}\r\nelse\r\n    return \"disabled\";\r\n\r\n}\r\n/*\r\nfunction zoneVerify (fromSource) {\r\n\r\n\r\n    if (!fromSource) {\r\n        //assemble zone\r\n        zoneValue = $ward1.val() + $anc1.val();\r\n        if ($ward2.val()) {\r\n            zoneValue += \"&\" + $ward2.val() + $anc2.val();\r\n        }\r\n        else if ($anc2.val()) {\r\n            // you've got a anc with no ward\r\n            return flagZone;\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // alert(zoneValue);\r\n    // verify zone with same script as python server side\r\n    // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\r\n    var verifiedZ = false;\r\n    if (zoneValue == \"\" || !zoneValue) {\r\n        // this was an error before , but having an empty value is ok\r\n        return 0;\r\n    }\r\n    if (zoneValue.length < 1) {\r\n        return flagZone;\r\n    }\r\n    var look = zoneValue[0];\r\n    if (ward.test(zoneValue[0])) {\r\n        // we have a ward in first position\r\n        if (zoneValue.length < 2) {\r\n            // it was just a single ward\r\n            return 0;\r\n        }\r\n        if (amp.test(zoneValue[1])) {\r\n            //single digit ward and ...\r\n            if (ward.test(zoneValue[2])) {\r\n                //single digit ward and ward and ...\r\n                if (zoneValue.length < 4) {\r\n                    //single digit ward and single digit ward and done\r\n                    return 0;\r\n                }\r\n                if (anc.test(zoneValue[3])) {\r\n                    // single digit ward and ward+anc and done\r\n                    return 0;\r\n                }\r\n                else {\r\n                    //single digit ward and some garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n        }\r\n        else if (anc.test(zoneValue[1])) {\r\n            // ward + anc\r\n            if (zoneValue.length < 3) {\r\n                // ward + anc and done\r\n                return 0;\r\n            }\r\n            else if (amp.test(zoneValue[2])) {\r\n                // ward + anc and ...\r\n                if (zoneValue.length < 4) {\r\n                    // oops, nothing after the ampersand\r\n                    // we could just fix it here clip the ampersand\r\n                    return flagZone;\r\n                }\r\n                else if (ward.test(zoneValue[3])) {\r\n                    // ward + anc and ward and ...\r\n                    if (zoneValue.length < 5) {\r\n                        // ward + anc and single digit ward and done\r\n                        return 0;\r\n                    }\r\n                    else if (zoneValue.length > 5) {\r\n                        // too many characters  - - shouldn't happen here but check anyway\r\n                        return flagZone;\r\n                    }\r\n                    else if (anc.test(zoneValue[4])) {\r\n                        // ward + anc and ward = anc and done\r\n                        return 0;\r\n                    }\r\n                    else {\r\n                        // ward + anc + ward + garbage\r\n                        return flagZone;\r\n                    }\r\n                }\r\n                else {\r\n                    // ward + anc + ampersand + garbage\r\n                    return flagZone;\r\n                }\r\n            }\r\n            else {\r\n                // ward + anc + garbage\r\n                return flagZone;\r\n            }\r\n        }\r\n        else {\r\n            //ward + garbage\r\n            return flagZone;\r\n        }\r\n\r\n\r\n\r\n    }\r\n    else {\r\n        //garbage from the get go\r\n        return flagZone;\r\n    }\r\n    //should never get here\r\n    return -1;\r\n};\r\n\r\nfunction zoneCheck (evt) {\r\n\r\n\r\n    if ($ward1.val() != \"\") {\r\n        $anc1.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc1.attr('disabled', true);\r\n        $anc1.val(\"\");\r\n    }\r\n    if ($ward2.val() != \"\") {\r\n        $anc2.attr('disabled', false);\r\n    }\r\n    else {\r\n        $anc2.attr('disabled', true);\r\n        $anc2.val(\"\");\r\n    }\r\n    var err = zoneVerify(false);\r\n    if (err) {\r\n        $zoneDiv.removeClass(\"edit_div\");\r\n        $zoneDiv.addClass(\"edit_div_err\");\r\n        verify(flagOR, flagZone);\r\n    }\r\n    else {\r\n        $zoneDiv.removeClass(\"edit_div_err\");\r\n        $zoneDiv.addClass(\"edit_div\");\r\n        verify(flagORX, flagZone);\r\n        feature.attributes.ZONE_ID = zoneValue;\r\n    }\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}