{"ast":null,"code":"import { parkingtypesigns, mphSigns } from \"../../../SignworksJSON\"; // newCode is the mutcd.code that is being checked signs -  an array of signs on\n// the signpost each sign should have a property called MUTCD that has the info\n// from the sign catalog\n\nexport function MutcdDuplicate(newCode, signs) {\n  var isDupe = \"\";\n\n  for (var i = 0; i < signs.length; i++) {\n    if (signs[i].MUTCD.code === newCode) {\n      isDupe = true;\n    }\n  }\n\n  return isDupe;\n}\nexport function isSpeedLimit(mutt) {\n  mutt = mutt.toUpperCase();\n  var speedy = mphSigns.find(function (code) {\n    if (code === mutt) {\n      return mutt;\n    }\n  });\n\n  if (speedy) {\n    return \"\";\n  } else return \"disabled\";\n}\nexport function zoneVerify(edState) {\n  //regex \n  var anc = /[A-G]/;\n  var ward = /[1-8]/;\n  var amp = /[&]/;\n  var ward1 = edState.ward1 ? edState.ward1 : \"\";\n  var ward2 = edState.ward2 ? edState.ward2 : \"\";\n  var anc1 = edState.anc1 ? edState.anc1 : \"\";\n  var anc2 = edState.anc2 ? edState.anc2 : \"\"; //assemble zone\n\n  var zoneValue = ward1 + anc1;\n\n  if (ward2) {\n    zoneValue += \"&\" + ward2 + anc2;\n  } else if (anc2) {\n    // you've got a anc with no ward\n    return false;\n  } // alert(zoneValue);\n  // verify zone with same script as python server side\n  // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\n\n\n  if (zoneValue == \"\" || !zoneValue) {\n    // this was an error before , but having an empty value is ok\n    // above is an old comment, might not be \"true\" in 3.0\n    return true;\n  }\n\n  if (zoneValue.length < 1) {\n    return true;\n  }\n\n  if (ward.test(zoneValue[0])) {\n    // we have a ward in first position\n    if (zoneValue.length < 2) {\n      // it was just a single ward\n      return true;\n    }\n\n    if (amp.test(zoneValue[1])) {\n      //single digit ward and ...\n      if (ward.test(zoneValue[2])) {\n        //single digit ward and ward and ...\n        if (zoneValue.length < 4) {\n          //single digit ward and single digit ward and done\n          return true;\n        }\n\n        if (anc.test(zoneValue[3])) {\n          // single digit ward and ward+anc and done\n          return true;\n        } else {\n          //single digit ward and some garbage\n          return false;\n        }\n      }\n    } else if (anc.test(zoneValue[1])) {\n      // ward + anc\n      if (zoneValue.length < 3) {\n        // ward + anc and done\n        return true;\n      } else if (amp.test(zoneValue[2])) {\n        // ward + anc and ...\n        if (zoneValue.length < 4) {\n          // oops, nothing after the ampersand\n          // we could just fix it here clip the ampersand\n          return false;\n        } else if (ward.test(zoneValue[3])) {\n          // ward + anc and ward and ...\n          if (zoneValue.length < 5) {\n            // ward + anc and single digit ward and done\n            return true;\n          } else if (zoneValue.length > 5) {\n            // too many characters  - - shouldn't happen here but check anyway\n            return false;\n          } else if (anc.test(zoneValue[4])) {\n            // ward + anc and ward = anc and done\n            return true;\n          } else {\n            // ward + anc + ward + garbage\n            return false;\n          }\n        } else {\n          // ward + anc + ampersand + garbage\n          return false;\n        }\n      } else {\n        // ward + anc + garbage\n        return false;\n      }\n    } else {\n      //ward + garbage\n      return false;\n    }\n  } else {\n    //garbage from the get go\n    return false;\n  } //should never get here\n\n\n  return false;\n}\n; //gets an individual timeband and makes sure that it is internally consistent\n\nexport function timebandVerify(timeband) {\n  console.log('timeband', timeband);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\myModules\\Signs\\SignValidations.js"],"names":["parkingtypesigns","mphSigns","MutcdDuplicate","newCode","signs","isDupe","i","length","MUTCD","code","isSpeedLimit","mutt","toUpperCase","speedy","find","zoneVerify","edState","anc","ward","amp","ward1","ward2","anc1","anc2","zoneValue","test","timebandVerify","timeband","console","log"],"mappings":"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","sourcesContent":["import {parkingtypesigns, mphSigns} from \"../../../SignworksJSON\";\r\n\r\n// newCode is the mutcd.code that is being checked signs -  an array of signs on\r\n// the signpost each sign should have a property called MUTCD that has the info\r\n// from the sign catalog\r\nexport function MutcdDuplicate(newCode, signs) {\r\n\r\n    let isDupe = \"\";\r\n    for (let i = 0; i < signs.length; i++) {\r\n        if (signs[i].MUTCD.code === newCode) {\r\n            isDupe =true;\r\n        }\r\n    }\r\n   \r\n    return isDupe\r\n}\r\n\r\nexport function isSpeedLimit(mutt) {\r\n    mutt = mutt.toUpperCase();\r\n    const speedy = mphSigns.find((code) => {\r\n       \r\n        if (code === mutt) {\r\n            return mutt;\r\n        }\r\n    })\r\n   \r\nif (speedy){\r\n    return \"\"\r\n}\r\nelse\r\n    return \"disabled\";\r\n\r\n}\r\n\r\nexport function zoneVerify (edState) {\r\n\r\n//regex \r\nconst anc = /[A-G]/\r\nconst ward = /[1-8]/\r\nconst amp = /[&]/\r\n\r\nconst ward1 = edState.ward1?edState.ward1:\"\";\r\nconst ward2 = edState.ward2?edState.ward2:\"\";\r\nconst anc1 = edState.anc1?edState.anc1:\"\";\r\nconst anc2 = edState.anc2?edState.anc2:\"\";\r\n\r\n\r\n        //assemble zone\r\n      let  zoneValue = ward1 + anc1;\r\n     \r\n        if (ward2) {\r\n            zoneValue += \"&\" + ward2 + anc2;\r\n        }\r\n        else if (anc2) {\r\n            // you've got a anc with no ward\r\n            return false;\r\n\r\n        }\r\n     \r\n\r\n\r\n\r\n    // alert(zoneValue);\r\n    // verify zone with same script as python server side\r\n    // this algorithm is overly rigorous since unlike the server side, the zone value is constrained by input controls.  But it should work and might be needed later\r\n   \r\n    if (zoneValue == \"\" || !zoneValue) {\r\n        // this was an error before , but having an empty value is ok\r\n        // above is an old comment, might not be \"true\" in 3.0\r\n        return true;\r\n    }\r\n    if (zoneValue.length < 1) {\r\n        return true;\r\n    }\r\n    \r\n    if (ward.test(zoneValue[0])) {\r\n        // we have a ward in first position\r\n        if (zoneValue.length < 2) {\r\n            // it was just a single ward\r\n            return true;\r\n        }\r\n        if (amp.test(zoneValue[1])) {\r\n            //single digit ward and ...\r\n            if (ward.test(zoneValue[2])) {\r\n                //single digit ward and ward and ...\r\n                if (zoneValue.length < 4) {\r\n                    //single digit ward and single digit ward and done\r\n                    return true;\r\n                }\r\n                if (anc.test(zoneValue[3])) {\r\n                    // single digit ward and ward+anc and done\r\n                    return true;\r\n                }\r\n                else {\r\n                    //single digit ward and some garbage\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        else if (anc.test(zoneValue[1])) {\r\n            // ward + anc\r\n            if (zoneValue.length < 3) {\r\n                // ward + anc and done\r\n                return true;\r\n            }\r\n            else if (amp.test(zoneValue[2])) {\r\n                // ward + anc and ...\r\n                if (zoneValue.length < 4) {\r\n                    // oops, nothing after the ampersand\r\n                    // we could just fix it here clip the ampersand\r\n                    return false;\r\n                }\r\n                else if (ward.test(zoneValue[3])) {\r\n                    // ward + anc and ward and ...\r\n                    if (zoneValue.length < 5) {\r\n                        // ward + anc and single digit ward and done\r\n                        return true;\r\n                    }\r\n                    else if (zoneValue.length > 5) {\r\n                        // too many characters  - - shouldn't happen here but check anyway\r\n                        return false;\r\n                    }\r\n                    else if (anc.test(zoneValue[4])) {\r\n                        // ward + anc and ward = anc and done\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        // ward + anc + ward + garbage\r\n                        return false;\r\n                    }\r\n                }\r\n                else {\r\n                    // ward + anc + ampersand + garbage\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                // ward + anc + garbage\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            //ward + garbage\r\n            return false;\r\n        }\r\n\r\n\r\n\r\n    }\r\n    else {\r\n        //garbage from the get go\r\n        return false;\r\n    }\r\n    //should never get here\r\n    return false;\r\n};\r\n\r\n\r\n//gets an individual timeband and makes sure that it is internally consistent\r\nexport function timebandVerify(timeband){\r\n  console.log('timeband', timeband)\r\n}"]},"metadata":{},"sourceType":"module"}