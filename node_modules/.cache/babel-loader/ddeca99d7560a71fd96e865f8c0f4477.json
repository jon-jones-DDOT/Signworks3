{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getCone),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchStreetSmart);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet } from '../../utils/JSAPI'; // WORKER //\n\nfunction getCone(action) {\n  var x, y, z, newPoint, results;\n  return _regeneratorRuntime.wrap(function getCone$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          try {\n            x = action.payload.point[0];\n            y = action.payload.point[1];\n            z = action.payload.point[2];\n            newPoint = {\n              type: 'point',\n              x: x,\n              y: y,\n              z: z,\n              SpatialReference: {\n                wkid: 2248\n              }\n            };\n            results = projectGeometry([[newPoint], action.payload.layers.geometryService, 2248, 4326]);\n            console.log('results :', results);\n            /*\r\n            .then(resp => createTriangle([\r\n                [resp[0]],\r\n                imagePitch,\r\n                imageYaw\r\n            ])\r\n              .then(resp => {\r\n                console.log('resp :', resp);\r\n            }), error => (error) => {\r\n                alert(error)\r\n            });\r\n            */\n\n            /*  const projectResult = yield call(projectGeometry, [\r\n                [action.payload.sel[0].geometry],\r\n                action.payload.layers.geometryService,\r\n                action.payload.inSR,\r\n                action.payload.outSR\r\n            ]);\r\n                yield put({\r\n                type: graphicTypes.SET_NEW_CONE_RG,\r\n                payload: {\r\n                }\r\n            });\r\n            */\n          } catch (e) {\n            console.log('SAGA ERROR: graphic/getNewCone, ', e);\n          }\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // WATCHER //\n\n\nexport function watchStreetSmart() {\n  return _regeneratorRuntime.wrap(function watchStreetSmart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_getNewCone.js"],"names":["getCone","watchStreetSmart","call","put","takeLatest","types","graphicTypes","projectGeometry","getSupportByExtent","pointToExtentSaga","createFeatureSet","action","x","payload","point","y","z","newPoint","type","SpatialReference","wkid","results","layers","geometryService","console","log","e","GET_NEW_CONE_S"],"mappings":";;;;yBAMWA,O;;;yBAyDOC,gB;;AA/DlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,YAAjB,QAAoC,qBAApC;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,EAA6CC,iBAA7C,EAAgEC,gBAAhE,QAAuF,mBAAvF,C,CAEA;;AAEA,SAAWV,OAAX,CAAmBW,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,cAAI;AAGMC,YAAAA,CAHN,GAGUD,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CAHV;AAIMC,YAAAA,CAJN,GAIUJ,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CAJV;AAKME,YAAAA,CALN,GAKUL,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqB,CAArB,CALV;AAMMG,YAAAA,QANN,GAMiB;AACbC,cAAAA,IAAI,EAAE,OADO;AAEbN,cAAAA,CAAC,EAAEA,CAFU;AAGbG,cAAAA,CAAC,EAAEA,CAHU;AAIbC,cAAAA,CAAC,EAAEA,CAJU;AAKbG,cAAAA,gBAAgB,EAAE;AACdC,gBAAAA,IAAI,EAAE;AADQ;AALL,aANjB;AAkBMC,YAAAA,OAlBN,GAkBgBd,eAAe,CAAC,CAAC,CAACU,QAAD,CAAD,EAAaN,MAAM,CAACE,OAAP,CAAeS,MAAf,CAAsBC,eAAnC,EAAoD,IAApD,EAA0D,IAA1D,CAAD,CAlB/B;AAmBDC,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,OAAzB;AAGC;;;;;;;;;;;;;AAcA;;;;;;;;;;;;AAcH,WAlDD,CAkDE,OAAOK,CAAP,EAAU;AACRF,YAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDC,CAAhD;AACH;;AArDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAwDA;;;AACA,OAAO,SAAWzB,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,YAAY,CAACqB,cAAd,EAA8B3B,OAA9B,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as graphicTypes} from '../reducers/graphic';\r\nimport {projectGeometry, getSupportByExtent, pointToExtentSaga, createFeatureSet} from '../../utils/JSAPI'\r\n\r\n// WORKER //\r\n\r\nfunction * getCone(action) {\r\n    try {\r\n\r\n       \r\n        const x = action.payload.point[0];\r\n        const y = action.payload.point[1];\r\n        const z = action.payload.point[2];\r\n        const newPoint = {\r\n            type: 'point',\r\n            x: x,\r\n            y: y,\r\n            z: z,\r\n            SpatialReference: {\r\n                wkid: 2248\r\n            }\r\n        }\r\n\r\n\r\n        \r\n        const results = projectGeometry([[newPoint], action.payload.layers.geometryService, 2248, 4326])\r\n       console.log('results :', results);\r\n     \r\n    \r\n        /*\r\n        .then(resp => createTriangle([\r\n            [resp[0]],\r\n            imagePitch,\r\n            imageYaw\r\n        ])\r\n\r\n        .then(resp => {\r\n            console.log('resp :', resp);\r\n        }), error => (error) => {\r\n            alert(error)\r\n        });\r\n*/\r\n\r\n        /*  const projectResult = yield call(projectGeometry, [\r\n            [action.payload.sel[0].geometry],\r\n            action.payload.layers.geometryService,\r\n            action.payload.inSR,\r\n            action.payload.outSR\r\n        ]);\r\n\r\n\r\n        yield put({\r\n            type: graphicTypes.SET_NEW_CONE_RG,\r\n            payload: {\r\n            }\r\n        });\r\n*/\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: graphic/getNewCone, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchStreetSmart() {\r\n\r\n    yield takeLatest(graphicTypes.GET_NEW_CONE_S, getCone);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}