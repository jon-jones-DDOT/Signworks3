{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getFullSignPost);\n\nimport { call, put } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { types as graphicTypes } from '../reducers/graphic';\nimport { getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI';\nexport function getFullSignPost(action) {\n  var errorMUTCD, support, signsREsp, signArray, signs, muttQueryString, i, muttData, _i, sign, results, j;\n\n  return _regeneratorRuntime.wrap(function getFullSignPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\"\n          };\n          console.log('action :', action);\n          support = action.payload.support; // retrieve the new related signs with a call to AGS\n\n          _context.next = 6;\n          return call(getRelatedSigns, [support, action.payload.layers.signs, action.payload.token]);\n\n        case 6:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 15;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 15:\n          muttData = _context.sent;\n          console.log('muttData :', muttData); //loop through globalIDS and get timebands\n\n          _i = 0;\n\n        case 18:\n          if (!(_i < signArray.length)) {\n            _context.next = 31;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i]\n          };\n          _context.next = 22;\n          return call(getRelatedTimebands, [signArray[_i], action.payload.layers.timebands]);\n\n        case 22:\n          results = _context.sent;\n\n          if (!signArray[_i].attributes.SIGNCODE) {\n            signArray[_i].attributes.SIGNCODE = \"unclassified\";\n          }\n\n          sign.timebands = results.data.features;\n\n          for (j = 0; j < muttData.length; j++) {\n            if (signArray[_i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\n              sign.MUTCD = muttData[j];\n            }\n          }\n\n          if (sign.MUTCD === undefined) {\n            sign.MUTCD = errorMUTCD;\n          } //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\n\n\n          signs.push(sign);\n\n        case 28:\n          _i++;\n          _context.next = 18;\n          break;\n\n        case 31:\n          _context.next = 33;\n          return put({\n            type: graphicTypes.SET_SUPPORT_MARKER_RG,\n            payload: {\n              selSupportGeom: support.geometry\n            }\n          });\n\n        case 33:\n          _context.next = 35;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT_RM,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 35:\n          _context.next = 40;\n          break;\n\n        case 37:\n          _context.prev = 37;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/reload, ', _context.t0);\n\n        case 40:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 37]]);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\reload.js"],"names":["getFullSignPost","call","put","types","mapTypes","graphicTypes","getRelatedSigns","getMUTCDS","getRelatedTimebands","action","errorMUTCD","name","serverImagePath","console","log","support","payload","layers","signs","token","signsREsp","signArray","data","features","muttQueryString","length","i","attributes","SIGNCODE","replace","muttData","sign","feature","timebands","results","j","toUpperCase","code","MUTCD","undefined","push","type","SET_SUPPORT_MARKER_RG","selSupportGeom","geometry","SET_SELECTED_SUPPORT_RM"],"mappings":"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","sourcesContent":["import {call, put} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {types as graphicTypes} from '../reducers/graphic'\r\nimport {getRelatedSigns, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\nexport function * getFullSignPost(action) {\r\n\r\n    try {\r\n\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        console.log('action :', action);\r\n        const support = action.payload.support;\r\n  \r\n        // retrieve the new related signs with a call to AGS\r\n\r\n        const signsREsp = yield call(getRelatedSigns, [support, action.payload.layers.signs, action.payload.token])\r\n\r\n        const signArray = signsREsp.data.features;\r\n\r\n        // start creating sign payload\r\n        const signs = [];\r\n        // create a string to get back MUTCD metadata for all signs on post\r\n\r\n        let muttQueryString = \"\";\r\n\r\n        if (signArray.length < 1) {\r\n            muttQueryString = \"PR-OTHER\"\r\n        }\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            if (signArray[i].attributes.SIGNCODE) {\r\n                muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n            } else {\r\n                muttQueryString += \"PR-OTHER,\"\r\n            }\r\n        }\r\n        muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n        // call out to Sign Catalog API to get MUTCD metadata\r\n        const muttData = yield call(getMUTCDS, [muttQueryString])\r\n        console.log('muttData :', muttData);\r\n\r\n        //loop through globalIDS and get timebands\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            let sign = {\r\n                feature: signArray[i]\r\n\r\n            }\r\n\r\n            const results = yield call(getRelatedTimebands, [signArray[i], action.payload.layers.timebands])\r\n            if (!signArray[i].attributes.SIGNCODE) {\r\n                signArray[i].attributes.SIGNCODE = \"unclassified\"\r\n            }\r\n            sign.timebands = results.data.features;\r\n            for (let j = 0; j < muttData.length; j++) {\r\n\r\n                if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                    sign.MUTCD = muttData[j];\r\n\r\n                }\r\n            }\r\n            if (sign.MUTCD === undefined) {\r\n                sign.MUTCD = errorMUTCD;\r\n\r\n            }\r\n            //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n            signs.push(sign)\r\n\r\n        }\r\n\r\n        // Put marker in store\r\n        yield put({\r\n            type: graphicTypes.SET_SUPPORT_MARKER_RG,\r\n            payload: {\r\n                selSupportGeom: support.geometry\r\n            }\r\n        });\r\n        // put new signpost in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT_RM,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/reload, ', e);\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}