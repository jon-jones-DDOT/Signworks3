{"ast":null,"code":"var Accessor = require('../accessor');\n\nvar React = require('react');\n\nvar Token = require('./token');\n\nvar KeyEvent = require('../keyevent');\n\nvar Typeahead = require('../typeahead');\n\nvar classNames = require('classnames');\n\nvar createReactClass = require('create-react-class');\n\nvar PropTypes = require('prop-types');\n\nfunction _arraysAreDifferent(array1, array2) {\n  if (array1.length != array2.length) {\n    return true;\n  }\n\n  for (var i = array2.length - 1; i >= 0; i--) {\n    if (array2[i] !== array1[i]) {\n      return true;\n    }\n  }\n}\n/**\n * A typeahead that, when an option is selected, instead of simply filling\n * the text entry widget, prepends a renderable \"token\", that may be deleted\n * by pressing backspace on the beginning of the line with the keyboard.\n */\n\n\nvar TypeaheadTokenizer = createReactClass({\n  displayName: 'TypeaheadTokenizer',\n  propTypes: {\n    name: PropTypes.string,\n    options: PropTypes.array,\n    customClasses: PropTypes.object,\n    allowCustomValues: PropTypes.number,\n    defaultSelected: PropTypes.array,\n    initialValue: PropTypes.string,\n    placeholder: PropTypes.string,\n    disabled: PropTypes.bool,\n    inputProps: PropTypes.object,\n    onTokenRemove: PropTypes.func,\n    onKeyDown: PropTypes.func,\n    onKeyPress: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    onTokenAdd: PropTypes.func,\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func,\n    filterOption: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    searchOptions: PropTypes.func,\n    displayOption: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    formInputOption: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    maxVisible: PropTypes.number,\n    resultsTruncatedMessage: PropTypes.string,\n    defaultClassNames: PropTypes.bool,\n    showOptionsWhenEmpty: PropTypes.bool\n  },\n  getInitialState: function getInitialState() {\n    return {\n      // We need to copy this to avoid incorrect sharing\n      // of state across instances (e.g., via getDefaultProps())\n      selected: this.props.defaultSelected.slice(0)\n    };\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      options: [],\n      defaultSelected: [],\n      customClasses: {},\n      allowCustomValues: 0,\n      initialValue: \"\",\n      placeholder: \"\",\n      disabled: false,\n      inputProps: {},\n      defaultClassNames: true,\n      filterOption: null,\n      searchOptions: null,\n      displayOption: function displayOption(token) {\n        return token;\n      },\n      formInputOption: null,\n      onKeyDown: function onKeyDown(event) {},\n      onKeyPress: function onKeyPress(event) {},\n      onKeyUp: function onKeyUp(event) {},\n      onFocus: function onFocus(event) {},\n      onBlur: function onBlur(event) {},\n      onTokenAdd: function onTokenAdd() {},\n      onTokenRemove: function onTokenRemove() {},\n      showOptionsWhenEmpty: false\n    };\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // if we get new defaultProps, update selected\n    if (_arraysAreDifferent(this.props.defaultSelected, nextProps.defaultSelected)) {\n      this.setState({\n        selected: nextProps.defaultSelected.slice(0)\n      });\n    }\n  },\n  focus: function focus() {\n    this.refs.typeahead.focus();\n  },\n  getSelectedTokens: function getSelectedTokens() {\n    return this.state.selected;\n  },\n  // TODO: Support initialized tokens\n  //\n  _renderTokens: function _renderTokens() {\n    var tokenClasses = {};\n    tokenClasses[this.props.customClasses.token] = !!this.props.customClasses.token;\n    var classList = classNames(tokenClasses);\n    var result = this.state.selected.map(function (selected) {\n      var displayString = Accessor.valueForOption(this.props.displayOption, selected);\n      var value = Accessor.valueForOption(this.props.formInputOption || this.props.displayOption, selected);\n      return React.createElement(Token, {\n        key: displayString,\n        className: classList,\n        onRemove: this._removeTokenForValue,\n        object: selected,\n        value: value,\n        name: this.props.name\n      }, displayString);\n    }, this);\n    return result;\n  },\n  _getOptionsForTypeahead: function _getOptionsForTypeahead() {\n    // return this.props.options without this.selected\n    return this.props.options;\n  },\n  _onKeyDown: function _onKeyDown(event) {\n    // We only care about intercepting backspaces\n    if (event.keyCode === KeyEvent.DOM_VK_BACK_SPACE) {\n      return this._handleBackspace(event);\n    }\n\n    this.props.onKeyDown(event);\n  },\n  _handleBackspace: function _handleBackspace(event) {\n    // No tokens\n    if (!this.state.selected.length) {\n      return;\n    } // Remove token ONLY when bksp pressed at beginning of line\n    // without a selection\n\n\n    var entry = this.refs.typeahead.refs.entry;\n\n    if (entry.selectionStart == entry.selectionEnd && entry.selectionStart == 0) {\n      this._removeTokenForValue(this.state.selected[this.state.selected.length - 1]);\n\n      event.preventDefault();\n    }\n  },\n  _removeTokenForValue: function _removeTokenForValue(value) {\n    var index = this.state.selected.indexOf(value);\n\n    if (index == -1) {\n      return;\n    }\n\n    this.state.selected.splice(index, 1);\n    this.setState({\n      selected: this.state.selected\n    });\n    this.props.onTokenRemove(value);\n    return;\n  },\n  _addTokenForValue: function _addTokenForValue(value) {\n    if (this.state.selected.indexOf(value) != -1) {\n      return;\n    }\n\n    this.state.selected.push(value);\n    this.setState({\n      selected: this.state.selected\n    });\n    this.refs.typeahead.setEntryText(\"\");\n    this.props.onTokenAdd(value);\n  },\n  render: function render() {\n    var classes = {};\n    classes[this.props.customClasses.typeahead] = !!this.props.customClasses.typeahead;\n    var classList = classNames(classes);\n    var tokenizerClasses = [this.props.defaultClassNames && \"typeahead-tokenizer\"];\n    tokenizerClasses[this.props.className] = !!this.props.className;\n    var tokenizerClassList = classNames(tokenizerClasses);\n    return React.createElement('div', {\n      className: tokenizerClassList\n    }, this._renderTokens(), React.createElement(Typeahead, {\n      ref: 'typeahead',\n      className: classList,\n      placeholder: this.props.placeholder,\n      disabled: this.props.disabled,\n      inputProps: this.props.inputProps,\n      allowCustomValues: this.props.allowCustomValues,\n      customClasses: this.props.customClasses,\n      options: this._getOptionsForTypeahead(),\n      initialValue: this.props.initialValue,\n      maxVisible: this.props.maxVisible,\n      resultsTruncatedMessage: this.props.resultsTruncatedMessage,\n      onOptionSelected: this._addTokenForValue,\n      onKeyDown: this._onKeyDown,\n      onKeyPress: this.props.onKeyPress,\n      onKeyUp: this.props.onKeyUp,\n      onFocus: this.props.onFocus,\n      onBlur: this.props.onBlur,\n      displayOption: this.props.displayOption,\n      defaultClassNames: this.props.defaultClassNames,\n      filterOption: this.props.filterOption,\n      searchOptions: this.props.searchOptions,\n      showOptionsWhenEmpty: this.props.showOptionsWhenEmpty\n    }));\n  }\n});\nmodule.exports = TypeaheadTokenizer;","map":null,"metadata":{},"sourceType":"script"}