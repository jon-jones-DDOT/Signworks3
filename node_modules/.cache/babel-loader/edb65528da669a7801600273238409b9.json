{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n// or agreed to in writing, software distributed under the License is\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied. See the License for the specific language\n// governing permissions and limitations under the License.â€‹ Esri Loader\nimport { loadModules } from 'esri-loader'; // Esri Helper Functions\n\nimport { bootstrapJSAPI } from '../../../utils/esriHelper';\n/**\r\n * Class to help with Authentication\r\n * This is a non-rendered class that is usually attached to the window\r\n * @type {Class}\r\n */\n\nvar AuthManager = function AuthManager(appId, _portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\n  var _this = this;\n\n  _classCallCheck(this, AuthManager);\n\n  this.startup = function () {\n    return new Promise(function (resolve, reject) {\n      bootstrapJSAPI(_this.portalUrl, _this.jsapiUrl, _this.jsapiV4).then(function (success) {\n        // Check if we need to authenticate    if (!this.portalUrl) {      return\n        // resolve();   } If we need authentication then set up IDManager\n        resolve(); //     this.createIDManager().then(resolve());\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.createIDManager = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/identity/IdentityManager', 'esri/identity/OAuthInfo']).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            esriId = _ref2[0],\n            OAuthInfo = _ref2[1];\n\n        _this.idManager = esriId;\n        console.log('this.idManager :', _this.idManager);\n        var esriAuthID = localStorage.getItem('esri_auth_id');\n\n        if (esriAuthID) {\n          // if auth was persisted, just use that\n          _this.idManager.initialize(esriAuthID);\n        } else {\n          _this.idManager.useSignInPage = !_this.loginWithPopup;\n          _this.oAuthInfo = new OAuthInfo({\n            appId: _this.appId,\n            portalUrl: _this.portalUrl,\n            popup: _this.loginWithPopup\n          });\n\n          _this.idManager.registerOAuthInfos([_this.oAuthInfo]);\n        }\n\n        resolve();\n      }).catch(function (err) {\n        reject();\n      });\n    });\n  };\n\n  this.login = function () {\n    var portalUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.portalUrl;\n    return;\n    return new Promise(function (resolve, reject) {\n      _this.checkLogin().then(function (success) {\n        _this.getUser().then(resolve, reject);\n      }, function (failed) {\n        var persistObj = _this.checkPersist();\n\n        if (!_this.idManager && persistObj && persistObj.portalUrl) {\n          // if there is persistent login info grab that portal url\n          _this.portalUrl = persistObj.portalUrl;\n        } else if (portalUrl) {\n          // if a portal url was passed in as a param grab that\n          _this.portalUrl = portalUrl;\n        } else {\n          // no portal, we don't need to login and can return\n          return resolve();\n        } // use the aquired portal url to setup a new ID Manager and login\n\n\n        _this.createIDManager().then(function () {\n          _this.doLogin().then(function (user) {\n            return resolve(user);\n          }, function (error) {\n            return reject(error);\n          });\n        });\n      });\n    });\n  };\n\n  this.checkLogin = function () {\n    return new Promise(function (resolve, reject) {\n      // Reject this if there is no portal URL in the config file\n      if (!_this.portalUrl) {\n        return reject();\n      }\n\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.checkSignInStatus(sharingUrl).then(function (credential) {\n        _this.persistAuth();\n\n        _this.getUser().then(resolve, reject);\n      }).otherwise(function (e) {\n        reject('User is not logged in');\n      });\n    });\n  };\n\n  this.doLogin = function () {\n    // we can store the portal url here so the browser rememebers us on refresh\n    _this.persistAuth();\n\n    return new Promise(function (resolve, reject) {\n      var sharingUrl = _this.portalUrl + '/sharing';\n\n      _this.idManager.getCredential(sharingUrl, {\n        oAuthPopupConfirmation: false\n      }).then(function (credential) {\n        _this.getUser().then(resolve, reject);\n      }).otherwise(reject);\n    });\n  };\n\n  this.getUser = function () {\n    return new Promise(function (resolve, reject) {\n      loadModules(['esri/portal/Portal']).then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            Portal = _ref4[0];\n\n        var portal = new Portal({\n          url: _this.portalUrl,\n          authMode: 'immediate'\n        });\n        portal.load().then(function () {\n          _this.user = portal.user;\n\n          _this.user.fetchGroups().then(resolve(_this.user)).otherwise(reject);\n        }).otherwise(reject);\n      });\n    });\n  };\n\n  this.persistAuth = function () {\n    // persist auth to a cookie for cross-page goodness\n    var json = _this.idManager.toJSON();\n\n    localStorage.setItem('esri_auth_id', JSON.stringify(json));\n  };\n\n  this.checkPersist = function () {\n    var persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\n\n    if (persistObj && persistObj.oAuthInfos) {\n      return persistObj.oAuthInfos[0];\n    }\n\n    return null;\n  };\n\n  this.logout = function () {\n    loadModules(['dojo/cookie']).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          cookie = _ref6[0];\n\n      cookie('esri_auth', '{esri: \"logout\"}', {\n        expire: -1,\n        expires: -1,\n        path: '/'\n      });\n      localStorage.removeItem('esri_auth_id');\n\n      _this.idManager.destroyCredentials();\n    });\n  };\n\n  this.appId = appId;\n  this.portalUrl = _portalUrl;\n  this.jsapiUrl = jsapiUrl;\n  this.jsapiV4 = jsapiV4;\n  this.loginWithPopup = loginWithPopup;\n}\n/**\r\n* Use this to start up the JS API via the AuthManager class\r\n* @return {Promise} Resolves if there is no portal url, which means no login required\r\n*                   or there is a portal url and the IdentityManager is setup correctly\r\n*/\n;\n\nexport { AuthManager as default };","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\components\\esri\\auth\\AuthManager.js"],"names":["loadModules","bootstrapJSAPI","AuthManager","appId","portalUrl","jsapiUrl","jsapiV4","loginWithPopup","startup","Promise","resolve","reject","then","success","catch","err","createIDManager","esriId","OAuthInfo","idManager","console","log","esriAuthID","localStorage","getItem","initialize","useSignInPage","oAuthInfo","popup","registerOAuthInfos","login","checkLogin","getUser","failed","persistObj","checkPersist","doLogin","user","error","sharingUrl","checkSignInStatus","credential","persistAuth","otherwise","e","getCredential","oAuthPopupConfirmation","Portal","portal","url","authMode","load","fetchGroups","json","toJSON","setItem","JSON","stringify","parse","oAuthInfos","logout","cookie","expire","expires","path","removeItem","destroyCredentials"],"mappings":"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","sourcesContent":["// Copyright 2019 Esri Licensed under the Apache License, Version 2.0 (the\r\n// \"License\"); you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n// http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\r\n// or agreed to in writing, software distributed under the License is\r\n// distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n// KIND, either express or implied. See the License for the specific language\r\n// governing permissions and limitations under the License.â€‹ Esri Loader\r\nimport {loadModules} from 'esri-loader';\r\n// Esri Helper Functions\r\nimport {bootstrapJSAPI} from '../../../utils/esriHelper';\r\n\r\n/**\r\n * Class to help with Authentication\r\n * This is a non-rendered class that is usually attached to the window\r\n * @type {Class}\r\n */\r\nexport default class AuthManager {\r\n    constructor(appId, portalUrl, jsapiUrl, jsapiV4, loginWithPopup) {\r\n        this.appId = appId;\r\n        this.portalUrl = portalUrl;\r\n        this.jsapiUrl = jsapiUrl;\r\n        this.jsapiV4 = jsapiV4;\r\n        this.loginWithPopup = loginWithPopup;\r\n    }\r\n\r\n    /**\r\n   * Use this to start up the JS API via the AuthManager class\r\n   * @return {Promise} Resolves if there is no portal url, which means no login required\r\n   *                   or there is a portal url and the IdentityManager is setup correctly\r\n   */\r\n    startup = () => {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            bootstrapJSAPI(this.portalUrl, this.jsapiUrl, this.jsapiV4).then(success => {\r\n                // Check if we need to authenticate    if (!this.portalUrl) {      return\r\n                // resolve();   } If we need authentication then set up IDManager\r\n                resolve();\r\n                //     this.createIDManager().then(resolve());\r\n            }).catch(err => {\r\n                reject();\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n   * Method to create Esri JS API IdentityManager\r\n   * This is called in startup but can be called independently if needed\r\n   * @return {Promise} Resolves after IdentityManager is setup\r\n   */\r\n    createIDManager = () => {\r\n        return new Promise((resolve, reject) => {\r\n            loadModules(['esri/identity/IdentityManager', 'esri/identity/OAuthInfo']).then(([esriId, OAuthInfo]) => {\r\n                this.idManager = esriId;\r\n                console.log('this.idManager :', this.idManager);\r\n                const esriAuthID = localStorage.getItem('esri_auth_id');\r\n                if (esriAuthID) {\r\n                    // if auth was persisted, just use that\r\n                    this\r\n                        .idManager\r\n                        .initialize(esriAuthID);\r\n                } else {\r\n                    this.idManager.useSignInPage = !this.loginWithPopup;\r\n                    this.oAuthInfo = new OAuthInfo({appId: this.appId, portalUrl: this.portalUrl, popup: this.loginWithPopup});\r\n                    this\r\n                        .idManager\r\n                        .registerOAuthInfos([this.oAuthInfo]);\r\n                }\r\n\r\n                resolve();\r\n            }).catch(err => {\r\n                reject();\r\n            });\r\n        })\r\n    };\r\n\r\n    /**\r\n   * Main login function\r\n   * This will see if the user has persistent login info\r\n   * and if not it will run the login method\r\n   * @param  {string}   [portalUrl=this.portalUrl]   will default to config portalUrl\r\n   * @return {Promise}                               will resolve if user is logged in or\r\n   *                                                 conditions are met on portal url\r\n   */\r\n    login = (portalUrl = this.portalUrl) => {\r\n        return;\r\n        return new Promise((resolve, reject) => {\r\n            this\r\n                .checkLogin()\r\n                .then(success => {\r\n                    this\r\n                        .getUser()\r\n                        .then(resolve, reject);\r\n                }, failed => {\r\n                    let persistObj = this.checkPersist();\r\n\r\n                    if (!this.idManager && persistObj && persistObj.portalUrl) {\r\n                        // if there is persistent login info grab that portal url\r\n                        this.portalUrl = persistObj.portalUrl;\r\n                    } else if (portalUrl) {\r\n                        // if a portal url was passed in as a param grab that\r\n                        this.portalUrl = portalUrl;\r\n                    } else {\r\n                        // no portal, we don't need to login and can return\r\n                        return resolve();\r\n                    }\r\n\r\n                    // use the aquired portal url to setup a new ID Manager and login\r\n                    this\r\n                        .createIDManager()\r\n                        .then(() => {\r\n                            this\r\n                                .doLogin()\r\n                                .then(user => resolve(user), error => reject(error));\r\n                        });\r\n                });\r\n        });\r\n    };\r\n\r\n    /**\r\n   * Check if user is logged in already via persistent login info\r\n   * @return {Promise} will reject if no portal url or there is a login/user info error\r\n   */\r\n    checkLogin = () => {\r\n        return new Promise((resolve, reject) => {\r\n            // Reject this if there is no portal URL in the config file\r\n            if (!this.portalUrl) {\r\n                return reject();\r\n            }\r\n\r\n            const sharingUrl = this.portalUrl + '/sharing';\r\n\r\n            this\r\n                .idManager\r\n                .checkSignInStatus(sharingUrl)\r\n                .then(credential => {\r\n                    this.persistAuth();\r\n                    this\r\n                        .getUser()\r\n                        .then(resolve, reject);\r\n                })\r\n                .otherwise(e => {\r\n                    reject('User is not logged in');\r\n                });\r\n        });\r\n    };\r\n\r\n    /**\r\n   * Method for login process\r\n   * @return {Promise} Resolves if we user info from login\r\n   */\r\n    doLogin = () => {\r\n        // we can store the portal url here so the browser rememebers us on refresh\r\n        this.persistAuth();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const sharingUrl = this.portalUrl + '/sharing';\r\n\r\n            this\r\n                .idManager\r\n                .getCredential(sharingUrl, {oAuthPopupConfirmation: false})\r\n                .then(credential => {\r\n                    this\r\n                        .getUser()\r\n                        .then(resolve, reject);\r\n                })\r\n                .otherwise(reject);\r\n        });\r\n    };\r\n\r\n    /**\r\n   * Get user info, part of login process\r\n   * @return {Promise} Resolves once we get user info\r\n   */\r\n    getUser = () => {\r\n        return new Promise((resolve, reject) => {\r\n            loadModules(['esri/portal/Portal']).then(([Portal]) => {\r\n                let portal = new Portal({url: this.portalUrl, authMode: 'immediate'});\r\n                portal\r\n                    .load()\r\n                    .then(() => {\r\n                        this.user = portal.user;\r\n                        this\r\n                            .user\r\n                            .fetchGroups()\r\n                            .then(resolve(this.user))\r\n                            .otherwise(reject);\r\n                    })\r\n                    .otherwise(reject);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n   * Method to store the login info\r\n   */\r\n    persistAuth = () => {\r\n        // persist auth to a cookie for cross-page goodness\r\n        const json = this\r\n            .idManager\r\n            .toJSON();\r\n        localStorage.setItem('esri_auth_id', JSON.stringify(json));\r\n    };\r\n\r\n    /**\r\n   * Get method for the stored login info\r\n   * @return {Object} The login info object, can be null\r\n   */\r\n    checkPersist = () => {\r\n        let persistObj = JSON.parse(localStorage.getItem('esri_auth_id'));\r\n\r\n        if (persistObj && persistObj.oAuthInfos) {\r\n            return persistObj.oAuthInfos[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n   * Method for logging out\r\n   */\r\n    logout = () => {\r\n        loadModules(['dojo/cookie']).then(([cookie]) => {\r\n            cookie('esri_auth', '{esri: \"logout\"}', {\r\n                expire: -1,\r\n                expires: -1,\r\n                path: '/'\r\n            });\r\n            localStorage.removeItem('esri_auth_id');\r\n            this\r\n                .idManager\r\n                .destroyCredentials();\r\n        });\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}