{"ast":null,"code":"'use strict';\n\nvar React = require('react'),\n    Input = require('./input'),\n    AriaStatus = require('./aria_status'),\n    getTextDirection = require('../utils/get_text_direction'),\n    noop = function noop() {};\n\nmodule.exports = React.createClass({\n  displayName: 'Typeahead',\n  statics: {\n    getInstanceCount: function () {\n      var count = 0;\n      return function () {\n        return ++count;\n      };\n    }()\n  },\n  propTypes: process.env.NODE_ENV === 'production' ? {} : {\n    inputId: React.PropTypes.string,\n    inputName: React.PropTypes.string,\n    className: React.PropTypes.string,\n    autoFocus: React.PropTypes.bool,\n    hoverSelect: React.PropTypes.bool,\n    inputValue: React.PropTypes.string,\n    options: React.PropTypes.array,\n    placeholder: React.PropTypes.string,\n    onChange: React.PropTypes.func,\n    onKeyDown: React.PropTypes.func,\n    onKeyPress: React.PropTypes.func,\n    onKeyUp: React.PropTypes.func,\n    onFocus: React.PropTypes.func,\n    onBlur: React.PropTypes.func,\n    onSelect: React.PropTypes.func,\n    onInputClick: React.PropTypes.func,\n    handleHint: React.PropTypes.func,\n    onComplete: React.PropTypes.func,\n    onOptionClick: React.PropTypes.func,\n    onOptionChange: React.PropTypes.func,\n    onDropdownOpen: React.PropTypes.func,\n    onDropdownClose: React.PropTypes.func,\n    optionTemplate: React.PropTypes.func.isRequired,\n    getMessageForOption: React.PropTypes.func,\n    getMessageForIncomingOptions: React.PropTypes.func\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      className: '',\n      inputValue: '',\n      options: [],\n      hoverSelect: true,\n      onFocus: noop,\n      onKeyDown: noop,\n      onChange: noop,\n      onInputClick: noop,\n      handleHint: function handleHint() {\n        return '';\n      },\n      onOptionClick: noop,\n      onOptionChange: noop,\n      onComplete: noop,\n      onDropdownOpen: noop,\n      onDropdownClose: noop,\n      getMessageForOption: function getMessageForOption() {\n        return '';\n      },\n      getMessageForIncomingOptions: function getMessageForIncomingOptions(number) {\n        return number + ' suggestions are available. Use up and down arrows to select.';\n      }\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      selectedIndex: -1,\n      isHintVisible: false,\n      isDropdownVisible: false\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this,\n        uniqueId = this.constructor.getInstanceCount();\n\n    _this.userInputValue = null;\n    _this.previousInputValue = null;\n    _this.activeDescendantId = 'react-typeahead-activedescendant-' + uniqueId;\n    _this.optionsId = 'react-typeahead-options-' + uniqueId;\n  },\n  componentDidMount: function componentDidMount() {\n    var addEvent = window.addEventListener,\n        handleWindowClose = this.handleWindowClose; // The `focus` event does not bubble, so we must capture it instead.\n    // This closes Typeahead's dropdown whenever something else gains focus.\n\n    addEvent('focus', handleWindowClose, true); // If we click anywhere outside of Typeahead, close the dropdown.\n\n    addEvent('click', handleWindowClose, false);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    var removeEvent = window.removeEventListener,\n        handleWindowClose = this.handleWindowClose;\n    removeEvent('focus', handleWindowClose, true);\n    removeEvent('click', handleWindowClose, false);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var nextValue = nextProps.inputValue,\n        nextOptions = nextProps.options,\n        valueLength = nextValue.length,\n        isHintVisible = valueLength > 0 && // A visible part of the hint must be\n    // available for us to complete it.\n    nextProps.handleHint(nextValue, nextOptions).slice(valueLength).length > 0;\n    this.setState({\n      isHintVisible: isHintVisible\n    });\n  },\n  render: function render() {\n    var _this = this;\n\n    return React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      className: 'react-typeahead-container ' + _this.props.className\n    }, _this.renderInput(), _this.renderDropdown(), _this.renderAriaMessageForOptions(), _this.renderAriaMessageForIncomingOptions());\n  },\n  renderInput: function renderInput() {\n    var _this = this,\n        state = _this.state,\n        props = _this.props,\n        inputValue = props.inputValue,\n        className = 'react-typeahead-input',\n        inputDirection = getTextDirection(inputValue);\n\n    return React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      className: \"react-typeahead-input-container\"\n    }, React.createElement(Input, {\n      disabled: true,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      dir: inputDirection,\n      className: className + ' react-typeahead-hint',\n      style: {\n        color: 'silver',\n        WebkitTextFillColor: 'silver',\n        position: 'absolute'\n      },\n      value: state.isHintVisible ? props.handleHint(inputValue, props.options) : null\n    }), React.createElement(Input, {\n      ref: \"input\",\n      role: \"combobox\",\n      \"aria-owns\": _this.optionsId,\n      \"aria-expanded\": state.isDropdownVisible,\n      \"aria-autocomplete\": \"both\",\n      \"aria-activedescendant\": _this.activeDescendantId,\n      value: inputValue,\n      spellCheck: false,\n      autoComplete: false,\n      autoCorrect: false,\n      dir: inputDirection,\n      onClick: _this.handleClick,\n      onFocus: _this.handleFocus,\n      onBlur: props.onBlur,\n      onChange: _this.handleChange,\n      onKeyDown: _this.handleKeyDown,\n      id: props.inputId,\n      name: props.inputName,\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder,\n      onSelect: props.onSelect,\n      onKeyUp: props.onKeyUp,\n      onKeyPress: props.onKeyPress,\n      className: className + ' react-typeahead-usertext',\n      style: {\n        position: 'relative',\n        background: 'transparent'\n      }\n    }));\n  },\n  renderDropdown: function renderDropdown() {\n    var _this = this,\n        state = _this.state,\n        props = _this.props,\n        OptionTemplate = props.optionTemplate,\n        selectedIndex = state.selectedIndex,\n        isDropdownVisible = state.isDropdownVisible,\n        activeDescendantId = _this.activeDescendantId;\n\n    if (this.props.options.length < 1) {\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      id: _this.optionsId,\n      ref: \"dropdown\",\n      role: \"listbox\",\n      \"aria-hidden\": !isDropdownVisible,\n      style: {\n        width: '100%',\n        background: '#fff',\n        position: 'absolute',\n        boxSizing: 'border-box',\n        display: isDropdownVisible ? 'block' : 'none'\n      },\n      className: \"react-typeahead-options\",\n      onMouseOut: this.handleMouseOut\n    }, props.options.map(function (data, index) {\n      var isSelected = selectedIndex === index;\n      return React.createElement(\"li\", {\n        id: isSelected ? activeDescendantId : null,\n        \"aria-selected\": isSelected,\n        role: \"option\",\n        key: index,\n        onClick: _this.handleOptionClick.bind(_this, index),\n        onMouseOver: _this.handleOptionMouseOver.bind(_this, index)\n      }, React.createElement(OptionTemplate, {\n        data: data,\n        index: index,\n        userInputValue: _this.userInputValue,\n        inputValue: props.inputValue,\n        isSelected: isSelected\n      }));\n    }));\n  },\n  renderAriaMessageForOptions: function renderAriaMessageForOptions() {\n    var _this = this,\n        props = _this.props,\n        inputValue = props.inputValue,\n        option = props.options[_this.state.selectedIndex] || inputValue;\n\n    return React.createElement(AriaStatus, {\n      message: props.getMessageForOption(option) || inputValue\n    });\n  },\n  renderAriaMessageForIncomingOptions: function renderAriaMessageForIncomingOptions() {\n    var props = this.props;\n    return React.createElement(AriaStatus, {\n      message: props.getMessageForIncomingOptions(props.options.length)\n    });\n  },\n  showDropdown: function showDropdown() {\n    var _this = this;\n\n    if (!_this.state.isDropdownVisible) {\n      _this.setState({\n        isDropdownVisible: true\n      }, function () {\n        _this.props.onDropdownOpen();\n      });\n    }\n  },\n  hideDropdown: function hideDropdown() {\n    var _this = this;\n\n    if (_this.state.isDropdownVisible) {\n      _this.setState({\n        isDropdownVisible: false\n      }, function () {\n        _this.props.onDropdownClose();\n      });\n    }\n  },\n  showHint: function showHint() {\n    var _this = this,\n        props = _this.props,\n        inputValue = props.inputValue,\n        inputValueLength = inputValue.length,\n        isHintVisible = inputValueLength > 0 && // A visible part of the hint must be\n    // available for us to complete it.\n    props.handleHint(inputValue, props.options).slice(inputValueLength).length > 0;\n\n    _this.setState({\n      isHintVisible: isHintVisible\n    });\n  },\n  hideHint: function hideHint() {\n    this.setState({\n      isHintVisible: false\n    });\n  },\n  setSelectedIndex: function setSelectedIndex(index, callback) {\n    this.setState({\n      selectedIndex: index\n    }, callback);\n  },\n  handleChange: function handleChange(event) {\n    var _this = this;\n\n    _this.showHint();\n\n    _this.showDropdown();\n\n    _this.setSelectedIndex(-1);\n\n    _this.props.onChange(event);\n\n    _this.userInputValue = event.target.value;\n  },\n  focus: function focus() {\n    this.refs.input.getDOMNode().focus();\n  },\n  handleFocus: function handleFocus(event) {\n    var _this = this;\n\n    _this.showDropdown();\n\n    _this.props.onFocus(event);\n  },\n  handleClick: function handleClick(event) {\n    var _this = this;\n\n    _this.showHint();\n\n    _this.props.onInputClick(event);\n  },\n  navigate: function navigate(direction, callback) {\n    var _this = this,\n        minIndex = -1,\n        maxIndex = _this.props.options.length - 1,\n        index = _this.state.selectedIndex + direction;\n\n    if (index > maxIndex) {\n      index = minIndex;\n    } else if (index < minIndex) {\n      index = maxIndex;\n    }\n\n    _this.setSelectedIndex(index, callback);\n  },\n  handleKeyDown: function handleKeyDown(event) {\n    var _this = this,\n        key = event.key,\n        props = _this.props,\n        input = _this.refs.input,\n        isDropdownVisible = _this.state.isDropdownVisible,\n        isHintVisible = _this.state.isHintVisible,\n        hasHandledKeyDown = false,\n        index,\n        optionData,\n        dir;\n\n    switch (key) {\n      case 'End':\n      case 'Tab':\n        if (isHintVisible && !event.shiftKey) {\n          event.preventDefault();\n          props.onComplete(event, props.handleHint(props.inputValue, props.options));\n        }\n\n        break;\n\n      case 'ArrowLeft':\n      case 'ArrowRight':\n        if (isHintVisible && !event.shiftKey && input.isCursorAtEnd()) {\n          dir = getTextDirection(props.inputValue);\n\n          if (dir === 'ltr' && key === 'ArrowRight' || dir === 'rtl' && key === 'ArrowLeft') {\n            props.onComplete(event, props.handleHint(props.inputValue, props.options));\n          }\n        }\n\n        break;\n\n      case 'Enter':\n        _this.focus();\n\n        _this.hideHint();\n\n        _this.hideDropdown();\n\n        break;\n\n      case 'Escape':\n        _this.hideHint();\n\n        _this.hideDropdown();\n\n        break;\n\n      case 'ArrowUp':\n      case 'ArrowDown':\n        if (props.options.length > 0) {\n          event.preventDefault();\n\n          _this.showHint();\n\n          _this.showDropdown();\n\n          if (isDropdownVisible) {\n            dir = key === 'ArrowUp' ? -1 : 1;\n            hasHandledKeyDown = true;\n\n            _this.navigate(dir, function () {\n              var selectedIndex = _this.state.selectedIndex,\n                  previousInputValue = _this.previousInputValue,\n                  optionData = previousInputValue,\n                  optionOffsetTop = 0,\n                  selectedOption,\n                  dropdown; // We're currently on an option.\n\n              if (selectedIndex >= 0) {\n                // Save the current `input` value,\n                // as we might arrow back to it later.\n                if (previousInputValue === null) {\n                  _this.previousInputValue = props.inputValue;\n                }\n\n                optionData = props.options[selectedIndex]; // Make selected option always scroll to visible\n\n                dropdown = React.findDOMNode(_this.refs.dropdown);\n                selectedOption = dropdown.children[selectedIndex];\n                optionOffsetTop = selectedOption.offsetTop;\n\n                if (optionOffsetTop + selectedOption.clientHeight > dropdown.clientHeight || optionOffsetTop < dropdown.scrollTop) {\n                  dropdown.scrollTop = optionOffsetTop;\n                }\n              }\n\n              props.onOptionChange(event, optionData, selectedIndex);\n              props.onKeyDown(event, optionData, selectedIndex);\n            });\n          }\n        }\n\n        break;\n    }\n\n    if (!hasHandledKeyDown) {\n      index = this.state.selectedIndex;\n      optionData = index < 0 ? props.inputValue : props.options[index];\n      props.onKeyDown(event, optionData, index);\n    }\n  },\n  handleOptionClick: function handleOptionClick(selectedIndex, event) {\n    var _this = this,\n        props = _this.props;\n\n    _this.focus();\n\n    _this.hideHint();\n\n    _this.hideDropdown();\n\n    _this.setSelectedIndex(selectedIndex);\n\n    props.onOptionClick(event, props.options[selectedIndex], selectedIndex);\n  },\n  handleOptionMouseOver: function handleOptionMouseOver(selectedIndex) {\n    var _this = this;\n\n    if (_this.props.hoverSelect) {\n      _this.setSelectedIndex(selectedIndex);\n    }\n  },\n  handleMouseOut: function handleMouseOut() {\n    var _this = this;\n\n    if (_this.props.hoverSelect) {\n      _this.setSelectedIndex(-1);\n    }\n  },\n  handleWindowClose: function handleWindowClose(event) {\n    var _this = this,\n        target = event.target;\n\n    if (target !== window && !this.getDOMNode().contains(target)) {\n      _this.hideHint();\n\n      _this.hideDropdown();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}