{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(setSignOrder),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignOrder);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction setSignOrder(action) {\n  var errorMUTCD, result, support, signsREsp, signArray, signs, muttQueryString, i, muttData, _i, sign, results, j;\n\n  return _regeneratorRuntime.wrap(function setSignOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\" // call API to save signs with new SIGNORDER\n\n          };\n          _context.next = 4;\n          return call(saveSignOrder, [action.payload.features, action.payload.layers.signs]);\n\n        case 4:\n          result = _context.sent;\n          support = action.payload.support; // retrieve the new related signs with a call to AGS\n\n          _context.next = 8;\n          return call(getRelatedSigns, [support, action.payload.layers.support]);\n\n        case 8:\n          signsREsp = _context.sent;\n          console.log('result', signsREsp);\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 18;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 18:\n          muttData = _context.sent;\n          _i = 0;\n\n        case 20:\n          if (!(_i < signArray.length)) {\n            _context.next = 32;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i]\n          };\n          _context.next = 24;\n          return call(getRelatedTimebands, [signArray[_i]]);\n\n        case 24:\n          results = _context.sent;\n          sign.timebands = results.data.features;\n\n          for (j = 0; j < muttData.length; j++) {\n            if (signArray[_i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\n              sign.MUTCD = muttData[j];\n            }\n          }\n\n          if (sign.MUTCD === undefined) {\n            sign.MUTCD = errorMUTCD;\n          } //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\n\n\n          signs.push(sign);\n\n        case 29:\n          _i++;\n          _context.next = 20;\n          break;\n\n        case 32:\n          _context.next = 34;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 34:\n          _context.next = 39;\n          break;\n\n        case 36:\n          _context.prev = 36;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/setSignOrder, ', _context.t0);\n\n        case 39:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 36]]);\n} // WATCHER //\n\n\nexport function watchSignOrder() {\n  return _regeneratorRuntime.wrap(function watchSignOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_setSignOrder.js"],"names":["setSignOrder","watchSignOrder","call","put","takeLatest","types","mapTypes","getRelatedSigns","saveSignOrder","getMUTCDS","getRelatedTimebands","action","errorMUTCD","name","serverImagePath","payload","features","layers","signs","result","support","signsREsp","console","log","signArray","data","muttQueryString","length","i","attributes","SIGNCODE","replace","muttData","sign","feature","results","timebands","j","toUpperCase","code","MUTCD","undefined","push","type","SET_SELECTED_SUPPORT","SIGN_ORDER_CHANGED"],"mappings":";;;;yBAMWA,Y;;;yBA6EOC,c;;AAnFlB,SAAQC,IAAR,EAAcC,GAAd,EAAmBC,UAAnB,QAAoC,oBAApC;AACA,SAAQC,KAAK,IAAIC,QAAjB,QAAgC,iBAAhC;AACA,SAAQC,eAAR,EAAyBC,aAAzB,EAAwCC,SAAxC,EAAmDC,mBAAnD,QAA6E,mBAA7E,C,CAEA;;AAEA,SAAWV,YAAX,CAAwBW,MAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGcC,UAAAA,UAHd,GAG2B;AACfC,YAAAA,IAAI,EAAE,iBADS;AAEfC,YAAAA,eAAe,EAAE,MAFF,CAInB;;AAJmB,WAH3B;AAAA;AASwB,iBAAMZ,IAAI,CAACM,aAAD,EAAgB,CAACG,MAAM,CAACI,OAAP,CAAeC,QAAhB,EAA0BL,MAAM,CAACI,OAAP,CAAeE,MAAf,CAAsBC,KAAhD,CAAhB,CAAV;;AATxB;AAScC,UAAAA,MATd;AAWcC,UAAAA,OAXd,GAWwBT,MAAM,CAACI,OAAP,CAAeK,OAXvC,EAYQ;;AAZR;AAa0B,iBAAMlB,IAAI,CAACK,eAAD,EAAkB,CAACa,OAAD,EAAUT,MAAM,CAACI,OAAP,CAAeE,MAAf,CAAsBG,OAAhC,CAAlB,CAAV;;AAb1B;AAacC,UAAAA,SAbd;AAcQC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,SAAtB;AACMG,UAAAA,SAfd,GAe0BH,SAAS,CAACI,IAAV,CAAeT,QAfzC,EAiBQ;;AACME,UAAAA,KAlBd,GAkBsB,EAlBtB,EAmBQ;;AAEIQ,UAAAA,eArBZ,GAqB8B,EArB9B;;AAuBQ,cAAIF,SAAS,CAACG,MAAV,GAAmB,CAAvB,EAA0B;AACtBD,YAAAA,eAAe,GAAG,UAAlB;AACH;;AACD,eAASE,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACG,MAA9B,EAAsCC,CAAC,EAAvC,EAA2C;AACvC,gBAAIJ,SAAS,CAACI,CAAD,CAAT,CAAaC,UAAb,CAAwBC,QAA5B,EAAsC;AAClCJ,cAAAA,eAAe,IAAIF,SAAS,CAACI,CAAD,CAAT,CAAaC,UAAb,CAAwBC,QAAxB,GAAmC,GAAtD;AACH,aAFD,MAEO;AACHJ,cAAAA,eAAe,IAAI,WAAnB;AACH;AACJ;;AACDA,UAAAA,eAAe,GAAGA,eAAe,CAACK,OAAhB,CAAwB,OAAxB,EAAiC,EAAjC,CAAlB,CAjCR,CAmCQ;;AAnCR;AAoCyB,iBAAM7B,IAAI,CAACO,SAAD,EAAY,CAACiB,eAAD,CAAZ,CAAV;;AApCzB;AAoCcM,UAAAA,QApCd;AAuCiBJ,UAAAA,EAvCjB,GAuCqB,CAvCrB;;AAAA;AAAA,gBAuCwBA,EAAC,GAAGJ,SAAS,CAACG,MAvCtC;AAAA;AAAA;AAAA;;AAwCgBM,UAAAA,IAxChB,GAwCuB;AACPC,YAAAA,OAAO,EAAEV,SAAS,CAACI,EAAD;AADX,WAxCvB;AAAA;AA4C4B,iBAAM1B,IAAI,CAACQ,mBAAD,EAAsB,CAACc,SAAS,CAACI,EAAD,CAAV,CAAtB,CAAV;;AA5C5B;AA4CkBO,UAAAA,OA5ClB;AA6CYF,UAAAA,IAAI,CAACG,SAAL,GAAiBD,OAAO,CAACV,IAAR,CAAaT,QAA9B;;AACA,eAASqB,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACL,MAA7B,EAAqCU,CAAC,EAAtC,EAA0C;AAEtC,gBAAIb,SAAS,CAACI,EAAD,CAAT,CAAaC,UAAb,CAAwBC,QAAxB,CAAiCQ,WAAjC,OAAmDN,QAAQ,CAACK,CAAD,CAAR,CAAYE,IAAZ,CAAiBD,WAAjB,EAAvD,EAAuF;AACnFL,cAAAA,IAAI,CAACO,KAAL,GAAaR,QAAQ,CAACK,CAAD,CAArB;AAEH;AACJ;;AACD,cAAIJ,IAAI,CAACO,KAAL,KAAeC,SAAnB,EAA8B;AAC1BR,YAAAA,IAAI,CAACO,KAAL,GAAa5B,UAAb;AAEH,WAxDb,CAyDY;;;AACAM,UAAAA,KAAK,CAACwB,IAAN,CAAWT,IAAX;;AA1DZ;AAuC8CL,UAAAA,EAAC,EAvC/C;AAAA;AAAA;;AAAA;AAAA;AA+DQ,iBAAMzB,GAAG,CAAC;AACNwC,YAAAA,IAAI,EAAErC,QAAQ,CAACsC,oBADT;AAEN7B,YAAAA,OAAO,EAAE;AACLK,cAAAA,OAAO,EAAPA,OADK;AAELF,cAAAA,KAAK,EAALA;AAFK;AAFH,WAAD,CAAT;;AA/DR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwEQI,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;;AAxER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CA4EA;;;AACA,OAAO,SAAWtB,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAEH,iBAAMG,UAAU,CAACE,QAAQ,CAACuC,kBAAV,EAA8B7C,YAA9B,CAAhB;;AAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {getRelatedSigns, saveSignOrder, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * setSignOrder(action) {\r\n\r\n    try {\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to save signs with new SIGNORDER\r\n        \r\n        const result =  yield call(saveSignOrder, [action.payload.features, action.payload.layers.signs]);\r\n       \r\n        const support = action.payload.support;\r\n        // retrieve the new related signs with a call to AGS\r\n        const signsREsp = yield call(getRelatedSigns, [support, action.payload.layers.support])\r\n        console.log('result', signsREsp)\r\n        const signArray = signsREsp.data.features;\r\n\r\n        // start creating sign payload\r\n        const signs = [];\r\n        // create a string to get back MUTCD metadata for all signs on post\r\n\r\n        let muttQueryString = \"\";\r\n\r\n        if (signArray.length < 1) {\r\n            muttQueryString = \"PR-OTHER\"\r\n        }\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            if (signArray[i].attributes.SIGNCODE) {\r\n                muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n            } else {\r\n                muttQueryString += \"PR-OTHER,\"\r\n            }\r\n        }\r\n        muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n        // call out to Sign Catalog API to get MUTCD metadata\r\n        const muttData = yield call(getMUTCDS, [muttQueryString])\r\n\r\n        //loop through globalIDS and get timebands\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            let sign = {\r\n                feature: signArray[i]\r\n\r\n            }\r\n            const results = yield call(getRelatedTimebands, [signArray[i]])\r\n            sign.timebands = results.data.features;\r\n            for (let j = 0; j < muttData.length; j++) {\r\n\r\n                if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                    sign.MUTCD = muttData[j];\r\n\r\n                }\r\n            }\r\n            if (sign.MUTCD === undefined) {\r\n                sign.MUTCD = errorMUTCD;\r\n\r\n            }\r\n            //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n            signs.push(sign)\r\n\r\n        }\r\n\r\n        // Put config in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/setSignOrder, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchSignOrder() {\r\n\r\n    yield takeLatest(mapTypes.SIGN_ORDER_CHANGED, setSignOrder);\r\n}"]},"metadata":{},"sourceType":"module"}