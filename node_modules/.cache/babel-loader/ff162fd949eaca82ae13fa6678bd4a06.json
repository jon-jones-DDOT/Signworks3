{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Projects\\\\Signworks3\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saveSelectSupport),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLayers);\n\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { types as mapTypes } from '../reducers/map';\nimport { saveSupport, getRelatedSigns, getMUTCDS, getRelatedTimebands } from '../../utils/JSAPI'; // WORKER //\n\nfunction saveSelectSupport(action) {\n  var errorMUTCD, support, signsREsp, signArray, signs, muttQueryString, i, muttData, _i, sign, results, j;\n\n  return _regeneratorRuntime.wrap(function saveSelectSupport$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          errorMUTCD = {\n            name: \"MUTCD not found\",\n            serverImagePath: \"none\"\n          };\n          _context.next = 4;\n          return call(saveSupport, [action.payload.support, false, action.payload.layers.supports]);\n\n        case 4:\n          support = action.payload.support; // retrieve the new related signs with a call to AGS\n\n          _context.next = 7;\n          return call(getRelatedSigns, [support, action.payload.layers.signs]);\n\n        case 7:\n          signsREsp = _context.sent;\n          signArray = signsREsp.data.features; // start creating sign payload\n\n          signs = []; // create a string to get back MUTCD metadata for all signs on post\n\n          muttQueryString = \"\";\n\n          if (signArray.length < 1) {\n            muttQueryString = \"PR-OTHER\";\n          }\n\n          for (i = 0; i < signArray.length; i++) {\n            if (signArray[i].attributes.SIGNCODE) {\n              muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\n            } else {\n              muttQueryString += \"PR-OTHER,\";\n            }\n          }\n\n          muttQueryString = muttQueryString.replace(/,\\s*$/, \"\"); // call out to Sign Catalog API to get MUTCD metadata\n\n          _context.next = 16;\n          return call(getMUTCDS, [muttQueryString]);\n\n        case 16:\n          muttData = _context.sent;\n          _i = 0;\n\n        case 18:\n          if (!(_i < signArray.length)) {\n            _context.next = 30;\n            break;\n          }\n\n          sign = {\n            feature: signArray[_i]\n          };\n          _context.next = 22;\n          return call(getRelatedTimebands, [signArray[_i], action.payload.layers.timebands]);\n\n        case 22:\n          results = _context.sent;\n          sign.timebands = results.data.features;\n\n          for (j = 0; j < muttData.length; j++) {\n            if (signArray[_i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\n              sign.MUTCD = muttData[j];\n            }\n          }\n\n          if (sign.MUTCD === undefined) {\n            sign.MUTCD = errorMUTCD;\n          } //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\n\n\n          signs.push(sign);\n\n        case 27:\n          _i++;\n          _context.next = 18;\n          break;\n\n        case 30:\n          _context.next = 32;\n          return put({\n            type: mapTypes.SET_SELECTED_SUPPORT,\n            payload: {\n              support: support,\n              signs: signs\n            }\n          });\n\n        case 32:\n          _context.next = 37;\n          break;\n\n        case 34:\n          _context.prev = 34;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('SAGA ERROR: map/saveSelectedSupport, ', _context.t0);\n\n        case 37:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[0, 34]]);\n} // WATCHER //\n\n\nexport function watchLayers() {\n  return _regeneratorRuntime.wrap(function watchLayers$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(mapTypes.SAVE_SUPPORT, saveSelectSupport);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}","map":{"version":3,"sources":["C:\\Projects\\Signworks3\\src\\redux\\sagas\\_saveSupport.js"],"names":["saveSelectSupport","watchLayers","call","put","takeLatest","types","mapTypes","saveSupport","getRelatedSigns","getMUTCDS","getRelatedTimebands","action","errorMUTCD","name","serverImagePath","payload","support","layers","supports","signs","signsREsp","signArray","data","features","muttQueryString","length","i","attributes","SIGNCODE","replace","muttData","sign","feature","timebands","results","j","toUpperCase","code","MUTCD","undefined","push","type","SET_SELECTED_SUPPORT","console","log","SAVE_SUPPORT"],"mappings":"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","sourcesContent":["import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {types as mapTypes} from '../reducers/map';\r\nimport {saveSupport, getRelatedSigns, getMUTCDS, getRelatedTimebands} from '../../utils/JSAPI';\r\n\r\n// WORKER //\r\n\r\nfunction * saveSelectSupport(action) {\r\n\r\n    try {\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n         yield call(saveSupport, [action.payload.support, false, action.payload.layers.supports]);\r\n        const support = action.payload.support;\r\n        // retrieve the new related signs with a call to AGS\r\n        const signsREsp = yield call(getRelatedSigns, [support, action.payload.layers.signs])\r\n\r\n        const signArray = signsREsp.data.features;\r\n\r\n        // start creating sign payload\r\n        const signs = [];\r\n        // create a string to get back MUTCD metadata for all signs on post\r\n\r\n        let muttQueryString = \"\";\r\n\r\n        if (signArray.length < 1) {\r\n            muttQueryString = \"PR-OTHER\"\r\n        }\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            if (signArray[i].attributes.SIGNCODE) {\r\n                muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n            } else {\r\n                muttQueryString += \"PR-OTHER,\"\r\n            }\r\n        }\r\n        muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n        // call out to Sign Catalog API to get MUTCD metadata\r\n        const muttData = yield call(getMUTCDS, [muttQueryString])\r\n\r\n        //loop through globalIDS and get timebands\r\n        for (let i = 0; i < signArray.length; i++) {\r\n            let sign = {\r\n                feature: signArray[i]\r\n\r\n            }\r\n            const results = yield call(getRelatedTimebands, [signArray[i], action.payload.layers.timebands])\r\n\r\n            sign.timebands = results.data.features;\r\n            for (let j = 0; j < muttData.length; j++) {\r\n\r\n                if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                    sign.MUTCD = muttData[j];\r\n\r\n                }\r\n            }\r\n            if (sign.MUTCD === undefined) {\r\n                sign.MUTCD = errorMUTCD;\r\n\r\n            }\r\n            //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n            signs.push(sign)\r\n\r\n        }\r\n\r\n        // Put config in store\r\n        yield put({\r\n            type: mapTypes.SET_SELECTED_SUPPORT,\r\n            payload: {\r\n                support,\r\n                signs\r\n            }\r\n        });\r\n        /*\r\n        const errorMUTCD = {\r\n            name: \"MUTCD not found\",\r\n            serverImagePath: \"none\"\r\n        }\r\n        // call API to fetch support\r\n        const features = yield call(getSupportByExtent, [action.payload.geom, action.payload.layer]);\r\n\r\n        //if nothing comes back, set sign info in store to empty or null\r\n        if (features.features.length === 0) {\r\n            const support = null;\r\n            const signs = [];\r\n\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n            //if a support is returned...\r\n        } else {\r\n            //create support payload from support returned\r\n            const support = features.features[0];\r\n\r\n            //retrieve associated sign features from AGS\r\n            const signsREsp = yield call(getRelatedSigns, [\r\n                support, 'https://dcdot.esriemcs.com/server/rest/services/Signs/SignWorks_Test/FeatureServ' +\r\n                        'er/1/query'\r\n            ])\r\n            const signArray = signsREsp.data.features;\r\n\r\n            // start creating sign payload\r\n            const signs = [];\r\n\r\n            // create a string to get back MUTCD metadata for all signs on post\r\n\r\n            let muttQueryString = \"\";\r\n\r\n            if (signArray.length < 1) {\r\n                muttQueryString = \"PR-OTHER\"\r\n            }\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                if (signArray[i].attributes.SIGNCODE) {\r\n                    muttQueryString += signArray[i].attributes.SIGNCODE + \",\";\r\n                } else {\r\n                    muttQueryString += \"PR-OTHER,\"\r\n                }\r\n            }\r\n            muttQueryString = muttQueryString.replace(/,\\s*$/, \"\");\r\n\r\n            // call out to Sign Catalog API to get MUTCD metadata\r\n            const muttData = yield call(getMUTCDS, [muttQueryString])\r\n\r\n            for (let i = 0; i < signArray.length; i++) {}\r\n\r\n            //loop through globalIDS and get timebands\r\n            for (let i = 0; i < signArray.length; i++) {\r\n                let sign = {\r\n                    feature: signArray[i]\r\n\r\n                }\r\n                const results = yield call(getRelatedTimebands, [signArray[i]])\r\n                sign.timebands = results.data.features;\r\n                for (let j = 0; j < muttData.length; j++) {\r\n\r\n                    if (signArray[i].attributes.SIGNCODE.toUpperCase() === muttData[j].code.toUpperCase()) {\r\n                        sign.MUTCD = muttData[j];\r\n\r\n                    }\r\n                }\r\n                if (sign.MUTCD === undefined) {\r\n                    sign.MUTCD = errorMUTCD;\r\n\r\n                }\r\n                //WILL POPULATE WHEN SIGNWORKS CATALOG WORKS sign.MUTCD = muttData[i];\r\n                signs.push(sign)\r\n\r\n            }\r\n\r\n            // Put config in store\r\n            yield put({\r\n                type: mapTypes.SET_SELECTED_SUPPORT,\r\n                payload: {\r\n                    support,\r\n                    signs\r\n                }\r\n            });\r\n        }*/\r\n    } catch (e) {\r\n        console.log('SAGA ERROR: map/saveSelectedSupport, ', e);\r\n    }\r\n}\r\n\r\n// WATCHER //\r\nexport function * watchLayers() {\r\n   \r\n    yield takeLatest(mapTypes.SAVE_SUPPORT, saveSelectSupport);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}