"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AvatarStyled = require("./Avatar-styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Avatar = function Avatar(_ref) {
  var children = _ref.children,
      src = _ref.src,
      alt = _ref.alt,
      size = _ref.size,
      fontSize = _ref.fontSize,
      other = _objectWithoutProperties(_ref, ["children", "src", "alt", "size", "fontSize"]);

  var getWrappedChildren = function getWrappedChildren(children) {
    if (children) {
      if (_react.default.isValidElement(children)) {
        //Assume the element is an SVG icon
        var _fontSize = fontSize ? {
          fontSize: fontSize
        } : null;

        return _react.default.cloneElement(children, _objectSpread({}, children.props, {
          style: _objectSpread({}, _AvatarStyled.StyledAvatarSvg, children.props.style, _fontSize)
        }));
      } else {
        return _react.default.createElement(_AvatarStyled.StyledAvatarText, null, children);
      }
    } else if (src) {
      return _react.default.createElement(_AvatarStyled.StyledAvatarImage, {
        src: src,
        alt: alt || ''
      });
    }
  };

  return _react.default.createElement(_AvatarStyled.StyledAvatar, _extends({
    aSize: size,
    fontSize: fontSize
  }, other), getWrappedChildren(children));
};

Avatar.propTypes = {
  /** The content of the component; can take text, an image, or an icon. */
  children: _propTypes.default.node,

  /** The src attribute for the img element. */
  src: _propTypes.default.string,

  /** Used in combination with src to provide
   an alt attribute for the rendered img element. */
  alt: _propTypes.default.string,

  /** Diameter of the Avatar. */
  size: _propTypes.default.number
};
Avatar.defaultProps = {
  size: 40
};
Avatar.displayName = 'Avatar';
var _default = Avatar;
exports.default = _default;