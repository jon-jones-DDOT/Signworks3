"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _BreadcrumbsStyled = require("./Breadcrumbs-styled");

var _Breadcrumbs = require("./Breadcrumbs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Crumb = function Crumb(_ref) {
  var children = _ref.children,
      href = _ref.href,
      hasLink = _ref.hasLink,
      other = _objectWithoutProperties(_ref, ["children", "href", "hasLink"]);

  var Crumb = _BreadcrumbsStyled.StyledSpanCrumb;

  if (href || hasLink) {
    Crumb = _BreadcrumbsStyled.StyledCrumb;
  }

  return _react.default.createElement(_Breadcrumbs.BreadcrumbsContext.Consumer, null, function (_ref2) {
    var breadcrumbsContext = _ref2.breadcrumbsContext;
    return _react.default.createElement(Crumb, _extends({}, breadcrumbsContext, other, {
      href: href
    }), children);
  });
};

Crumb.propTypes = {
  /** Text content of the Breadcrumb. */
  children: _propTypes.default.node,

  /** Boolean to toggle the light style for Breadcrumbs. */
  white: _propTypes.default.bool,

  /** href html prop */
  href: _propTypes.default.string
};
Crumb.defaultProps = {};
Crumb.displayName = 'Crumb';
var _default = Crumb;
exports.default = _default;