"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _ButtonStyled = require("./Button-styled");

var _ButtonGroup = require("./ButtonGroup");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Button = function Button(_ref) {
  var children = _ref.children,
      href = _ref.href,
      iconButton = _ref.iconButton,
      icon = _ref.icon,
      iconPosition = _ref.iconPosition,
      other = _objectWithoutProperties(_ref, ["children", "href", "iconButton", "icon", "iconPosition"]);

  function getIconMargin() {
    if (iconButton) {
      return;
    } else {
      return {
        marginLeft: iconPosition === 'after' ? '0.75em' : '-0.25em',
        marginRight: iconPosition === 'before' ? '0.75em' : '-0.25em'
      };
    }
  }

  var getIcon = function getIcon(icon) {
    if (icon) {
      return _react.default.cloneElement(icon, _objectSpread({}, icon.props, {
        style: _objectSpread({
          fill: 'currentColor',
          verticalAlign: 'bottom'
        }, getIconMargin(), icon.props.style)
      }));
    }
  };

  return _react.default.createElement(_ButtonGroup.ButtonGroupContext.Consumer, null, function (_ref2) {
    var buttonGroupContext = _ref2.buttonGroupContext;
    return _react.default.createElement(_ButtonStyled.StyledButton, _extends({
      iconButton: iconButton,
      grouped: buttonGroupContext.grouped,
      isToggle: buttonGroupContext.isToggle,
      as: href ? 'a' : 'button',
      href: href
    }, other), iconPosition === 'before' ? getIcon(icon) : null, children, iconPosition === 'after' ? getIcon(icon) : null);
  });
};

Button.propTypes = {
  /** The content of the component; text or icon. */
  children: _propTypes.default.node,

  /** The HTML type property of the Button. */
  type: _propTypes.default.oneOf(['button', 'reset', 'submit']),

  /** Style prop used to render a transparent Button. */
  transparent: _propTypes.default.bool,

  /** Style prop used to render a clear Button. */
  clear: _propTypes.default.bool,

  /** Style prop used to render a clear-gray Button. */
  clearGray: _propTypes.default.bool,

  /** Style prop used to render a clear-white Button. */
  clearWhite: _propTypes.default.bool,

  /** Style prop used to render a white Button. */
  white: _propTypes.default.bool,

  /** Style prop used to render an extra small Button. */
  extraSmall: _propTypes.default.bool,

  /** Style prop used to render a small Button. */
  small: _propTypes.default.bool,

  /** Style prop used to render a large Button. */
  large: _propTypes.default.bool,

  /** Style prop used to render an extra large Button. */
  extraLarge: _propTypes.default.bool,

  /** Style prop used to render a 100% width Button. */
  fullWidth: _propTypes.default.bool,

  /** Style prop used to render a 50% width Button. */
  half: _propTypes.default.bool,

  /** Style prop used to render a red Button. */
  red: _propTypes.default.bool,

  /** Style prop used to render a green Button. */
  green: _propTypes.default.bool,

  /** The HTML disabled property of the Button. */
  disabled: _propTypes.default.bool,

  /** The HTML href property of the Button. */
  href: _propTypes.default.string,

  /** The icon that will be displayed as the content of a Button. */
  icon: _propTypes.default.node,

  /** A style prop used to adjust size and padding of Buttons with only an icon as its content. */
  iconButton: _propTypes.default.bool,

  /** The position of the icon in relation to other children in a Button. */
  iconPosition: _propTypes.default.oneOf(['after', 'before'])
};
Button.defaultProps = {
  type: 'button',
  iconPosition: 'after'
};
Button.displayName = 'Button';
var _default = Button;
exports.default = _default;