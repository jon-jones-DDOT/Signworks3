"use strict";

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react2 = require("@storybook/react");

var _addonInfo = require("@storybook/addon-info");

var _addonActions = require("@storybook/addon-actions");

var _GuideExample = _interopRequireDefault(require("../../../stories/GuideExample"));

var _CalciteThemeProvider = require("../../CalciteThemeProvider");

var _Button = _interopRequireDefault(require("./Button.md"));

var _ = _interopRequireWildcard(require("../"));

var _DownloadToIcon = _interopRequireDefault(require("calcite-ui-icons-react/DownloadToIcon"));

var _SaveIcon = _interopRequireDefault(require("calcite-ui-icons-react/SaveIcon"));

var _AppLauncherIcon = _interopRequireDefault(require("calcite-ui-icons-react/AppLauncherIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _react2.storiesOf)('Button', module).add('Basic', (0, _addonInfo.withInfo)(_Button.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked')
  }, "default")), _react.default.createElement(_GuideExample.default, {
    label: "transparent"
  }, _react.default.createElement(_.default, {
    transparent: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "transparent")), _react.default.createElement(_GuideExample.default, {
    label: "clear"
  }, _react.default.createElement(_.default, {
    clear: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "clear")), _react.default.createElement(_GuideExample.default, {
    label: "clearGray"
  }, _react.default.createElement(_.default, {
    clearGray: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "clear-gray")), _react.default.createElement(_GuideExample.default, {
    label: "clearWhite",
    style: {
      background: _CalciteThemeProvider.CalciteTheme.palette.offBlack
    }
  }, _react.default.createElement(_.default, {
    clearWhite: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "clear-white")), _react.default.createElement(_GuideExample.default, {
    label: "white",
    style: {
      background: _CalciteThemeProvider.CalciteTheme.palette.offBlack
    }
  }, _react.default.createElement(_.default, {
    white: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "white")), _react.default.createElement(_GuideExample.default, {
    label: "halo"
  }, _react.default.createElement(_.default, {
    halo: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "halo")), _react.default.createElement(_GuideExample.default, {
    label: "extraSmall"
  }, _react.default.createElement(_.default, {
    extraSmall: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "extraSmall")), _react.default.createElement(_GuideExample.default, {
    label: "small"
  }, _react.default.createElement(_.default, {
    small: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "small")), _react.default.createElement(_GuideExample.default, {
    label: "large"
  }, _react.default.createElement(_.default, {
    large: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "large")), _react.default.createElement(_GuideExample.default, {
    label: "extraLarge"
  }, _react.default.createElement(_.default, {
    extraLarge: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "extraLarge")), _react.default.createElement(_GuideExample.default, {
    label: "fullWidth"
  }, _react.default.createElement(_.default, {
    fullWidth: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "fullWidth")), _react.default.createElement(_GuideExample.default, {
    label: "half"
  }, _react.default.createElement(_.default, {
    half: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "half")), _react.default.createElement(_GuideExample.default, {
    label: "red"
  }, _react.default.createElement(_.default, {
    red: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "red")), _react.default.createElement(_GuideExample.default, {
    label: "green"
  }, _react.default.createElement(_.default, {
    green: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "green")), _react.default.createElement(_GuideExample.default, {
    label: "disabled"
  }, _react.default.createElement(_.default, {
    disabled: true,
    onClick: (0, _addonActions.action)('clicked')
  }, "disabled")), _react.default.createElement(_GuideExample.default, {
    label: "grouped"
  }, _react.default.createElement(_.ButtonGroup, null, _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked')
  }, "One"), _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked')
  }, "Two"), _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked')
  }, "Three"))), _react.default.createElement(_GuideExample.default, {
    label: "href=\"\""
  }, _react.default.createElement(_.default, {
    href: "https://esri.com",
    target: "_blank",
    onClick: (0, _addonActions.action)('clicked')
  }, "link button")));
})).add('Toggle Button Group', (0, _addonInfo.withInfo)({
  text: _Button.default,
  propTables: [_.ButtonGroup]
})(function () {
  var ButtonGroupStory =
  /*#__PURE__*/
  function (_Component) {
    _inherits(ButtonGroupStory, _Component);

    function ButtonGroupStory(props) {
      var _this;

      _classCallCheck(this, ButtonGroupStory);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ButtonGroupStory).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "selectButton", function (selected) {
        _this.setState({
          selected: selected
        });
      });

      _this.state = {
        selected: 1
      };
      return _this;
    }

    _createClass(ButtonGroupStory, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react.default.createElement(_GuideExample.default, {
          label: "grouped"
        }, _react.default.createElement(_.ButtonGroup, {
          isToggle: true
        }, _react.default.createElement(_.default, {
          clear: this.state.selected !== 1,
          onClick: function onClick() {
            _this2.selectButton(1);
          }
        }, "One"), _react.default.createElement(_.default, {
          clear: this.state.selected !== 2,
          onClick: function onClick() {
            _this2.selectButton(2);
          }
        }, "Two"), _react.default.createElement(_.default, {
          clear: this.state.selected !== 3,
          onClick: function onClick() {
            _this2.selectButton(3);
          }
        }, "Three"), _react.default.createElement(_.default, {
          clear: this.state.selected !== 4,
          onClick: function onClick() {
            _this2.selectButton(4);
          }
        }, "Four"), _react.default.createElement(_.default, {
          clear: this.state.selected !== 5,
          onClick: function onClick() {
            _this2.selectButton(5);
          }
        }, "Five")));
      }
    }]);

    return ButtonGroupStory;
  }(_react.Component);

  ButtonGroupStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(ButtonGroupStory, null);
})).add('With Icon', (0, _addonInfo.withInfo)(_Button.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked'),
    icon: _react.default.createElement(_DownloadToIcon.default, {
      size: 16
    })
  }, "Download")), _react.default.createElement(_GuideExample.default, {
    label: "iconPosition=\"before\""
  }, _react.default.createElement(_.default, {
    onClick: (0, _addonActions.action)('clicked'),
    icon: _react.default.createElement(_SaveIcon.default, {
      size: 16
    }),
    iconPosition: "before"
  }, "Save")), _react.default.createElement(_GuideExample.default, {
    label: "iconButton"
  }, _react.default.createElement(_.default, {
    iconButton: true,
    icon: _react.default.createElement(_AppLauncherIcon.default, null),
    onClick: (0, _addonActions.action)('clicked')
  })), _react.default.createElement(_GuideExample.default, {
    label: "iconButton white",
    style: {
      background: _CalciteThemeProvider.CalciteTheme.palette.offBlack
    }
  }, _react.default.createElement(_.default, {
    iconButton: true,
    white: true,
    icon: _react.default.createElement(_AppLauncherIcon.default, {
      filled: true
    }),
    onClick: (0, _addonActions.action)('clicked')
  })));
}));