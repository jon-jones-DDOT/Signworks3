"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _CheckboxStyled = require("./Checkbox-styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Checkbox = function Checkbox(_ref) {
  var children = _ref.children,
      labelStyle = _ref.labelStyle,
      checked = _ref.checked,
      field = _ref.field,
      form = _ref.form,
      value = _ref.value,
      _ref$arrayHelpers = _ref.arrayHelpers,
      arrayHelpers = _ref$arrayHelpers === void 0 ? null : _ref$arrayHelpers,
      _ref$success = _ref.success,
      success = _ref$success === void 0 ? false : _ref$success,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onChange = _ref.onChange,
      other = _objectWithoutProperties(_ref, ["children", "labelStyle", "checked", "field", "form", "value", "arrayHelpers", "success", "error", "disabled", "onChange"]);

  var name, touched, errors, values, isSubmitting, setFieldValue;

  if (field) {
    name = field.name;
    touched = form.touched;
    errors = form.errors;
    values = form.values;
    isSubmitting = form.isSubmitting;
    setFieldValue = form.setFieldValue;
  }

  var checkboxLabel;

  if (children) {
    checkboxLabel = _react.default.createElement(_CheckboxStyled.StyledCheckboxLabel, {
      style: labelStyle
    }, children);
  }

  var handleChange = function handleChange(e) {
    if (arrayHelpers) {
      if (e.target.checked) {
        arrayHelpers.push(value);
      } else {
        var i = values[name].indexOf(value);
        arrayHelpers.remove(i);
      }
    } else {
      if (setFieldValue) {
        setFieldValue(name, e.target.checked);
      }

      onChange(e);
    }
  };

  var isChecked = function isChecked() {
    if (arrayHelpers) {
      return values[name].includes(value);
    }

    if (values) {
      return values[name] === true;
    }

    return checked;
  };

  var isSuccess = function isSuccess() {
    if (touched) {
      return touched[name] && !errors[name] ? true : false;
    }

    return success;
  };

  var isError = function isError() {
    if (touched) {
      return touched[name] && errors[name] ? true : false;
    }

    return error;
  };

  var isDisabled = function isDisabled() {
    return isSubmitting || disabled;
  };

  return _react.default.createElement(_CheckboxStyled.StyledCheckboxGroup, null, _react.default.createElement(_CheckboxStyled.StyledCheckbox, _extends({
    onChange: handleChange,
    checked: isChecked(),
    success: isSuccess(),
    error: isError(),
    disabled: isDisabled()
  }, other, {
    type: "checkbox"
  })), checkboxLabel);
};

Checkbox.propTypes = {
  /** The label text of the Checkbox. */
  children: _propTypes.default.node,

  /** The form value for this Checkbox. */
  value: _propTypes.default.string,

  /** The name to be shared among Checkboxes in a group. */
  name: _propTypes.default.string,

  /** Whether the Checkbox is currently checked. */
  checked: _propTypes.default.bool,

  /** Style object passed down to the label. */
  labelStyle: _propTypes.default.object,

  /** Event called when the Checkbox value should be toggled. */
  onChange: _propTypes.default.func
};
Checkbox.defaultProps = {
  onChange: function onChange() {}
};
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;