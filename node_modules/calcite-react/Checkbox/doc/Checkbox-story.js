"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@storybook/react");

var _addonInfo = require("@storybook/addon-info");

var _formik = require("formik");

var _GuideExample = _interopRequireDefault(require("../../../stories/GuideExample"));

var _Checkbox = _interopRequireDefault(require("./Checkbox.md"));

var _ = _interopRequireDefault(require("../"));

var _Form = _interopRequireWildcard(require("../../Form"));

var _Button = _interopRequireDefault(require("../../Button"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _react2.storiesOf)('Checkbox', module).add('Basic', (0, _addonInfo.withInfo)(_Checkbox.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.default, null, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Form.Fieldset, {
    name: "storyCheckboxGroup"
  }, _react.default.createElement(_Form.Legend, null, "Some Checkboxes:"), _react.default.createElement(_.default, null, "Checkbox 1"), _react.default.createElement(_.default, null, "Checkbox 2"))))), _react.default.createElement(_GuideExample.default, {
    label: "horizontal"
  }, _react.default.createElement(_Form.default, null, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Form.Fieldset, {
    name: "storyCheckboxGroup2",
    horizontal: true
  }, _react.default.createElement(_Form.Legend, null, "Horizontal Checkbox List:"), _react.default.createElement(_.default, {
    defaultChecked: true
  }, "Checkbox 1"), _react.default.createElement(_.default, null, "Checkbox 2"))))), _react.default.createElement(_GuideExample.default, {
    label: "error"
  }, _react.default.createElement(_Form.default, null, _react.default.createElement(_Form.FormControl, {
    error: true
  }, _react.default.createElement(_Form.Fieldset, {
    name: "storyCheckboxGroup3"
  }, _react.default.createElement(_Form.Legend, null, "Checkboxes with Error:"), _react.default.createElement(_.default, null, "Checkbox 1"), _react.default.createElement(_.default, null, "Checkbox 2"), _react.default.createElement(_.default, null, "Checkbox 3"), _react.default.createElement(_.default, null, "Checkbox 4"), _react.default.createElement(_Form.FormHelperText, null, "You can display an error too!"))))));
})).add('with Formik', (0, _addonInfo.withInfo)(_Checkbox.default)(function () {
  var options = {
    sdks: '',
    terms: ''
  };
  var sdkOptions = [{
    name: 'ArcGIS API for JS',
    value: 'jsapi'
  }, {
    name: 'ArcGIS Runtime SDK for .NET',
    value: 'dotnet'
  }, {
    name: 'ArcGIS Runtime SDK for iOS',
    value: 'ios'
  }, {
    name: 'ArcGIS Runtime SDK for Android',
    value: 'android'
  }];

  var onSubmit = function onSubmit(values, actions) {
    setTimeout(function () {
      console.log(values);
      actions.setSubmitting(false);
    }, 1000);
  };

  var onValidate = function onValidate(values) {
    var errors = {};

    if (!values.terms) {
      errors.terms = 'You must accept our terms';
    }

    if (!values.sdks.length) {
      errors.sdks = 'Please choose at least one SDK';
    }

    return errors;
  };

  return _react.default.createElement(_formik.Formik, {
    initialValues: options,
    validate: onValidate,
    onSubmit: onSubmit
  }, function (_ref) {
    var values = _ref.values,
        errors = _ref.errors,
        touched = _ref.touched,
        handleSubmit = _ref.handleSubmit,
        isSubmitting = _ref.isSubmitting;
    return _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.default, {
      onSubmit: handleSubmit
    }, _react.default.createElement(_Form.FormControl, {
      success: touched.sdks && !errors.sdks ? true : false,
      error: touched.sdks && errors.sdks ? true : false
    }, _react.default.createElement(_Form.Fieldset, {
      name: "sdks"
    }, _react.default.createElement(_Form.Legend, null, "Choose your SDKs:"), _react.default.createElement(_formik.FieldArray, {
      name: "sdks"
    }, function (arrayHelpers) {
      return _react.default.createElement("div", null, sdkOptions.map(function (sdk) {
        return _react.default.createElement(_formik.Field, {
          component: _.default,
          name: "sdks",
          value: sdk.value,
          key: sdk.value,
          arrayHelpers: arrayHelpers
        }, sdk.name);
      }));
    }), _react.default.createElement(_Form.FormHelperText, null, touched.sdks && errors.sdks || null))), _react.default.createElement(_Form.FormControl, {
      success: touched.terms && !errors.terms ? true : false,
      error: touched.terms && errors.terms ? true : false
    }, _react.default.createElement(_formik.Field, {
      component: _.default,
      name: "terms",
      value: "terms"
    }, "I accept the terms and conditions"), _react.default.createElement(_Form.FormHelperText, null, touched.terms && errors.terms || null)), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Button.default, {
      type: "submit",
      disabled: isSubmitting
    }, isSubmitting ? 'Submitting.......' : 'Submit')), _react.default.createElement("pre", null, JSON.stringify(values, null, 2))));
  });
}));