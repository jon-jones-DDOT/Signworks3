"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _CopyToClipboardStyled = require("./CopyToClipboard-styled");

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _CopyToClipboardIcon = _interopRequireDefault(require("calcite-ui-icons-react/CopyToClipboardIcon"));

var _CheckIcon = _interopRequireDefault(require("calcite-ui-icons-react/CheckIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CopyToClipboard =
/*#__PURE__*/
function (_Component) {
  _inherits(CopyToClipboard, _Component);

  function CopyToClipboard(props) {
    var _this;

    _classCallCheck(this, CopyToClipboard);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CopyToClipboard).call(this, props));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "fallbackCopyTextToClipboard", function (children) {
      var textArea = document.createElement('textarea');
      textArea.value = children;
      textArea.style.cssText = 'position: fixed; top: -9999px; left: -9999px;';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        document.execCommand('copy');

        _this.setState({
          copySuccessful: true
        });
      } catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
      }

      document.body.removeChild(textArea);
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "copyTextToClipboard", function (children) {
      if (!navigator.clipboard) {
        _this.fallbackCopyTextToClipboard(children);

        return;
      }

      navigator.clipboard.writeText(children).then(function () {
        _this.setState({
          copySuccessful: true
        });
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getTooltipText", function () {
      if (_this.state.copySuccessful) {
        return _this.props.successTooltip;
      }

      return _this.props.tooltip;
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getClipboardIcon", function () {
      if (_this.state.copySuccessful) {
        return _react.default.createElement(_CheckIcon.default, {
          style: _CopyToClipboardStyled.ClipboardIconStyles
        });
      }

      return _react.default.createElement(_CopyToClipboardIcon.default, {
        style: _CopyToClipboardStyled.ClipboardIconStyles
      });
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "resetCopySuccess", function () {
      _this.setState({
        copySuccessful: false
      });
    });

    _this.state = {
      copySuccessful: false
    };
    return _this;
  }

  _createClass(CopyToClipboard, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          positionFixed = _this$props.positionFixed,
          appendToBody = _this$props.appendToBody,
          tooltipStyle = _this$props.tooltipStyle,
          other = _objectWithoutProperties(_this$props, ["children", "positionFixed", "appendToBody", "tooltipStyle"]);

      var copyToClipboard = _react.default.createElement(_CopyToClipboardStyled.StyledCopyToClipboard, other, _react.default.createElement(_CopyToClipboardStyled.StyledCopyToClipboardInput, {
        as: "input",
        value: children,
        readOnly: true
      }), _react.default.createElement(_Tooltip.default, {
        positionFixed: positionFixed,
        appendToBody: appendToBody,
        title: this.getTooltipText(),
        style: tooltipStyle
      }, _react.default.createElement(_CopyToClipboardStyled.StyledCopyButton, {
        clear: true,
        onClick: function onClick() {
          return _this2.copyTextToClipboard(children);
        },
        onBlur: this.resetCopySuccess,
        icon: this.getClipboardIcon()
      })));

      return copyToClipboard;
    }
  }]);

  return CopyToClipboard;
}(_react.Component);

CopyToClipboard.propTypes = {
  /** Text to be copied. */
  children: _propTypes.default.string,

  /** The tooltip label before the text is copied. */
  tooltip: _propTypes.default.string,

  /** The tooltip label after the text is copied. */
  successTooltip: _propTypes.default.string,

  /** The tooltip will use position: fixed */
  positionFixed: _propTypes.default.bool,

  /** The tooltip will use appendToBody for positioning on the dom */
  appendToBody: _propTypes.default.bool,

  /** Style definition passed to the tooltip popover */
  tooltipStyle: _propTypes.default.object
};
CopyToClipboard.defaultProps = {
  tooltip: 'Copy',
  successTooltip: 'Copied!',
  appendToBody: true
};
CopyToClipboard.displayName = 'CopyToClipboard';
var _default = CopyToClipboard;
exports.default = _default;