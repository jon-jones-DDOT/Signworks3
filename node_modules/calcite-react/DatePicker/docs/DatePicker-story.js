"use strict";

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react2 = require("@storybook/react");

var _addonInfo = require("@storybook/addon-info");

var _formik = require("formik");

var _GuideExample = _interopRequireDefault(require("../../../stories/GuideExample"));

var _DatePicker = _interopRequireDefault(require("./DatePicker.md"));

var _ = _interopRequireWildcard(require("../"));

var _Form = _interopRequireWildcard(require("../../Form"));

var _Button = _interopRequireDefault(require("../../Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _react2.storiesOf)('DatePicker', module).add('Single Date Picker', (0, _addonInfo.withInfo)({
  text: _DatePicker.default,
  propTables: [_.default]
})(function () {
  var DatePickerStory =
  /*#__PURE__*/
  function (_Component) {
    _inherits(DatePickerStory, _Component);

    function DatePickerStory(props) {
      var _this;

      _classCallCheck(this, DatePickerStory);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(DatePickerStory).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onDateChange", function (date) {
        _this.setState({
          date: date
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onFocusChange", function (_ref) {
        var focused = _ref.focused;

        _this.setState({
          datePickerFocused: focused
        });
      });

      _this.state = {
        date: null,
        datePickerFocused: false
      };
      return _this;
    }

    _createClass(DatePickerStory, [{
      key: "render",
      value: function render() {
        return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_.default, {
          date: this.state.date,
          onDateChange: this.onDateChange,
          focused: this.state.datePickerFocused,
          onFocusChange: this.onFocusChange
        })));
      }
    }]);

    return DatePickerStory;
  }(_react.Component);

  DatePickerStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(DatePickerStory, null);
})).add('Date Range Picker', (0, _addonInfo.withInfo)({
  text: _DatePicker.default,
  propTables: [_.DateRangePicker]
})(function () {
  var DatePickerStory =
  /*#__PURE__*/
  function (_Component2) {
    _inherits(DatePickerStory, _Component2);

    function DatePickerStory(props) {
      var _this2;

      _classCallCheck(this, DatePickerStory);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DatePickerStory).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "onDatesChange", function (_ref2) {
        var startDate = _ref2.startDate,
            endDate = _ref2.endDate;

        _this2.setState({
          startDate: startDate,
          endDate: endDate
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "onFocusChange", function (focusedInput) {
        _this2.setState({
          focusedInput: focusedInput
        });
      });

      _this2.state = {
        startDate: null,
        endDate: null,
        focusedInput: null
      };
      return _this2;
    }

    _createClass(DatePickerStory, [{
      key: "render",
      value: function render() {
        return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, {
          label: "selectedItem={this.state.selectedValues}"
        }, _react.default.createElement(_.DateRangePicker, {
          startDate: this.state.startDate,
          startDateId: "sampleStartDate",
          endDate: this.state.endDate,
          endDateId: "sampleEndDate",
          onDatesChange: this.onDatesChange,
          focusedInput: this.state.focusedInput,
          onFocusChange: this.onFocusChange
        })));
      }
    }]);

    return DatePickerStory;
  }(_react.Component);

  DatePickerStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(DatePickerStory, null);
})).add('Append To Body', (0, _addonInfo.withInfo)({
  text: _DatePicker.default,
  propTables: [_.default]
})(function () {
  var DatePickerStory =
  /*#__PURE__*/
  function (_Component3) {
    _inherits(DatePickerStory, _Component3);

    function DatePickerStory(props) {
      var _this3;

      _classCallCheck(this, DatePickerStory);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DatePickerStory).call(this, props));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "onDateChange", function (date) {
        _this3.setState({
          date: date
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "onFocusChange", function (_ref3) {
        var focused = _ref3.focused;

        _this3.setState({
          datePickerFocused: focused
        });
      });

      _this3.state = {
        date: null,
        datePickerFocused: false
      };
      return _this3;
    }

    _createClass(DatePickerStory, [{
      key: "render",
      value: function render() {
        return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, {
          label: "appendToBody",
          style: {
            overflow: 'hidden'
          }
        }, _react.default.createElement(_.default, {
          date: this.state.date,
          onDateChange: this.onDateChange,
          focused: this.state.datePickerFocused,
          onFocusChange: this.onFocusChange,
          appendToBody: true
        })));
      }
    }]);

    return DatePickerStory;
  }(_react.Component);

  DatePickerStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(DatePickerStory, null);
})).add('Single Date with Formik', (0, _addonInfo.withInfo)(_DatePicker.default)(function () {
  var DatePickerStory =
  /*#__PURE__*/
  function (_Component4) {
    _inherits(DatePickerStory, _Component4);

    function DatePickerStory() {
      var _getPrototypeOf2;

      var _this4;

      _classCallCheck(this, DatePickerStory);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this4 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DatePickerStory)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "state", {
        date: null,
        datePickerFocused: false
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "formValues", {
        birthday: null
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "onDateChange", function (date) {
        _this4.setState({
          date: date
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "onFocusChange", function (_ref4) {
        var focused = _ref4.focused;

        _this4.setState({
          datePickerFocused: focused
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "onSubmit", function (values, actions) {
        setTimeout(function () {
          console.log(values);
          actions.setSubmitting(false);
        }, 1000);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this4)), "onValidate", function (values) {
        var errors = {};

        if (!values.birthday) {
          errors.birthday = 'You must have a birthday 🤨';
        }

        return errors;
      });

      return _this4;
    }

    _createClass(DatePickerStory, [{
      key: "render",
      value: function render() {
        var _this5 = this;

        return _react.default.createElement(_formik.Formik, {
          initialValues: this.formValues,
          validate: this.onValidate,
          onSubmit: this.onSubmit
        }, function (_ref5) {
          var values = _ref5.values,
              errors = _ref5.errors,
              touched = _ref5.touched,
              handleSubmit = _ref5.handleSubmit,
              isSubmitting = _ref5.isSubmitting;
          return _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.default, {
            onSubmit: handleSubmit
          }, _react.default.createElement(_Form.FormControl, {
            success: touched.birthday && !errors.birthday ? true : false,
            error: touched.birthday && errors.birthday ? true : false
          }, _react.default.createElement(_Form.FormControlLabel, null, "Select your birthday:"), _react.default.createElement(_formik.Field, {
            component: _.default,
            name: "birthday",
            date: _this5.state.date,
            onDateChange: _this5.onDateChange,
            focused: _this5.state.datePickerFocused,
            onFocusChange: _this5.onFocusChange
          }), _react.default.createElement(_Form.FormHelperText, null, touched.birthday && errors.birthday || null)), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Button.default, {
            type: "submit",
            disabled: isSubmitting
          }, isSubmitting ? 'Submitting.......' : 'Submit')), _react.default.createElement("pre", null, JSON.stringify(values, null, 2))));
        });
      }
    }]);

    return DatePickerStory;
  }(_react.Component);

  DatePickerStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(DatePickerStory, null);
})).add('Date Range with Formik', (0, _addonInfo.withInfo)(_DatePicker.default)(function () {
  var DatePickerStory =
  /*#__PURE__*/
  function (_Component5) {
    _inherits(DatePickerStory, _Component5);

    function DatePickerStory() {
      var _getPrototypeOf3;

      var _this6;

      _classCallCheck(this, DatePickerStory);

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this6 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(DatePickerStory)).call.apply(_getPrototypeOf3, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "state", {
        startDate: null,
        endDate: null,
        focusedInput: null
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "formValues", {
        booking: {
          startDate: null,
          endDate: null
        }
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "onDatesChange", function (_ref6) {
        var startDate = _ref6.startDate,
            endDate = _ref6.endDate;

        _this6.setState({
          startDate: startDate,
          endDate: endDate
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "onFocusChange", function (focusedInput) {
        _this6.setState({
          focusedInput: focusedInput
        });
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "onSubmit", function (values, actions) {
        setTimeout(function () {
          console.log(values);
          actions.setSubmitting(false);
        }, 1000);
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this6)), "onValidate", function (values) {
        var errors = {};

        if (!values.booking || !values.booking.startDate || !values.booking.endDate) {
          errors.booking = 'This is required!';
        }

        return errors;
      });

      return _this6;
    }

    _createClass(DatePickerStory, [{
      key: "render",
      value: function render() {
        var _this7 = this;

        return _react.default.createElement(_formik.Formik, {
          initialValues: this.formValues,
          validate: this.onValidate,
          onSubmit: this.onSubmit
        }, function (_ref7) {
          var values = _ref7.values,
              errors = _ref7.errors,
              touched = _ref7.touched,
              handleSubmit = _ref7.handleSubmit,
              isSubmitting = _ref7.isSubmitting;
          return _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.default, {
            onSubmit: handleSubmit
          }, _react.default.createElement(_Form.FormControl, {
            success: touched.booking && !errors.booking ? true : false,
            error: touched.booking && errors.booking ? true : false
          }, _react.default.createElement(_Form.FormControlLabel, null, "Booking Dates:"), _react.default.createElement(_formik.Field, {
            component: _.DateRangePicker,
            name: "booking",
            startDate: _this7.state.startDate,
            startDateId: "sampleStartDate",
            endDate: _this7.state.endDate,
            endDateId: "sampleEndDate",
            onDatesChange: _this7.onDatesChange,
            focusedInput: _this7.state.focusedInput,
            onFocusChange: _this7.onFocusChange
          }), _react.default.createElement(_Form.FormHelperText, null, touched.booking && errors.booking || null)), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Button.default, {
            type: "submit",
            disabled: isSubmitting
          }, isSubmitting ? 'Submitting.......' : 'Submit')), _react.default.createElement("pre", null, JSON.stringify(values, null, 2))));
        });
      }
    }]);

    return DatePickerStory;
  }(_react.Component);

  DatePickerStory.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(DatePickerStory, null);
}));