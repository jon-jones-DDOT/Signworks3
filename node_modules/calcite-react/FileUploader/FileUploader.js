"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _FileUploaderStyled = require("./FileUploader-styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FileUploader = function FileUploader(_ref) {
  var children = _ref.children,
      field = _ref.field,
      form = _ref.form,
      _ref$success = _ref.success,
      success = _ref$success === void 0 ? false : _ref$success,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onChange = _ref.onChange,
      other = _objectWithoutProperties(_ref, ["children", "field", "form", "success", "error", "disabled", "onChange"]);

  var name, touched, errors, isSubmitting, setTouched, setFieldValue;

  if (field) {
    name = field.name;
    touched = form.touched;
    errors = form.errors;
    isSubmitting = form.isSubmitting;
    setTouched = form.setTouched;
    setFieldValue = form.setFieldValue;
  }

  var handleChange = function handleChange(e) {
    if (setFieldValue) {
      setTouched(_objectSpread({}, touched, _defineProperty({}, name, true)));
      setFieldValue(name, e.currentTarget.files);
    }

    onChange(e);
  };

  var isSuccess = function isSuccess() {
    if (touched) {
      return touched[name] && !errors[name] ? true : false;
    }

    return success;
  };

  var isError = function isError() {
    if (touched) {
      return touched[name] && errors[name] ? true : false;
    }

    return error;
  };

  var isDisabled = function isDisabled() {
    return isSubmitting || disabled;
  };

  return _react.default.createElement(_FileUploaderStyled.StyledFileUploader, _extends({
    as: "input",
    success: isSuccess(),
    error: isError(),
    disabled: isDisabled(),
    onChange: handleChange
  }, other, {
    type: "file"
  }));
};

FileUploader.propTypes = {
  /** The callback function when the selected file is changed. */
  onChange: _propTypes.default.func
};
FileUploader.defaultProps = {
  onChange: function onChange() {}
};
FileUploader.displayName = 'FileUploader';
var _default = FileUploader;
exports.default = _default;