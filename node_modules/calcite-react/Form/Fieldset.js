"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldsetContext = exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _FormStyled = require("./Form-styled");

var _FormControl = require("./FormControl");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FieldsetContext = (0, _react.createContext)({
  fieldsetContext: {
    name: undefined
  }
});
exports.FieldsetContext = FieldsetContext;

var Fieldset = function Fieldset(_ref) {
  var children = _ref.children,
      name = _ref.name,
      other = _objectWithoutProperties(_ref, ["children", "name"]);

  var fieldsetContext = {
    name: name
  };
  return _react.default.createElement(_FormControl.FormControlContext.Consumer, null, function (_ref2) {
    var formControlContext = _ref2.formControlContext;
    return _react.default.createElement(FieldsetContext.Provider, {
      value: {
        fieldsetContext: fieldsetContext
      }
    }, _react.default.createElement(_FormStyled.StyledFieldset, _extends({
      horizontal: formControlContext.horizontal
    }, other), children));
  });
};

exports.default = Fieldset;
Fieldset.propTypes = {
  /** The content of the component. */
  children: _propTypes.default.node,

  /** The HTML name property applied to the contained radios and checkboxes. */
  name: _propTypes.default.string.isRequired
};
Fieldset.defaultProps = {};
Fieldset.displayName = 'Fieldset';