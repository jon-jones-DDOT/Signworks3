"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _FormStyled = require("./Form-styled");

var _FormControl = require("./FormControl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FormControlLabel = function FormControlLabel(_ref) {
  var children = _ref.children,
      htmlFor = _ref.htmlFor,
      other = _objectWithoutProperties(_ref, ["children", "htmlFor"]);

  return _react.default.createElement(_FormControl.FormControlContext.Consumer, null, function (_ref2) {
    var formControlContext = _ref2.formControlContext;
    return _react.default.createElement(_FormStyled.StyledFormControlLabel, _extends({
      htmlFor: formControlContext._generatedId,
      error: formControlContext.error,
      success: formControlContext.success,
      horizontal: formControlContext.horizontal
    }, other), children);
  });
};

FormControlLabel.propTypes = {
  /** The text content of the component. */
  children: _propTypes.default.node,

  /** The for property to be applied to the label; should match a form element id. */
  htmlFor: _propTypes.default.string,

  /** The FormControlLabel should show an error. */
  error: _propTypes.default.bool,

  /** The FormControlLabel should show success. */
  success: _propTypes.default.bool,

  /** Display prop to make this element align items horizontally instead of vertically. */
  horizontal: _propTypes.default.bool
};
FormControlLabel.defaultProps = {};
FormControlLabel.displayName = 'FormControlLabel';
var _default = FormControlLabel;
exports.default = _default;