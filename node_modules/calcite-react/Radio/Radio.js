"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _RadioStyled = require("./Radio-styled");

var _Fieldset = require("../Form/Fieldset");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Radio = function Radio(_ref) {
  var children = _ref.children,
      checked = _ref.checked,
      field = _ref.field,
      form = _ref.form,
      value = _ref.value,
      _ref$success = _ref.success,
      success = _ref$success === void 0 ? false : _ref$success,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onChange = _ref.onChange,
      other = _objectWithoutProperties(_ref, ["children", "checked", "field", "form", "value", "success", "error", "disabled", "onChange"]);

  var name, touched, errors, values, isSubmitting, setFieldValue;

  if (field && form) {
    name = field.name;
    touched = form.touched;
    errors = form.errors;
    values = form.values;
    isSubmitting = form.isSubmitting;
    setFieldValue = form.setFieldValue;
  }

  var getRadioLabel = function getRadioLabel(children) {
    if (children) {
      return _react.default.createElement(_RadioStyled.StyledRadioLabel, null, children);
    }
  };

  var handleChange = function handleChange(e) {
    if (setFieldValue) {
      setFieldValue(name, value);
    } else if (onChange) {
      onChange(e);
    }
  };

  var isChecked = function isChecked() {
    if (values) {
      return values[name] === value;
    }

    return checked;
  };

  var isSuccess = function isSuccess() {
    if (touched) {
      return touched[name] && !errors[name] ? true : false;
    }

    return success;
  };

  var isError = function isError() {
    if (touched) {
      return touched[name] && errors[name] ? true : false;
    }

    return error;
  };

  var isDisabled = function isDisabled() {
    return isSubmitting || disabled;
  };

  return _react.default.createElement(_Fieldset.FieldsetContext.Consumer, null, function (_ref2) {
    var fieldsetContext = _ref2.fieldsetContext;
    return _react.default.createElement(_RadioStyled.StyledRadioGroup, null, _react.default.createElement(_RadioStyled.StyledRadio, _extends({
      name: fieldsetContext.name,
      onChange: handleChange,
      checked: isChecked(),
      success: isSuccess(),
      error: isError(),
      disabled: isDisabled()
    }, other, {
      type: "radio"
    })), getRadioLabel(children));
  });
};

Radio.propTypes = {
  /** The text label for the Radio. */
  children: _propTypes.default.node,

  /** The form value for this Radio button. */
  value: _propTypes.default.string,

  /** The name to be shared among Radio buttons in a group. */
  name: _propTypes.default.string,

  /** Whether the Radio button is currently checked. */
  checked: _propTypes.default.bool,

  /** Event called when the Radio button value should be toggled. */
  onChange: _propTypes.default.func
};
Radio.defaultProps = {};
Radio.displayName = 'Radio';
var _default = Radio;
exports.default = _default;