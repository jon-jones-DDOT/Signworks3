"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _StepperStyled = require("./Stepper-styled");

var _Avatar = _interopRequireDefault(require("../Avatar"));

var _CheckIcon = _interopRequireDefault(require("calcite-ui-icons-react/CheckIcon"));

var _XIcon = _interopRequireDefault(require("calcite-ui-icons-react/XIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var StepIcon = function StepIcon(_ref) {
  var children = _ref.children,
      icon = _ref.icon,
      small = _ref.small,
      active = _ref.active,
      complete = _ref.complete,
      error = _ref.error,
      vertical = _ref.vertical,
      other = _objectWithoutProperties(_ref, ["children", "icon", "small", "active", "complete", "error", "vertical"]);

  var getIconContent = function getIconContent(icon) {
    if (icon) {
      //Use custom icon if they give it to us
      var smallStyle = small ? _objectSpread({}, _StepperStyled.StepCustomIconStyles.small) : null;
      var completeStyle = complete ? _objectSpread({}, _StepperStyled.StepCustomIconStyles.complete) : null;
      var activeStyle = active ? _objectSpread({}, _StepperStyled.StepCustomIconStyles.active) : null;
      var errorStyle = error ? _objectSpread({}, _StepperStyled.StepCustomIconStyles.error) : null;
      return _react.default.cloneElement(icon, {
        style: _objectSpread({}, _StepperStyled.StepCustomIconStyles.default, completeStyle, activeStyle, errorStyle, smallStyle)
      });
    } else {
      //Otherwise create an avatar based on the settings
      var avatarContent;

      var _smallStyle = small ? _objectSpread({}, _StepperStyled.StepAvatarStyles.small) : null;

      var _completeStyle = complete ? _objectSpread({}, _StepperStyled.StepAvatarStyles.complete) : null;

      var _activeStyle = active ? _objectSpread({}, _StepperStyled.StepAvatarStyles.active) : null;

      var _errorStyle = error ? _objectSpread({}, _StepperStyled.StepAvatarStyles.error) : null;

      if (error) {
        avatarContent = _react.default.createElement(_XIcon.default, {
          size: small ? 16 : 24,
          style: _objectSpread({}, _StepperStyled.StepIconStyle)
        });
      } else if (complete) {
        avatarContent = _react.default.createElement(_CheckIcon.default, {
          size: small ? 16 : 24,
          style: _objectSpread({}, _StepperStyled.StepIconStyle)
        });
      } else {
        avatarContent = children;
      }

      return _react.default.createElement(_Avatar.default, {
        style: _objectSpread({}, _StepperStyled.StepAvatarStyles.default, _completeStyle, _activeStyle, _errorStyle, _smallStyle)
      }, avatarContent);
    }
  };

  return _react.default.createElement(_StepperStyled.StyledStepIcon, _extends({
    small: small,
    complete: complete,
    vertical: vertical
  }, other), getIconContent(icon));
};

StepIcon.propTypes = {
  /** The content of the component. */
  children: _propTypes.default.node
};
StepIcon.defaultProps = {};
StepIcon.displayName = 'StepIcon';
var _default = StepIcon;
exports.default = _default;