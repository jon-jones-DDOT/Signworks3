"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _SwitchStyled = require("./Switch-styled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Switch = function Switch(_ref) {
  var children = _ref.children,
      labelPosition = _ref.labelPosition,
      destructive = _ref.destructive,
      checked = _ref.checked,
      field = _ref.field,
      form = _ref.form,
      value = _ref.value,
      _ref$success = _ref.success,
      success = _ref$success === void 0 ? false : _ref$success,
      _ref$error = _ref.error,
      error = _ref$error === void 0 ? false : _ref$error,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      onChange = _ref.onChange,
      other = _objectWithoutProperties(_ref, ["children", "labelPosition", "destructive", "checked", "field", "form", "value", "success", "error", "disabled", "onChange"]);

  var name, fieldValue, touched, errors, isSubmitting, setFieldValue;

  if (field) {
    name = field.name;
    fieldValue = field.fieldValue;
    touched = form.touched;
    errors = form.errors;
    isSubmitting = form.isSubmitting;
    setFieldValue = form.setFieldValue;
  }

  var getSwitchLabel = function getSwitchLabel(children) {
    if (children) {
      return _react.default.createElement(_SwitchStyled.StyledSwitchLabel, null, children);
    }
  };

  var handleChange = function handleChange(e) {
    if (setFieldValue) {
      setFieldValue(name, e.target.checked);
    } else if (onChange) {
      onChange(e);
    }
  };

  var isChecked = function isChecked() {
    if (field) {
      return fieldValue;
    }

    return checked;
  };

  var isSuccess = function isSuccess() {
    if (touched) {
      return touched[name] && !errors[name] ? true : false;
    }

    return success;
  };

  var isError = function isError() {
    if (touched) {
      return touched[name] && errors[name] ? true : false;
    }

    return error;
  };

  var isDisabled = function isDisabled() {
    return isSubmitting || disabled;
  };

  return _react.default.createElement(_SwitchStyled.StyledSwitch, null, labelPosition === 'before' ? getSwitchLabel(children) : null, _react.default.createElement(_SwitchStyled.StyledSwitchInput, _extends({
    onChange: handleChange,
    checked: isChecked(),
    success: isSuccess(),
    error: isError(),
    disabled: isDisabled()
  }, other, {
    type: "checkbox"
  })), _react.default.createElement(_SwitchStyled.StyledSwitchTrack, {
    destructive: destructive
  }), labelPosition === 'after' ? getSwitchLabel(children) : null);
};

Switch.propTypes = {
  /** The text label of the Switch. */
  children: _propTypes.default.node,

  /** The name to be shared among Switches in a group. */
  name: _propTypes.default.string,

  /** Whether the Switch is currently checked. */
  checked: _propTypes.default.bool,

  /** Event called when the Switch value should be toggled. */
  onChange: _propTypes.default.func,

  /** Should use a red highlight color. */
  destructive: _propTypes.default.bool,

  /** Position of the label text in relation to the input. */
  labelPosition: _propTypes.default.oneOf(['before', 'after'])
};
Switch.defaultProps = {
  labelPosition: 'after'
};
Switch.displayName = 'Switch';
var _default = Switch;
exports.default = _default;