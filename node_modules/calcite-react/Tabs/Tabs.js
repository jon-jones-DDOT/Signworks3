"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _TabStyled = require("./Tab-styled");

var _helpers = require("../utils/helpers");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Tabs = function Tabs(_ref) {
  var children = _ref.children,
      activeTabIndex = _ref.activeTabIndex,
      onTabChange = _ref.onTabChange,
      gray = _ref.gray,
      transparent = _ref.transparent,
      translucent = _ref.translucent,
      dark = _ref.dark,
      other = _objectWithoutProperties(_ref, ["children", "activeTabIndex", "onTabChange", "gray", "transparent", "translucent", "dark"]);

  var childArray = _react.Children.toArray(children);

  var childrenWithProps = childArray.map(function (child, i) {
    switch ((0, _helpers.getChildType)(child)) {
      case 'TabNav':
        return _react.default.cloneElement(child, {
          activeTabIndex: activeTabIndex,
          onTabChange: onTabChange,
          gray: gray,
          transparent: transparent,
          translucent: translucent,
          dark: dark
        });

      case 'TabContents':
        return _react.default.cloneElement(child, {
          activeTabIndex: activeTabIndex,
          gray: gray,
          transparent: transparent,
          translucent: translucent,
          dark: dark
        });

      default:
        return child;
    }
  });
  return _react.default.createElement(_TabStyled.StyledTab, _extends({
    gray: gray,
    transparent: transparent,
    translucent: translucent,
    dark: dark
  }, other), childrenWithProps);
};

Tabs.propTypes = {
  /** The content of the component; should be TabNav and TabContents. */
  children: _propTypes.default.node,

  /** The index of the Tab that should be selected and visible. */
  activeTabIndex: _propTypes.default.number,

  /** Function callback when a TabTitle is clicked. */
  onTabChange: _propTypes.default.func,

  /** Style prop to render a gray Tab. */
  gray: _propTypes.default.bool,

  /** Style prop to render a transparent Tab. */
  transparent: _propTypes.default.bool,

  /** Style prop to render a translucent Tab. */
  translucent: _propTypes.default.bool,

  /** Style prop to render a dark Tab. */
  dark: _propTypes.default.bool
};
Tabs.defaultProps = {
  activeTabIndex: 0,
  onTabChange: function onTabChange() {}
};
Tabs.displayName = 'Tabs';
var _default = Tabs;
exports.default = _default;