"use strict";

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react2 = require("@storybook/react");

var _addonInfo = require("@storybook/addon-info");

var _formik = require("formik");

var _GuideExample = _interopRequireDefault(require("../../../stories/GuideExample"));

var _TextField = _interopRequireDefault(require("./TextField.md"));

var _ = _interopRequireDefault(require("../"));

var _Form = _interopRequireWildcard(require("../../Form"));

var _Button = _interopRequireDefault(require("../../Button"));

var _Select = _interopRequireDefault(require("../../Select"));

var _Menu = require("../../Menu");

var _UserIcon = _interopRequireDefault(require("calcite-ui-icons-react/UserIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(0, _react2.storiesOf)('TextField', module).add('Basic', (0, _addonInfo.withInfo)(_TextField.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, {
    label: "placeholder"
  }, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    placeholder: "A placeholder!"
  }))), _react.default.createElement(_GuideExample.default, {
    label: "value"
  }, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    defaultValue: "James T Kirk"
  }))), _react.default.createElement(_GuideExample.default, {
    label: "error"
  }, _react.default.createElement(_Form.FormControl, {
    error: true
  }, _react.default.createElement(_.default, {
    defaultValue: "jkirk@gmail.com",
    type: "email"
  }), _react.default.createElement(_Form.FormHelperText, null, "Needs to be .gov"))), _react.default.createElement(_GuideExample.default, {
    label: "success"
  }, _react.default.createElement(_Form.FormControl, {
    success: true
  }, _react.default.createElement(_.default, {
    defaultValue: 1,
    type: "number"
  }), _react.default.createElement(_Form.FormHelperText, null, "That's a number!"))), _react.default.createElement(_GuideExample.default, {
    label: "fullWidth"
  }, _react.default.createElement(_Form.FormControl, {
    fullWidth: true
  }, _react.default.createElement(_.default, {
    fullWidth: true,
    defaultValue: "Full Width TextField"
  }))), _react.default.createElement(_GuideExample.default, {
    label: "type=\"textarea\""
  }, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    defaultValue: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
    type: "textarea"
  }))), _react.default.createElement(_GuideExample.default, {
    label: "with adornments"
  }, _react.default.createElement(_Form.default, null, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    placeholder: "Username",
    rightAdornment: _react.default.createElement(_Button.default, null, "Yay")
  })), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    defaultValue: "Dr. Leonard McCoy",
    leftAdornment: _react.default.createElement(_UserIcon.default, {
      size: 16
    })
  })), _react.default.createElement(_Form.FormControl, {
    fullWidth: true,
    success: true
  }, _react.default.createElement(_.default, {
    fullWidth: true,
    defaultValue: "500.00",
    leftAdornment: "$",
    rightAdornment: _react.default.createElement(_Button.default, null, "Submit")
  })), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    defaultValue: "500.00",
    rightAdornment: _react.default.createElement(_Select.default, {
      placement: "bottom-end",
      selectedValue: "usd"
    }, _react.default.createElement(_Menu.MenuItem, {
      value: "usd"
    }, "USD"), _react.default.createElement(_Menu.MenuItem, {
      value: "eur"
    }, "EUR"), _react.default.createElement(_Menu.MenuItem, {
      value: "jpy"
    }, "JPY"))
  })))));
})).add('With Label', (0, _addonInfo.withInfo)(_TextField.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, {
    label: "htmlFor & id"
  }, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Form.FormControlLabel, {
    htmlFor: "name"
  }, "Name:"), _react.default.createElement(_.default, {
    id: "name",
    defaultValue: "James Kirk"
  }))), _react.default.createElement(_GuideExample.default, {
    label: "auto generated id"
  }, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Form.FormControlLabel, null, "Name:"), _react.default.createElement(_.default, {
    defaultValue: "James Kirk"
  }))));
})).add('Minimal', (0, _addonInfo.withInfo)(_TextField.default)(function () {
  return _react.default.createElement("div", null, _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    minimal: true,
    defaultValue: "James T Kirk"
  }))), _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_.default, {
    minimal: true,
    defaultValue: "500.00",
    leftAdornment: "$",
    rightAdornment: _react.default.createElement(_Button.default, null, "Submit")
  }))));
})).add('With a ref', (0, _addonInfo.withInfo)(_TextField.default)(function () {
  var TextFieldWithRef =
  /*#__PURE__*/
  function (_Component) {
    _inherits(TextFieldWithRef, _Component);

    function TextFieldWithRef(props) {
      var _this;

      _classCallCheck(this, TextFieldWithRef);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TextFieldWithRef).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleClick", function () {
        console.log('click', _this.inputRef);

        _this.inputRef.current.focus();
      });

      _this.inputRef = _react.default.createRef();
      return _this;
    }

    _createClass(TextFieldWithRef, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Button.default, {
          onClick: this.handleClick
        }, "Click me"), _react.default.createElement(_.default, {
          ref: this.inputRef
        }));
      }
    }]);

    return TextFieldWithRef;
  }(_react.Component);

  TextFieldWithRef.propTypes = {
    isStory: _propTypes.default.bool
  };
  return _react.default.createElement(TextFieldWithRef, null);
})).add('with Formik', (0, _addonInfo.withInfo)(_TextField.default)(function () {
  var user = {
    name: '',
    email: '',
    password: ''
  };

  var onSubmit = function onSubmit(values, actions) {
    setTimeout(function () {
      console.log(values);
      actions.setSubmitting(false);
    }, 1000);
  };

  var onValidate = function onValidate(values) {
    var errors = {};

    if (!values.name) {
      errors.name = 'You must have a name 🤨';
    }

    if (!values.email.includes('@')) {
      errors.email = 'Most emails have an @...';
    }

    if (values.password.length < 10) {
      errors.password = 'That password is weak. You need at least 10 characters.';
    }

    return errors;
  };

  var handleNameChanged = function handleNameChanged(e) {
    // You can still attach your own onChange handlers (they will be invoked right after the Formik ones)
    console.log('Hello ', e.target.value);
  };

  return _react.default.createElement(_formik.Formik, {
    initialValues: user,
    validate: onValidate,
    onSubmit: onSubmit
  }, function (_ref) {
    var values = _ref.values,
        errors = _ref.errors,
        touched = _ref.touched,
        handleSubmit = _ref.handleSubmit,
        isSubmitting = _ref.isSubmitting;
    return _react.default.createElement(_GuideExample.default, null, _react.default.createElement(_Form.default, {
      onSubmit: handleSubmit
    }, _react.default.createElement(_Form.FormControl, {
      success: touched.name && !errors.name ? true : false,
      error: touched.name && errors.name ? true : false
    }, _react.default.createElement(_Form.FormControlLabel, {
      htmlFor: "name"
    }, "Name:"), _react.default.createElement(_formik.Field, {
      component: _.default,
      type: "text",
      name: "name",
      leftAdornment: _react.default.createElement(_UserIcon.default, {
        size: 16
      }),
      onChange: handleNameChanged
    }), _react.default.createElement(_Form.FormHelperText, null, touched.name && errors.name || null)), _react.default.createElement(_Form.FormControl, {
      success: touched.email && !errors.email ? true : false,
      error: touched.email && errors.email ? true : false
    }, _react.default.createElement(_Form.FormControlLabel, {
      htmlFor: "email"
    }, "Email:"), _react.default.createElement(_formik.Field, {
      component: _.default,
      type: "text",
      name: "email"
    }), _react.default.createElement(_Form.FormHelperText, null, touched.email && errors.email || null)), _react.default.createElement(_Form.FormControl, {
      success: touched.password && !errors.password ? true : false,
      error: touched.password && errors.password ? true : false
    }, _react.default.createElement(_Form.FormControlLabel, {
      htmlFor: "password"
    }, "Password:"), _react.default.createElement(_formik.Field, {
      component: _.default,
      type: "text",
      name: "password"
    }), _react.default.createElement(_Form.FormHelperText, null, touched.password && errors.password || null)), _react.default.createElement(_Form.FormControl, null, _react.default.createElement(_Button.default, {
      type: "submit",
      disabled: isSubmitting
    }, isSubmitting ? 'Submitting.......' : 'Submit')), _react.default.createElement("pre", null, JSON.stringify(values, null, 2))));
  });
}));