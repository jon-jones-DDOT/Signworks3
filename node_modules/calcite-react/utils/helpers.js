"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getChildType = exports.transition = exports.backgroundGradient = exports.subNavUnderline = exports.fontSize = exports.clearfix = exports.unitCalc = void 0;

var _polished = require("polished");

var _CalciteThemeProvider = require("../CalciteThemeProvider");

var unitCalc = function unitCalc(operand1, operand2, operator) {
  var operand1Value = operand1;
  var operand1Unit;

  if (typeof operand1 === 'string') {
    operand1Value = parseFloat(operand1);
    operand1Unit = operand1.replace(operand1Value, '');
  }

  var operand2Value = operand2;
  var operand2Unit;

  if (typeof operand2 === 'string') {
    operand2Value = parseFloat(operand2);
    operand2Unit = operand2.replace(operand2Value, '');
  }

  var value = window.eval(operand1Value + operator + operand2Value); // eslint-disable-line no-eval

  value = value + (operand1Unit || operand2Unit);
  return value;
}; // const unitCompare = (compare1, compare2, operator) => {
//   const compare1Value = parseFloat(compare1);
//   const compare2Value = parseFloat(compare2);
//
//   let value = window.eval(compare1Value + operator + compare2Value); // eslint-disable-line no-eval
//
//   return value;
// };


exports.unitCalc = unitCalc;

var clearfix = function clearfix() {
  return "\n    &::after {\n      content: '';\n      display: table;\n      clear: both;\n    }\n  ";
}; // const modularScale = (increment, theme) => {
//   const ratio = theme.type.ratio;
//   const bodySize = theme.type.bodySize;
//   let v1 = bodySize;
//   let v2 = theme.type.smallSize;
//   let value = v1;
//
//   while (unitCompare(v2 > v1)) {
//     v2 = unitCalc(v2, ratio, '/'); // will be off-by-1
//   }
//
//   while (unitCompare(v2 < v1)) {
//     v2 = unitCalc(v2, ratio, '*'); // will fix off-by-1
//   }
//
//   const doubleStranded = unitCompare(v2, v1, '>');
//
//   if (increment > 0) {
//     for (var i = 1; i < increment; i++) {
//       if (doubleStranded && unitCalc(v1, ratio, '*') > v2) {
//         value = v2;
//         v2 = unitCalc(v2, ratio, '*');
//       } else {
//         v1 = unitCalc(v1, ratio, '*');
//         value = v1;
//       }
//     }
//   }
//
//   if (increment < 0) {
//     const unit = unitCalc(bodySize, 16, '/');
//     const decriment = unitCalc(increment, unit, '*');
//     value = unitCalc(bodySize, decriment, '+');
//   }
//
//   return value;
// };


exports.clearfix = clearfix;

var fontSize = function fontSize(scale, theme) {
  // let fontSizeVal = modularScale(scale, theme);
  // let lineHeightVal;
  //
  // if (scale > 7) {
  //   lineHeightVal = 2.5 * theme.baseline;
  // } else if (scale <= 7 && scale > 4) {
  //   lineHeightVal = 2 * theme.baseline;
  // } else if (scale <= 4 && scale > 2) {
  //   lineHeightVal = 1.5 * theme.baseline;
  // } else if (scale <= 2) {
  //   lineHeightVal = theme.baseline;
  // }
  switch (scale) {
    case -3:
      return "\n        font-size: 0.8125rem;\n        line-height: 1.55rem;\n      ";

    case -2:
      return "\n        font-size: 0.875rem;\n        line-height: 1.55rem;\n      ";

    case -1:
      return "\n        font-size: 0.9375rem;\n        line-height: 1.55rem;\n      ";

    case 0:
      return "\n        font-size: 1rem;\n        line-height: 1.55rem;\n      ";

    case 1:
      return "\n        font-size: 1.2019rem;\n        line-height: 1.55rem;\n      ";

    case 2:
      return "\n        font-size: 1.414rem;\n        line-height: 1.55rem;\n      ";

    case 3:
      return "\n        font-size: 1.69949rem;\n        line-height: 2.325rem;\n      ";

    case 4:
      return "\n        font-size: 1.9994rem;\n        line-height: 2.325rem;\n      ";

    case 5:
      return "\n        font-size: 2.40307rem;\n        line-height: 3.1rem;\n      ";

    case 6:
      return "\n        font-size: 2.82715rem;\n        line-height: 3.1rem;\n      ";

    case 7:
      return "\n        font-size: 3.39795rem;\n        line-height: 3.1rem;\n      ";

    case 8:
      return "\n        font-size: 3.99758rem;\n        line-height: 3.875rem;\n      ";

    default:
      return "\n        font-size: 1rem;\n        line-height: 1.55rem;\n      ";
  }
};

exports.fontSize = fontSize;

var subNavUnderline = function subNavUnderline(props) {
  return "\n    background-image: linear-gradient(to top, transparent 94%, ".concat(props.theme.palette.white, " 96%, ").concat(props.theme.palette.white, " 100%);\n  ");
};

exports.subNavUnderline = subNavUnderline;

var backgroundGradient = function backgroundGradient(img, fromColor, toColor, addOverlayGradient) {
  if (!fromColor || !toColor) {
    return "\n      background: url(".concat(img, ") no-repeat top center;\n      background-size: cover;\n    ");
  } else {
    if (addOverlayGradient) {
      return "\n        background: linear-gradient(to right, ".concat((0, _polished.transparentize)(0.3, fromColor), " 0%, ").concat((0, _polished.transparentize)(0.3, toColor), " 100%), url(").concat(img, ") no-repeat center center, linear-gradient(to right, ").concat(fromColor, " 0%, ").concat(toColor, " 100%);\n        background-size: cover;\n      ");
    } else {
      return "\n        background: url(".concat(img, ") no-repeat center center, linear-gradient(to right, ").concat(fromColor, " 0%, ").concat(toColor, " 100%);\n        background-size: cover;\n      ");
    }
  }
};

exports.backgroundGradient = backgroundGradient;

var transition = function transition(delayTime) {
  if (delayTime) {
    return "\n      ".concat(_CalciteThemeProvider.CalciteTheme.transitionDuration, " ").concat(delayTime, " ").concat(_CalciteThemeProvider.CalciteTheme.easingFunc, "\n    ");
  }

  return "\n    ".concat(_CalciteThemeProvider.CalciteTheme.transitionDuration, " ").concat(_CalciteThemeProvider.CalciteTheme.easingFunc, "\n  ");
};

exports.transition = transition;

var getChildType = function getChildType(child) {
  return child.type && child.type.target && child.type.target.displayName || child.type && child.type.displayName;
};

exports.getChildType = getChildType;