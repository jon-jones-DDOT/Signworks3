function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import createFragment from 'react-addons-create-fragment';
import Panel from './Panel';
import idSafeName from '../helpers/idSafeName';

var Panels = function (_Component) {
    _inherits(Panels, _Component);

    function Panels() {
        _classCallCheck(this, Panels);

        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
    }

    Panels.prototype.render = function render() {
        var _props = this.props;
        var data = _props.data;
        var selectedIndex = _props.selectedIndex;


        if (!data.length) {
            return null;
        }

        return React.createElement(
            'div',
            { className: 'tabs__panels' },
            data.map(function (panel, index) {
                var id = idSafeName(panel.label, index);
                var o = {};

                o[id] = panel.content;
                var children = createFragment(o);

                return React.createElement(
                    Panel,
                    {
                        key: id,
                        id: id,
                        index: index,
                        selectedIndex: selectedIndex },
                    children
                );
            })
        );
    };

    return Panels;
}(Component);

process.env.NODE_ENV !== "production" ? Panels.propTypes = {
    data: PropTypes.array,
    selectedIndex: PropTypes.number
} : void 0;

export default Panels;